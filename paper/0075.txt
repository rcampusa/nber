                   NBER WORKING PAPER SERIES




                 IMPLEMENTING AND DOCUMENTING
                   RANDOM NUMBER GENERATORS



                       David C. Hoaglin*


                    Working Paper No. 75




COMRJTER RESEARCH CEN'ITR FOR ECONOMICS AND MANEL tENT SCIENCE
          National Bureau of Economic Research,   Inc.
                    575 Technology Square
                 Cambridge, Massachusetts 02139


                          March 1975



                 Preliminary: not for quotation


NBER working papers are distributed informally and in limited
numbers for comments only. They should not be quoted without
written permission.
This report has not undergone the review accorded official NBER
publications; in particular, it has not yet been submitted for
approval by the Board of Directors.

NBER Computer Research Center and Harvard University, Department
of Statistics. Research supported in part by National Science
Foundation Grant GJ-1l54X3 to the National Bureau of Economic'
Research, Inc.
                                Abstract

As simulation arid Monte Carlo continue to play an iricrasing role in statis-
tical research, careful attention must be given to problems which arise in
implementing and documenting collect ions of random number generators. This
paper examines the value of theoretical as well as empirical evidence in
establishing the quality of generators, the selection of generators to
comçxr'ise a good basic set, the techniques and efficiency of implementation,
and the extent of documentation. Illustrative examples are drawn from van-
out current sources.




                                                                                .

                                                                                .
                        Contents


1. Introduction                    •   1
2. Uniform Generators              •   1

3. A Basic Library                 •   2

4. Implementation                      2

5. Documentation                       3

6. Sunniry                             3

References                             3
                                        BIPLUIEWrIN3 AND DOCUMDING
                                          RANDOM NUMBER GENERA'IORS




                 1. INTRODUCTION                                       2. UNIFORM GENERATORS
Across the fields of statistics arid coiñputer          A source of uniform ranaom numbers is at the heart
science, from theoretical to applied, simulation        of aljrost all algorithms for generating non-
and !bnte Carlo continue to play a significant          uniform distributions, so it deserves a lot of
role. The variety of clever applications is great,      attention and is the natural place to start. This
but often it seems that the technical foundations       observation  is hardly new, but  in view of the
are shaky. The random-number generators, on which       typical   quality of.available generators it still
this whole experimentation structure rests, are         needs hasis. For      example, wherever there is a
still all too often incautiously selected, haphaz-      computer with a word size of 32   bits, one is likely
arly implemented, and inadequately documented.          to find the poor generator RANDU [10] --   its per-
Taking examples from arrong the available genera—       sistence has been rernrkable. Of course, this
tors, algorithms, routines, and libraries, the          generator (along with rrost others in comiron use) is
balance of this paper examines prevailing prac-         nultiplicative-corigruentjal, arid all such genera-
tices in selecting, implementing, and documenting       tors are well-3-iown    to
                                                                                produce output sequences
random—number generators and offers some reccinen-      which have regular structure. Specifically, the
dations.                                                set of all n-tuples (Xi,     Xi1,..., Xj+nl) fO
                                                        a lattice in Euclidean n-space [13]. For some
First, however, we should look further at the           high-accuracy multidimensional calculations this
question of prevalence: How widely are simulation       type of defect may render all congr'ueritial genera-
and Tbnte Carlo used in statistical research? In        tors undesirable. Various schemes for permuting,
preparing a position paper on publication of            raridomly sFniffling, or otherwise modifying the out-
computation-based results [8] David Andrews and  I      put of such basic generators offer reasonable
had occasion to go carefully through the 1973           improvement, but there is still much to be learned.
volumes of Biometrika and Journal of the American
Statistical Association, counting pap of vari-          Returning now to the basic congruential generators,
ous kinds. We found that 20% of all papers in—          we should be aware of one important argument in
volved simulation results, and the individual per-      their favor: they are the easiest to analyze
centages in the three hodies of papers (JASA            theoretically. As a result we can determine (over
Applications, JASA Theory and Methods, and              the full period of the generator) several indica-
Biometrika) derted surprisingly little from the         tive properties of these generators and thus have
overall figure. Even without comparable data for        a much clearer picture of what we can expect of
the computer science literature, the overall con-       them and what we cannot. The lattice structure of
clusion is clear: simulation is an important com-       the generators provides the basis for the two rrst
ponent in quite a lot of research.                      widely used theoretical tests: the spectral test
                                                  —2—

    12] arid the lattice test [2, 14]. Briefly,
  spectral test in n dimensions looks
ndardized reciprocal scale) the distance
                                        at
                                         (in a

tween adjacent hyperplanes in the most widely
rated family of hyperplanes in the lattice of
uples  produced by the generator. The lattice
St looks at the length ratio of longest arid
                                                        and the Central Limit Theorem. Clever exact
                                                        methods for the Gaussian and the exponential have
                                                        been available for about ten years, but until
                                                        recently the situation for the general case in
                                                        most of the other distribution families was not so
                                                        encouraging. Fortunately a number of new algo-
                                                        rithms have appeared during the last year or so to
                                                                                                              .
)rtest sides in a reduced basis for the lattice         improve matters. The work of Dieter and Ahrens
 n-tuples. It is not surprising, then, that             (for example, [1, 6]) is particularly noteworthy
se two tests are rather closely related. Still,         here; their acceptance-rejection methods for the
may help our understanding to apply both tests          gamna distribution and the beta distribution [6]
 study the results in dimensions 2 through 6.           have the attractive property of requiring nearly
it actual test criteria should we use?    in            constant time regardless of the parameter(s) of
ith's notation [12] for the spectral test we            the distribution.
Lculate C for n2,3,4,5,6 and require that      all
se values be at least 1 . This is the more                              4 I1LEMENTATION
ingent of the two criteria Knuth suggested, but
ent empirical experience [9] suggests that it           Now how should we go about implementing our chosen
not unreasonably difficult to find multipliers          random-number generators? The range of issues
Lch meet this requirement. For the lattice test         here is quite broad -- from choosing the level of
 us use I to denote the length ratio of long-           programming language to being careful, in an
 side to shortest side. Marsaglia suggested             assembly-language urd.fonrt generator, not to throw
;] requiring L 2, and this seems sensible,              away significant bits when converting the result
un for n:2,3,4,5,6. (Foniulated in such simple          to floating-point. Let's look at some of the
ns as "Cs > 1" and ??I < 2", the lattice test           questions from the top down.
iears to be the more stringent of the two). to
Lnts surrunarize this discussion of theoretical         1. What should the generator return? For most
)perties: these theoretical tests are much              applications the convenient form of output is a
:ter for screening congruential generators than         vector of random numbers, and this means we will
  }cuown empirical tests, and no congruential           be producing subroutines instead of functions. In
ierator should be put into use without passing          some cases a function might be better, but we
!Tfl.                                                   would want to balance this against the overhead
                                                        (both in progranining effort and storage space) of
               3. A BASIC LIBRARY                       adding the function foth to the library.
:'s tum now to what we can do with a carefully          2. How should calling sequences (parameter lists)
)sen uniform generator. What other generators           be structured? To integrate the routines as a
)uld we put with it to form a serviceable set           library, we would put the comion parameters first,
'most simulation purposes? We should not have           as in
h difficulty agreeing on a basic library, and                   RANDOM (X, N, [other parameters]).
'easonable list should look raich like this:
                                                        3. How should we organize the way in which non—
            Continuous distributions                    uniform generators use a basic uniform generator
                 Uniform (0,1)                          or generators? Here it is likely to be cleaner if
                                                        each routine which requires a source of uniform
                 Gaussian (0,1)                         randoii numbers actually incorporates its own.
                 Exponential                            This would consume little space and eliminate con-
                 Gamma  (and x2)
                                                        siderable subroutine linkage especially in the
                                                        nore complicated rejection algorithms. By remov-
                 Beta (and F)                           ing "side-effect" interactions among different non—
                                                        unifonn generatcrs it should make complex simula-
                 Student's t                            tion programs easier to debug.
             Discrete distributions                     4. How should we handle starting values? In
                 Uniform                                order to reproduce results the user must be able
                 Binomial                               to set the starting value(s) (usually for the
                                                        basic uniform genenator( s)) and recover the
                 Poisson                                current value at any point in the sequence. For
                                                        the user who wants a "random" start we can provide



                                                                                                              .
iumber of other distributions may suggest them-         a routine which uses the system clock or some
.ves for specific applications, but any reason-         other such source.
.e library should support those in the basic
;t.                                                     5. In what language should we proguam the
                                                        tors? This question may receive more varied
 each non-uniform distribution we of course             ers than the previous ones. Many generators,
t to use exact and efficient algorithms and
                                   f.
id such methods as inverse c .d . approximations
                                                        especially uniform ones, have in the past been
                                                        coded in assembly language because the result runs
                                                             —3—

    faster and because most higher-level languages             Documentation describing       use is what every program-
,   don't have the primitives for the operations in-
    volved. Now, however, it seems preferable to use
    higher-level languages (such as FORTRAN or FL/I)
    as much as possible. For one thing, this is the
                                                               mer will read     iimnediately,  and it should start with
                                                               a precise statement of what the generator is and
                                                               what it produces. (It may be that this goes with-
                                                               out saying, but an earlier (1 July 1973) edition of
    only sensible way to approach portability from one         the IMSL Library 1 Manual [11] did not         tell what
    line of computers to another, and having machine-          congruent ial generator was implemented in the sub-
    independent generators will facilitate replication         routine GGU1; it was necessary to read the         assembly
    of simulation studies, something we have largely           code [7]. Fortunately this is no longer true in
    neglected. Another important consideration is the          the latest edition.) Other          essential details for
    correctness of the implementation: assembly-               use are the calling sequence or parameter list,
    language generators are likely to have more bugs,          restrictions on parameters (for example, the start-
    and those bugs will be harder       to
                                     isolate. One              ing value), what other generators are used, and
    IBM/360 assembler implementation of Marsaglia's            the   default initialization.
    rectangle-wedge-tail algorithm for the Gaussian
    distribution [L] provides a good example. Because          To establish a generator's "pedigree", supporting.
    the programmer misused one of the machine instruc-         documentation should report the specific algorithm
    tions, the generator produced an excessive number          (with information on     its
                                                                                        efficiency), relevant
    of deviates with large magnitude (like 5 and 6!).          theoretical properties (especially for uniform
    It's reasonable to admit that one can gain a good          generators, including any embedded        in
                                                                                                      a non-uniform
    deal of speed in most random-number generators by          one), the sources of any previous implementations
    coding them in assembly language, but the conclu-          on which the present one is based, arid the results
    sion has to be that we should never start at that          of testing. Together, these should give the user
    level. Program the generator in a higher-level             an adequately detailed picture of the generator.
    language and debug it thoroughly so that there
    will be a well-understood version to compare the                                  6. S1J?ARY
    assenbly-language one against.
                                                               This paper has briefly endeavored to give an up-to-
    6. What should we do about testing? The simple             date consumer ' s view of random-number generators.
    answer, of course, is "Be thorough". This is old           Specific recormnendations cover uniform generators,
    advice, but many generators seem not to get a very         the composition of a basic library, and principles
    extensive   wor1ut. For        example, apparently the     of implementation and documentation. While a
    only test    applied to the Gaussian generator [4]         number of actual exarnpls indicate that currently
    mentioned    previously was a chi-squared test based       available generators and libraries often fall short
    on    dividing the real line into 20 intervals of          of the best that we 1.a-iow how to do, it is reassur-
    equal   probability content. Since each tail      lies     ing to note that most of the tools needed for sub-
    entirely within one of these intervals, there was          stantial improvement are ready to hand. We should
    no check on the tail part of the algorithm. A              now expect (and perhaps demand) the gap between
    simple probability plot would have exposed the             possibility and prtice to close rapidly.
    problem almost immediately. This example suggests
    a natural strategy: the testing should be                                          REFERENCES
    designed to cover each segment of a complicated
    algorithm (in addition to the performance of the           [1] J. H. Ahrens and U. Dieter, "Computer Methods
    whole). This is valuable when the implementation                  for Sampling from Gariuna, Beta, Poisson, and
    is in a higher-level language, and it is vital                    Binomial Distributions," Computing 12 (1974),
    when assembly language is involved. Testing also                  2232146.
    should reveal something about the comparative
    speed of the algorithm because this is often a             [2] W. A. Beyer, R. B. Roof, and Dorothy
    nre complicated question than theoretical calcu-                Williamson, "The lattice Structure of Multi-
    lations (of such things as the average number of                plicative Congruential Pseudo-Random Vectors,"
    uniform deviates used in a rejection algorithm)                   Mathematics of Computation 25 (April 1971),
    can answer.     For   example, W.   Gentleman told me
                                        M.                            345—363.
    recently    that on   a Honeywell 6000-series computer
    the Gaussian algorithm of Brent [3] runs about 35%         [3] Richard P. Brent,       "Algorithm 488:    A Gaussian
    slower than the 1964 algorithm of Marsaglia and                   Pseudo-Random Number Generator,"
    Bray    [15]. InfonBation like this is machine-
    dependent but    still quite useful.                              706.
                                                                             ——
                                                                      tions of   the ACM 17,     12 (December 1974), 704-

                          5.   DOCUMENTATION                   ['4] lovick Edward   Cannon III, "Pseudo Random
                                                                      Number Generators for Statistical Applica-
    Finally we come to documentation -- the most                      tions," Technical Report 69, Department of
    important step in making a generator or library                   Statistics and Computer Sciences, University
    accessible to users. Here the procedure is                        of Georgia, August 1971.
    straightforward, but lapses are frequent enough
    to demand a brief discussion. There are two basic          [5] R. R. Coveyou and R. D. MacPherson, "Fourier
    aspects: use of the generator and its "pedigree".               Analysis of Uniform Random Number Generators,"
       Journal of the Association for Computing
       Machiner1Tl967), 100—119.
[6] U. Dieter and J. H. Ahrens, "Acceptance-
    rejection Techniques for Sampling from the
          and Beta Distributions," Technical
       Ganvna
     Report 83, Department of Statistics, Stanford
     University, May 29, 1974.
[7] David C. Hoaglin,        Remarks on the IMSL
       Randan Number Generator GGtJ1," unpublished.
[8] David C. Hoaglin and David F. Andrews, "The
     Reporting of Computation-based Result in
       Statistics."       In revision for The Mierican
       Statistician.

[9] David C. Hoaglin and Cordon Sande, "A Study
     of Multipliers for Pseudo-Random Number
     Generators with Modulus 231_i." Presented           at
     Joint Statistical Meetings, St. Louis,
       Missouri,   August 1974.
[10]   IBM Corporation, System/360 Scientific Sub-
       routine Package (360A—CM-03X) Version III,
       Programmer's Manual. H20—0205—3, 1968.

[11] International        Mathematical and Statistical
     Libraries,     Inc.,    The IMSL Librax 1 Reference
       Manual, Edition               (TTRAN IV,   S/370-
       360).

[12] D. E. Knuth,        The Art of Computer Programming,
       Volume 2: Seumerical Algorithms. Addison—
       Wesley,   1969.

[13] C. Marsaglia, "Regularities in Congruential
     Random Number Generators," Numerische
     matik 16 (1970), 8—10.

[14] G. Marsaglia, "The Structure of Linear Congru-
     ential Sequences ," Applications of Number
     Theory to Numerical Analysis (S. K. Zaremba,
     editor)249—285. Academic Press, 1973.
[15] G. Marsaglia and T. A. Bray, "A Convenient
     Method for Generating Normal Variables,"
     SIAN Review 6, 3 (July 19614), 260—264.




                                                              S
