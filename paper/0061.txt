                   NBER WORKING PAPER SERIES




                FACIORING 12 BLOCK-ANGULAR BASES


                          %hn. Orchard_Hays*




                    Working Paper No. 61




 COMP1JR RESEARCH CENTER FOR ECONOMICS AND MANAGEMENT SCIENCE
           National Bureau of Econanic Research, Inc.
                    575 Technology Square
                Cambridge, Massachusetts 02139


                       November 19Th.




                Preliminary: not for quotation

NBER rking papers   are   distributed informally and   in   limited
numbers  for comments only. They should not be quoted without
written permission.
This report has not undergone the review accorded official NBER
publications; in particular, it has not yet been submitted for
approval by the Board of Directors.
*NBER Computer Research Center. Research supported in part by
 National Science Foundation Grant GJ-1154X3 to the National
 Bureau of Economic Research, Inc.
                                                                            .
                               Abstract

A factorization of the basis for any block-angular 12 nDdel is presented,
and its inverse is shown to be readily irintainable as piecemeal product-
forms plus possible additional columns. Straightforward rules for piece-
meal transforirat ion of full rows and columns are given.




                                                                            S
                                Contents

1.   Environment                                .    1

2. A General Basis                              .    2

3.   Factoring of D and                         •    3

4.   Recombining Second Order Factors   .   .   .    6

5. Rc Updates with the Factored Inverse .            9

6.   Effect of Change in D;1 on E                   11
7.   cross-Block Exchanges                          l4
8.   Summary of Basis-Change Cases                  15
9. A Skeletal Decomposition Algorithm               16
References                                          24
1. Environment

      The foim of a general block-angular LP nodel for decomposition algorithms
is as follows:
                  P
              AX+ZAX=b.
                    pp   pl


              where the A and B are matrices of row-order m0 and m
              (pO ,1,. . ,P
                         .     for     p=l,. .   . ,P
                                                        for B) X are np_order
              columns matching the coltmn orders of the A (and B for
              p   >   0), and b are rn-order columns of        constants.


A0   and each B are assumed to contain full nip-order identity matrices
with corresponding logical (slack) variables in the X columis. Except
as explicitly noted, it is unnecessary to distinguish logical and
structural variables in the present discussion. One fr logical in
                   =
                       {X, X2,..., X0 I
is to be maximized. For simplicity, we will take this to be X when
necessary     to distinguish it, i.e •,     the    functional is the top row.

       When   necessary      to be precise, the ui_order identity matrix will be

denoted by I, but usually I will stand for the identity of whatever order

is required. Occasssionally 'k is used to dentoe the k-order   identity.
       In the present discussion, the total model is of only minor interest,
the basis for some solution to such a model being the focus of attention.
Hence the same letters as above will be used for substructures of a basis,
with no additional notation since additional marks will be required for
other purposes. Thus, in the sequel, A0 and B stand for square, nonsingular
matrices unless modified by "the full".
                                         —2—



2. A General Basis

    Almost the entire difficulty in partitioning a block-angular model for
computation is due to the fact that a general basis has a more Oclicated
structure than the entire model. The most generel structure required for
a basis is as follows:

                  oo T
                 (A
                     ol           ...TJA...A...A
                                        1
                                     0±-'   p   P

                 (0       T1 ...    0)      B1                =




                 (0       0..Tpp...O)            B
                                                 p

                 (0       0        UT)
                                    PP
                                                     •B
                                                      P

                                                                             S
         where  A00is k columns
                         0      from the full A0, op
                                                  T are

          k columns from the full A with T the corresponding
          columns from the full B

The columns of A00 and of each T0 are all linearly independent so that
the matrix
          (A00Tol ...         T
                              oP

is nonsingular. Obviously then

          P
             k        m
                      a
         p=o
              p
                                           —3-.



3. Factoring of D arid

     Let

                 10                            A
            B=         B1


                                       p

                                               B

The matrix B is readily factored into P matrices of the form

                 1g... Ar... 0
                   I
                         •B
                             p
                                  ..   I
which are completely corrmutative arid have inverses of the same form. Hence
the inverse of B can be computed piecemeal and the pieces multiplied together
in any order. Since P2 encompases all possible cases, that is, any results
can be   applied recursively, we illustrate the above statements for P2, which

in fact constitutes a proof.


                         I                                       -1 [       -A   B
   II Ai                      -A B1.                [       A2

           B1                    B1
                                           I
                                                    .   I               I


   [                                                L       B2
                                                                   [
    IA               I                                      F Al                      I         Al
                             A2     [i               A2 1                   1                        A2     1
       B1
                         I        =          I                        B         =



            ij               B2    [                 B2j    [              'j                        A2



      pp
Let -A B1 = A
              p    Then substituting A for A in the above shows that the
                                                            p
inverses corimute and nniLtiply together in exactly the same way. Hence
                                                                       p

handling of B and B1 poses no problem at all. Note that B is
computed autanaticafly by the product form of inverse. In fact, the above
factorization is merely a generalization of a special case of the product
form of inverse. This gave rise to the name "block-product form of inverse"
                                                          [LIP]
in an ealier decomposition algorithm.
    We must now seek a matrix E such that                             either EBD         or BED. A little

experimentation      should convice the reader that the form                                 EB leads     to riore
complications    than    it resolves. Hence, we adopt the form BE=D.
    Let E be partitioned exactly as D with blocks denoted                                        by Epq. Let

            E
            op
                     Q forp>0

            Epp =1p forp>0

            Epq =0

            Epa=B(0..T
                 p
                       ...0)=(0...Tpp ...0)
                       pp
                                                                                     forp>0
                                                      P
            E
            00          T .. .T
                     (Aoool              )       -           A B1          (0.. .T       .   . .0)
                                                     p::1 pp                        pp
                                                      P
                 =   (A00 Tol. . .TOP ) +                    A (0.. .Tpp         ..0)
                                                       1          p
                                                      P
                 =(A00T ol
                         ...ToP)—                           A (0... ...0)
                                                             p             pp
                                                     p=l
                                                                                                                     .
                                       —5—


Note that   the second tern in E0 can be computed            in   either of   t .ys, which-
ever is itore convenient.
     Again i1ustrating with P2, it is apparent that the above definitions
of E satisfy the equation BE-D.

             I          A          ((A00 T01 T2) - (0               0)   -A2 (0 0 T22))

                  a1                (0T110)

                         B2         (0022)



                        (A
                          00
                                  Tol T)02 A..j        A2

                        (0    T11 0)              B1

                        (0 0           T22)            B2



Therefore D
             —1
                  = E—1 B—1 .     Since   E is of the fonn

                         E
                             00

                          E10      i
                          20
its inverse is of the form


                         -E  E' I
                          10 oo
                         —E
                          20 E1
                             00               I
                                               —6—



The difficulty is thus reduced to ccznputing E . Although this looks
somewhat formidable, further simplications are possible.
4. Recathining Second Order Factors

       Consider a single factor of B1 in the form

            10 Ai                 =
                                       D
            [oBjJ
and an     with all T—columns replaced with unit vectors, the positions
in all lower blocks being zero, i.e.

                           00
                 (A00 'm - k
Suppose some column T1 from                the full            B1} is to be irrtroduced to



                                                                                                       .
                                                        {Al,
replace     the (k0+l) -          St   unit vector.     The    column T must first be
transformed by D1, as follows:

                                                                     +
                 D' Tl =      1 All rTi                        [ol       A1 Til   =   [To1   A1


                              L BJLT1±[                        L         B1T          L           Tl
The result is           exactly the two subcolumns which should go into the new Eoo

and   E10
             .   The new E can be computed in product form, as follows:

       Let       T
                  ol       T1 - A1

                  =E-l
                    00
                       -T
                         01
                           the eta column formed from o by
                                             k-Fl
                           pivoting on (Y.


                  nil      the extension to n1 using T11

                 FC   oi      the elementary column matrix containing                                  S
                              r        in column k +1
                                  ol                0
                                          —7—


      Then

                =
                        ((F() A) 1 'm0-k-l = OO                      nO1


(Note:   The notation A is imprecise since A00 is riot                 square.    What

is meant is the         part of E   corresponding to A00. The remaining unit
columns are   unchanged.)

      Now
                    -E10 E - (0.. T11...)   .             E which is Inerely*


row k0+l of             repeated m,1 times scaled by the elements

Call this highly        singular matrix     (E)10. To see its effect in

subsequent   transformations, suppose some            general column       S={S0,S1,S2}
is to be transformed into terms of the new basis or, nore briefly,
"updated".    First

                           IAA
                             12         S
                                          o          s+A..s
                                                      o 1-l 1               S
                                                                             2
             D1S    =
                               B1
                                i
                                 l      s2
                                                            B1S1
                                                            B1S2

Note that      is simply the upper parts of the updates by D' and

added to S0. Next,

                            00                       0          00          0
                           (E)        I                        (E)10
                           0
                                                12   s2               S2



 Such a product of a column on the left multiplied by a row on                    the right
 is often called an outer product, as it is in the sequel.
                                      —8—


   is   merely another update to      and     =
                                                  S2
                                                       But what of the term
(E)10          It is merely

                    k+l
                -   S°                      (sclar times m1-order column)

Hence the computation and     recording of either Ti11 or (E)10 is
unnecessary.   Only T11 need be kept. Furthermore, since it applies only
to the p=l seg'nent, it can be kept with the pl block. If there were
severul such columns, they would all be additive (subtractive) with
multipliers from       .   If (E)20 were not void, it would apply in the
same way to
      This appears to be about as complete a factorization if            as is
possible. Note that all inverse factors except the      can be carried
in product form in the usual manner, in fact this is advantageous for
computing the terms A S. And even the application of the        is only a
slight variation on usual product-form updating.
      Note also that if a new T1 replaces the original T1, the upper part
can be incorporated in the product form of             and the lower part simply
replaces T11. It must      be understood,   however, that   if any B1   changes,

the      rm.ist be updated, which is another reason for carrying them with
block p. Moreover, there is an effect on E which is rather more
complicated.   This   will be   taken up in Section 6.




                                                                                   .
                                           —9—


5.   Row Updates with the Factored Inverse

       Suppose a general row R CR0 ,R1,. ..
                                                   ,R,)
                                                          must be transformed. In
point of fact, the simplex method and most of its variations almost never
update a general row, except the Phase 1 feasibility form. In a decanposi-
tion model, feasible solutions to the subproblems must be found independently
anyway, so that even a feasibility form would be nonzero only in R0. In
dual pricing, the denominator form would be nonzero in some block                     and
zero elsewhere. However, we may as well look at the general case since the
special cases will be apparent.
      In order to compute PD, we first compute
                                             E1
                         = CR
                             o ,R,1,R2 )
                                              (E)10 I
                                              (E)20                   12



                           ((RQE ÷ R1(E'           10   + R2 (E)20), R1, R2)

Since R1 and R2 are unchanged we can concentrate on R0. The first term is
merely the usual backward transformation if E is kept in product form.
If R1=R2=0, as would often be the case, that is the end of it, but suppose
not. However, even then, there is a further effect only when both R and
(E) are
    0 nonzero. Suppose R1 and (E),0 are both nonzero; whatk+lis their
product? Recall that (E)10 is the outer product of and
                                                            ° or,
                                                       (E0)
rrore generally,    the r-th row of           ,   or   the sun   of   several such outer

products for r1    ,r2,... For each        such r, let


                   R1   T, an inner product         over m1   elements
                                            - 10 —



Then

                                            r
                  R1(E1)10 = r
where

                   r is the       r-th row of E

This   is   readily computed by adding each            to the r-th element of
before computing

                   R0
                           00

Let         be the product so computed. Then we must compute


                       =
                           (,R1R2) B'
For p1, this gives


                                            =             +
              (0,R1,R2)
                                   B'
                                        I


and    this applied to block p2 gives

                                                 A2
            ' ok + R1B1) ,R2)               I
                                                              'Ai   +
                                                                        R1B1)   ' oA2 + R2B))


                   =
                        (RQ,R1.R2)


Note that              and that      p >    0, are   of the same form, merely the

usual backward transforrr.tion for (Re, R) post-multiplied by
                                          - 11   —




       Thus   the     can be computed piecemeal provided all the                 are
accessible first to compute R0.


6. Effect of Change in D on E

       It has thus far been shown that both row and co1imin updates are
readily performed with the factored inverse and that changes in
are easily accounted for. However, a change in a D1is not as snp1e
when T exist. First of all, the                      must be updated, as previously
noted, but this is not different from one eta-update on any set of 1n_order
columns. We must now investigate the effect on E.
       Consider again the situation arrived at with E in Section L, and
suppose the next change of basis occurs in D1, i.e. in {A1 ,B.. Insofar
as D1 is concerned, this is handled in normal fashion with an additional
eta-column. But E and E were computed on the basis of the original D1
and are no longer valid. Drop the hats on Eand E and consider them
the current 00
            E and E00.            We   now have D
                                                1 arid D
                                                       1 . Let
                              T-AT.
                              ol i                         T
                                                            ol
                                        T11                T11


Then the      (k0+l)-st column    of   E has changed from              to T01 and   must be
accounted for in E. This is done as usual by computing

                             -'
                    czE—l
                        oo
                             T
                              ol
                     k+l
                      0
arid   pivoting   on ct to form          a new         which   is   added to the product form

for    E to give (a new)     .          Furthermore, this must be done for all T-columns
from block pl if several are            in effect.
                                      - 12 —

                                          °
      The question arises as to whether a                might   not vanish so that   pivoting
is not possible. We glossed over this question in the first place but presumably

the   column T1 was selected to pivot in position k0+l becasue. that a-element
was nonzero. The change in {A1 ,B1 }, however, was determined on the basis of
some updated element from the full B1 being nonzero and has no obvious implication
for T1 and a. One answer is that since, in a global sense, we are simply
nuiltiplying nonsingular matrices to form a nonsingular product, no factor
can become singular, but this argument is incomplete and vague.
       Let S be the column from the full {A1 ,B1 } which replaced the r-th
column      m) of D1 to give D1. To make this selection, the column S
         Cr >

had to be updated and made into an a-column. Let us carry out this
calculation, again with P 2.
                        I A1 A2           S0            S0 + A1 S1
                 S=                                                   =
                                          s1              ç' S1
                                B;1       0
                                                                              2

                        E'
                        00                         C)     00 S0                   S
                                                                                  0
            E1    =
                        (E)10    I
                                               S1         CE1)10 .        +


                                      I
                        (E)20                  0
                                                          (E)20


Nov        0 since it was selected to pivot on. Assuming only one T11 in
position   k0+1, then


                 =_o    k +1
                               T10
                                                                                                 .
                                             — 13   —




Hence   not both terms are zero arid they are not equal. But we have
uncovered    another     question:      How do we know that          0 so the pivot can be
made in D1? Let us answer this question first.
       Suppose ço.         Then     S should not replace the r-th column in            but
                                      k +1
the T1 column in E since S0 °                 0. We have already seen how to accomplish
this. But of course this is not to the purpose, so after replacing T1 with S,
we must replace the r-th column of D1 with T1. We are assured that this is
possible since T, the second pivot, is also nonzero.
                               k +1
      Now suppose     0. The ci.    we initially started to investigate
           - k +1
is simply S0 ° and what makes it nonzero? Suppose it is zero. Then S
                                          —1                                    *
does   not depend on T1 and vice-versa so Eco need not be updated. This
seems like a nice answer but there is a catch.
       Let us now assume there are several T-columns from block pl, say
in positions t1,t2,... Then

                        1 i ot
Now if ç=o,        we   can select any           0 for the interchange, say the largest
magnitude. But if                   0 and the sum is zero, it is not necessarily true that
S is independent of all Tt. Furthermore if the sum is not zero but some S
are zero, they may not remain zero as individual updates to E are made.
Hence the updating of E may be order-dependent. (A similar phenomenon
occurs    in updating     GUB bases which are a special case of decomposition. The
situation        is much messier in general block-angular models.)


 Note    -that
                     k+l
                 if S ° 0,
                                -
                                          that
                                                        -           enter   into the
                                                 is, T11 does not
calculation and         hence        does not change.
                                               — lI1   —




    7. Cross-Block Exchanges

            There   are two remaining cases to consider:       a column fran     the   fufl

    A replacing a T-column, and a column fran block q replacing one from block p.
    We will take up the latter first.
            The calculation of S in the previous section showed that although
    S2O, 2 might not be zero and the pivot might be selected fran this
    segment. However, in this case, for sane r-index in p2 and some t-index in
    p= 0,




    Hence column S from block 1           replaces column Tt from block 2 in E. The
    old     Tt2 must be dropped and

    E1 is updated in
                                          l   added to the T-columns

                             standard fashion. There is      no trouble
                                                                       for p1. The
                                                                          with   zero   values.
            Now suppose some column S from the full
                                                            A0 is to replace sane T-column.
    In this case,

                           E1         S
                                      0
                            oo_
                            (E)10 S
                            (E)20     s0


•



               12
    since S =S 0 and
                              0-0 .   The     update of oo
                                                        E1 is standard, i.e. 0S is a
    igular a-column         pivoting in some position r m0. The              is merely

    dropped       from   the set for block p.

             We   thus have the rather surprising result that inter-block exchanges
    are     simpler tbari intra-block exchanges, except for p0. (A column from the full
    A0 replacing
                         another in        is a standard operation, just like the       last case above.)

                                                                                                            .
                                           — 15   —




8.   Suixmaxy of Basis-Change Cases

     We sumBarize here for nore convenient reference the various basis—
change cases analyzed in prior sections. The designation (p ,q) indicated
(in, out) with respect to blocks.
     A. Case (o,o)
          Some S from the    full A0 replaces another in Eco•
          Standard LP update.

      B. Case (o,p)
          Same as Case (o,o) except the outgoing T-column must have its

                dropped   from   the set p.


      C. Case (p,o)

          Compute T   and T         with   D1. Use T'   as the entering column in
                   op      pp               p   op
          Eooand add      P to the set of T-columns for block p.
                           pp

      D. Case (p,g)

          Can   only occur as a change in E with one or irore columns
                                                                             Tqq
                                                                                   in
          effect. Drop the outgoing Tqq from the q set and then proceed
          as in Case (p,o).
      E. Case (p,p)
          1.          0 where r is basis index of outgoing column.

                Use          as the -co1umn to update           to D1.
                If           O, done. ((E)0 O if and only           if the

                set of T-columns for block p is empty.)         If not,

                proceed as follows:
                                            — 16 —




                                                                                               .
                 Update all         to   reflect the change in D.

                 Each one has a position index t. For           each       0,

                 use S0 as an entering column in E pivoting on

                 position t. This may have to be done recursively

                 until aU t are      processed.      (Note that     itself

                 changes with each such update.)


            2.
                  p
                 In this case,                     0. Select, say,
                                    t

                            ft]
                            t°J
                 as   the t of   interest. Theating Tt as       an outgoing

                 co1inrn,   do Case (p ,q). (Actually qp but this is
                 ijirnaterial.) Now treating            as an incoming co1i.nin
                                                   Tt
                 (in   place of S which replaced it in E), do step 1.

                 above.



9. A Skeletal Decomposition Algorithm

      Of the several algorithms which have been developed for block-angular

dnDmposition mdoels, the best-known and, probably for that reason, the

most successful have been those based on the Dantzig-Wolfe principle.

However, D-W algorithms       have often    proved unsatisifacotry in practice

although the generality of approach           is   sometimes indispensible.

      The   concept of partitioning is not usually associated with D-W algorithms
and, in fact, all algorithms are sometimes regarded as falling into               t classes:

D—W   or Generalized LP,      and   partitioning schemes. But this is inaccurate.
                                      - 17   —




D-W algorithms must deal with subproblems and a master or derived problem just
as any others do. The proper distinction is whether or not factorization of
the basis inverse is employed. In D-W algorithms, factorization of B1 is
implicitly used but no particular point is made of it. Nevertheless,
factorization is an outgrowth of Dantzig's old idea of a pseudo-basis. The
                                       [5]
GUB   algorithm of Dantzig and Van Slyke when implemented with product-form
is a special case of complete factorization, or, more properly, complete
factorization of a special case of a block-angular model.
                                  [3]
      The Beale decomposition scheme, produced before computers were adequate,
used a form of pseudo-basis and what amounted to factorization. The block-
                                       [4]
product algorithm developed by this writer used factorization essentiafly as
described in the preceding sections, though in more tortuous forms, combined
with a parametric RHS approach. Unfortunately, most readers focused on the
parametric aspects rather than the factorization. Also, the computer
implementations of the algorithm (of which there were t with a third variant
reportedly under development) fell into obscurity for nontechnical reasons.
Consequently, factorization as such is not well known. However, the
excellent performance of GUB algorithms in recent years ought to recommend
more attention to it. Furthermore, it is not antithetical to other concepts
but may be helpful to their successful implementation. Any reasonable
algorithm rrust, in this writer's opinion,   employthe factorization of B1.
Indeed, this is virtually the raison d'etre for decomposing block-angular
odels. The use of E1, while more complicated, avoids many of the
numerical problems of standard D-W algorithms and the associated slow-
convergence properties.
                                                 18 -


      A   skeletal algorithm is outlined below. Points at which a user's
own variation are easily incorporated will be noted. The reason for such a
skeletal algorithm is to standardize and automate the various complicated
data handling problems and transformations which always occur. It is simply
iractical for each investigator to start building all his own system gear from
scratch. -iat is needed is an off-the-shelf decomposition "engine" which can
be   used in   a variety of "vehicles".
       Step 0     Obtain, generate or guess a master pricing row
                      oi'" 'om' i.e., a set of dual                 variable
                  values     for the A .   A number      of   schemes for

                   obtaining ir0 have been proposed and          several    used.

                  Any     meaningful   approach is      worth considering.
                   However, it must be realized that even if the

                   optimal ir      were provided,   no algorithm will

                   produce a global optimal solution in one sweep

                   except by sheer chance.


       Step 1      Obtain a "good"      feasible    solution to each   subproblem
                   in the following form:

                            maximize
                           mjjiimjze    ii A subject to
                            r Ally1 lo
                            1° H RI_I
                            10 BHX                  lb
                            L JLJ L          I




                   arid   stated   ranges on the X,, where VP is       a column
                   of m0 free variables.
                                      — 19        -


         It is probably wasteful to fully optimize each
             on   the first sweep but some irnprovnent
         over the first feasible solution should be
         obtained. If w0A goes unbounded, just stop
         at that point since presumably is incorrect.
         [The user may have additional rules to impose here.]

         Accumulate Z VP as the subproblems are solved.
                        P
         If any subproblem is infeasible, the whole
         model is andthere is no use continuing. Also
         consuct       the basic solution column                { 0,   f,... ,
         where        is the basic subcoliinn of


Step 2   We have the following (probably infeasible)

         solution     to the whole model.

         B=]I D , the bases obtained in Step 1, with
           pP
         corresponding D           D
                                  pP
         Since V +
                        &X
                              =   0, with             all X feasible,
                  P
                 .Z    AX         -   E   V
                 p1     p p           p P
                                          P
                 E1 where m =             E       m , hence
                                              0   p

                 EI         EI
                        m' 00 0
                         — 20   —




Thus,
        E000
          U +App
               X =b
                 •0
                    B    X b                   (pl,. ..,P)


where   U0 is the subcoluinn of logical    variables in X0

and   has the vector value b0+ V .        Only elements of
                                    PP
U0 are prinially infeasible. U becomes                    If the
user wishes to use a D-W algorithm, he may alternatively
regard the VP as candidate columns and fonn the derived
problem

        AX
        00 -E E V. A. zb0
                 Jp Jp

                     A.         =1
                     j

where   only jl for each p is presently defined.

The effect is the same in either event: If U0
is not feasible, a Phase 1 is now generated;
if it is, a Phase 2 .           an atteirt is made
                                Then

to obtain   either feasibility or optiniality with
A0X0 holding the V constant. If an unbounded
feasible solution   is   found, the    whole model   is
unbounded   and. nothing more need be done.
Otherwise a final        for this sweep is obtained,
whether Phase 1 or Phase 2. In general, E00 is
now of the form initially assumed in Section L,
with corresxnding
                                    - 21    -

   Step   2A An irrevocable decision must be made as to whether
              to use factorization or not. If a D-W approach
              or some other convergence scheme is employed, the
              rest of the mechanics are essentially repetitions
              of Step 1, possibly with user's selection and
              termination rules. Otherwise, proceed to
              Step 3 for factorization.

   Step 3     Establish some tolersrice (negative upper limit
              in the usual scheme) for an acceptable reduced
              cost or "di". This should have a larger magnitude
              than the standard system tolerance but must
              progressively approach the latter as the end of
              the phase nears.

              Using the current ir , form R by adding* the f to
                    in Section 5. All           for p > 0. (Alternatively,
              one could use the dual algorithm with two R-forms but
              this is less practical, particularly if P is large,
              requiring dual pricing of all subproblems.)

              Comput? R0 and   proceed to   form   the    for   pl , 2,...   and
              price the   corresponding   subproblems    until an acceptable

                 is found.




On the first sweep of Step 3 (the second sweep altogether), all
                                          — 22    —




           [The   user may wish to impose priority                rules   on
           selection of p. If these are independent of
           the current solution, the simplest way is to
           input the subproblems in priority order in the
           first place.]

Step Li.   A column S (say for variable X) from some block
           ps has been selected to enter the solution (enter
           the basis or change bound). First form
                  BSDS; -o      5           S
                                             S

           as   in Section L.         (S 0   for p         0, s) This column

           should   be saved in case it is needed later.

                            =               -                    - exist.
           Now compute S0 and all                 for which

                 will exist in any event.) As each pice is

           generated, do pivot selection for

                       vs       ,   pO,... ,s..

           retaining    the subcolumn                 for any   winning ratio.
           (In fact, the entire           vector         should be retained.)

           At the end, some winning ratio
                   r
                        row r in block           t

           or

                        change       of   bound   for   X
           is at hand.
                                              — 23 —




                The new solution vector must now be computed:

                         = B - 0   ,   over all nonzero

                If a   change   of bound occurred, we nay return
                to Step 3 arid continue pricing.          Otherwise   a
                change of   basis   must be made in Step 5.

     Step 5     Depending   on whether      s 0, t0,    and st,
                update the entire basis        inverse using   the
                appropriate case from Section 8.

     Step 6     Return to block 0 and reoptniize it (whether
                in Phase 1 or Phase 2), updating the basis
                as required and obtaining a new               Note
                that this can possibly eliminate some
                T-colurnns. Now return to Step 3.


Terminations:
     1. Some subproblem is infeasible in Step 1.
          No feasible solution to model.
     2. An unbounded solution       is   found in Step 2.
          Entire model is unbounded.

     3.   No acceptable d found        in   Step 3,   even after
          tolerance    is set to system standard,

          (a)   In Phase 1, no feasible solution to model.

          (b) In Phase 2, current solution is optimal.
                                                 — 24 —




     ii..    No   0-value found in Step 4. (Can only happen in Phase 2
             unless digital difficulties occur.) An unbounded solution
             has been found, viz:
                      -   0   for any 0    > 0




References

  [1]       Dantzig, George B., and P. Wolfe: Decomposition Principle for
            Linear Programs, Operations Res., vol. 8, pp. 101-ill, 1960.

  [2] Rosen, J.B.: Convex Partition Progranming, in Robert L. Graves
      and Philip Wolfe (eds.), "Recent Advances in Mathematical
            PrograrrnTling," pp. 159-176, McGraw-Hill Book Company, New York,
            1963 (see list of references on p.176).

  [3] Beale, E.M.L.:         The Simplex Method Using Pseudobasic Variailes
            for Structural Linear-progranuiiing Problems, in Ibert L. Grave.s
            and Philip Wolfe (eds.), "Recent Advances in Mathematical
            Prograimting," pp. 133-148, McGraw-Hill Book Company, New York,
            1963.

  [4]       Orchard-Hays, W.: "Advanced Linear-Prograrriming Computing Techniques,"
            McGraw-Hill Book Company, New York, 1968, particularly Chapters 10-12.
  [5 TI     Dantzig, George B., and R .M. Van Slyke:  Generalized Upper Bounding
            Techniques for Linear Prograiriming, pts.1 and 2, Operations Res. Ctr.
            Tech. Repts. ORC, 6 4-17 and aRC, 64-18, Univ. of California, Berkeley,
            August 1964, arid   February   1965.




                                                                                      .
