                        NBER WOR1NG PAPER SERIES




                         ROSACK Docnt No.       1

                   Semi-portability of FORTRAN Programs


                              Neil E. Kaden*
                              Virginia K1ema


                        Working Paper No. 103




       Computer Research Center for Economics and Manageirrit   Science
                National Bureau of Economic Research, Inc.
                          575 Technology Square
                     Cambridge, Massachusetts 02139



                             September 1975



                    PreJ±ninary: not for quotation

NBER working   papers are disibuted infonrfly and in limited nunbers      for
caients    only. They should not be quoted without written peiinission.
This  report has not undergone the review accorded official NBER publications;
in   particular, it has not yet been sunitted for approval by the Board of
Directors.

*
 NBERComputer Psearch Center. Research supported in part by National Science
 Foundation Grant #DCR 75-08802 to the National Bureau of Economic Psearch, Inc.
                             1



                    Table of Contents



                                        •

Ac]nowledgernents                       .11
Pax't One
Part T.yo                                    3

References                                  10

Apperidi.x                                  11
                                   11



                               Abstract


ansferring Fortran subroutines from one manufacturer' s machine to another
or from one operating system to another puts cerrtain constrains on the con-
struction of the Foran statements that are used in the subroutines. The
reliable performance of this mathematical software should be unaffected by
the host environment in which the software is used or by the compiler from
which the code is generated. In shorrt, the algori-thn is to he independent
of the computing environment in which it is run.
     The subroutines of ROSEPAC1< (Robust Statistics Estimation Package) are
Fortran IV source code designed to be semi-portable where semi-portable is
defined to mean transportable with minimum change. *




                            Ac}oiowledgnents



The authors wish to thank J. Boyle and W. Cody for sharing their internal
document on progranmting conventions, J. Kirsch for his helpful suggestions
on documentation of subroutines, D. Hoaglin and G. RudenTian for their con-
structive criticism of this document, and Sheila Howard for her careful
typing of the manuscript.




*
       W. J., "The Construction of Numerical Subroutine Libraries," SIAM
    Review, Vol. 16, No. 1, pp. 36-46, January (1974).
                                           -1—




Semi-portability      of Fortran subroutines puts certain constraints on the
construction of Fortran statements, the declaration of variables, and the
representation of constants that are used in the subroutines. Many of these
constraints are needed for Fortran subroutines that are to be irribedded in
applications subsystems that are written in another language, say FL/i.
    Inevitably, the nnerica1 algebra algorithms themselves are strengthened
when their perfonnce is unaffected by the arithmetic of the rich±ne on
which they are used and the Fortran compiler by which their code is generated.
       The ruJ.es for structured progranuring [1,2,31, arid structured docunentation
(see Part     Two,   Section X   of   this docnt) should be followed insofar as possi-
ble.    The   corrnts within the program or subroutine should be sufficient to
inform      the user about input parameters, output parameters, temporary storage

parameters, error exits, and the algorithm that the program            implements.
       This dociiint presents certain suggestions for prograrrming that will tend

toward requirements for semi-portability of ANSI Fortran IV            (as   described in

CACM, Vol. 7, No. 10, October '6.) subroutines and programs. We also suggest

certain conventions for cormients         and   general formatting of the Fortran code.

By "formatting" we mean the spacing and indentation that determine the

general appearance and readability of the code. Such formatting is suggested

to help the reader or the user understand the algorithm, the program, and the

flow of control within the program.


Part One

The suggestions for prograrrming are
       I.        C11N storage should not be used for arrays. This            is   not
                anANSI restriction, but driver programs become simpler                 to
                write, and the use in a paged envirorurnt is enhanced             if
                one does not use C)M1)N.
       II.      All array arguments should have adjustable dimensions. These
                dimensions should be made explicit in the declarations of the
                formal parameters for each subroutine. For example,
                              —2—




                  REAL A(NN,N)
       not
                  PEAL   A(NM,l)

III.   EQUIVALCE statements should not be used.

IV.    Certain   Fortran compilers do not distinguish more than six
       characters of an identifier. Hold identifiers to six charac-
       ters or fewer.
V.     Do not use rrniltiple entry points or non-standard returns.
VI.    Be sure that the precision of any Fortran library routine
       or built-in function is explicit in all statements. For
       example, DABS, not ABS, for absolute value for long preci-
       sion computing. Do not use mixed mode arithmetic or assune
       there is an implied conversion anywhere, riot even for con-
       stants. For example
                  DØUBLIE PRECISION X
                  XX+      l0.ODO
       not
                  DØUBLE PRECISION X
                  XX+      10.0

VII.   Constants that are used in iterations or convergence criteria
       should be functions of the machine's precision, i.e., the
       smallest floating point number, , representable in the machine
       for which the floating representation of l+c>l. Certainly, a
       constant that cannot be converted precisely on the machine
       should never be used. For example, .1, is representative of
       such numbers.
VIII. Test cases nnist be devised so that data can be converted uniformly
       on all target machine. The word length of the machine determines
       the truncation of the internal representation of floating point
       numbers, and conversion routines do not treat floating point
       numbers uniformly. The integers are treated uniformly with respect
       to conversion so long as they lie within the precision range of arith-
       metic of the computing machine. One suggestion for portability for
       test cases used as input numbers is to read them in as integers and
       then DFWAT to get the floating point representations.
IX.    Obscure underflows can often produce side effects that give
       divide checks or overflows. This problem is particularly acute
       because the range of arithmetic on many machines is not suretric
       about zero. For example the range of arithmetic on the IBM 360 /
       370 machines is about 10 > x> l08. That an algorithm will
       exhibit overflow, underfiow, or divide check problems is often
       not known in advance. However, some linear systems routines have
       this problem when an inner product is formed or when multiple
       divides are encountered. Be prepared to isolate such problems.
                                   —3—




           One solution is to reorder arithmetic expression. Another
           solution is to resort to extended precision arithmetic for
           those critical sections of code.
    X.     The usual rules for separate sections for error handling
           and input-output that are required for applications sub-
           systems are equafly applicable for semi-portable Fortran
           programs. The error handling from the subroutines should
           be uniform. The input-output should be confined to main
           programs or special 1-0 subroutines; that is to say, compu-
           tation subroutines should be 1-0 free. The goal of the
           error recovery is to permit computation to continue without
           resorting to system termination.
     XI.   We expect the subroutines in ROSEPACK to be compiled with
           Fortran compilers with the highest level of optimization.
           We have not used hand optimization in the subroutines

Part 'Io
The suggestions for formatting are
     I.    Identifiers
           Identifiers, i.e., variable names, should correspond to
           default declarations in Fortran. Ho.iever, explicit declara-
           tions should be written for each identifier.
            Variables from the calling sequence, internal variables, and
            function names should all be declared separately. For a
            suggestion on how to accomplish this see X Internal L)ocumen-
           tation    Section B (PARAMETERS), Section C (LOCAL VARIABLES),
            and Section   D (FUNCTIONS) of the description of the Prologue.

     II.    Labels
            If the order of labels within a subroutine is not linear the
            convention used should be explicitly described. This order-
            ing of statement labels should be linear and could proceed
            in multiples of 10 for interior program sections. The next
            level of program section could proceed as 100, and perhaps the
            next as 1000.
            Do not use unreferenced labels.
            Code for error exits should be surrounded by coirurnts and
            located at the end of the program or subroutine. The labels
            for error exits should be 2 or 3 digits, the first of which
            is 9, the last non-zero.
            One format statement may be used by rrore than one print state-
            rnent in a program. Therefore we suggest that all format state-
            ments be labeled with 4 digit n.mibers the last of which is non-
            zero and placed after RETURN and before END of the program.
       Preferably all input-output should be written in subroutine
       for!n. We suggest that    a
                                DATA statement be used to fix units
       of 1-0 and    that this
                            DATA statement be made particular  toa
       given    installation.
       The variables containing this 1-0 unit information should be
       passed as parameters to all subroutines using these 1-0 units.
       This device allows a global change of an 1-0 unit without
       recompiling individual subroutines.
III.   Use of blank spaces
       There should not be extra blank spaces around dummy variables
       or constants ThO loops. Blank spaces should delimit symbols
       in assiiment statements. Blank spaces should be used wherever
       such use will enhance readability of elements of ecpressions or
       statements.
IV.    Tab Spacings
       Throughout this document we are assuming tab setting in columms
       1, 7, 10, 15, 20, 25, etc.
V.     Continuation Characters
       Second and subsequent lines of all continuation statements should
       be numbered 1 through 9, then A through Z in columm 6. The text
       of each continuation statement should be indented one tab space
       from the initial line of the statement.
VI.    DO loops
       All D0 loops should be surrounded by comment statements which
       may be blank. Text conunents should follow a blank comment state-
       ment. If more than one statement is in the range of a DO loop,
       the closing statement of the DO loop should be a CONTINUE. This
       CONTINUE should be unambiguous. Statements between DO and CONTINUE
       should be indented one additional tab space to correspond to a block
       structure.
       Inner loops should be indented one tab space to the right of their
       surrounding outer loop.
       For examples of indentation of DO loops   see the examples in
       Appendix I.
VII.   DATA Statements
       Data statements should be used to set installation-dependent
       constants, such as data-set numbers   for I/O, and machine preci-
       sions, underflow tolerances, or other machine-dependent constants.
       See X, Internal 1)zcumethation, Section L, for more details.
       If a non-numeric character string must be used in a DATA state-
       ment, it should be packed as one character per machine word
       and always stored in an array.
                              —5—




VIII. Structured programming
       The prograirunirig and fonnattirig conventions that we describe
       are similar to structured programming in the following ways:
       1. format for readability and understanding
       2. indentation for major and minor loops
       3. array dijrnsions are adjustable
       Li. temporary storage arrays are passed as parameters
       5. documentation is sictured such that it is contained
           within the routine.
IX.    Printed output
       All printed output should be fonratted such that it is not
       greater than 8 1/2 inches in width. Most line printers print
       10 characters per inch, and 80 characters per line allows ample
       margins. This will eatly aid in reproduction of the output.
X.     InterTlal icumentation
       All For'an programs should be well doc.mented by liberal use
       of comment statements. Proper doci.mntation will enhance read-
       ability and appearance of the code, improve understanding of the
       algorithm used, help ensure proper use of the program, and aid
       in future modifications. When semi-portability is also considered,
       proper documentation serves to isolate those portions of the code
       which are installation-dependent.
       In-line documentation of Fortran programs can be considered in
       two major sections, the Prologue and the Program-flow comments.
       The latter consists of the corrunent statements embedded within
       the code describing how the algorithm is being carried out as
       the flow of control passes from statement to statement. The
       former consists of certain non-executable FORTRAN statements
       found at the beginning of the subprogram which fully describe the
       proper use of the software, as well as infcrmnation concerning
       its development. Any user familiar with the guidelines has the
       added advantage of 1owing where to find specific information
       concerning the program. The Prologue also identifies and isolates
       installation-dependent aspects of the program and thus enhances
       semi-portability. The Prologue is the major docimentation for
       the use of the program subroutine.
       Program-flow comments should be delimited by special characters
       to enhance their readability and appearance. In ROSEPACIK the
       colon C:) is used. Such comments should also follow the rules
       for statement indentation described elsewhere in this document.
       In most cases, the text of the comment should be preceded and
       followed by a string of 10 special characters (colons). At least
                        —6—




one blank space, but not more than three blank spaces, should
be put between the special character strings and the text of the
comment. If this method is used for a comment extending over
several lines, all lines should have a "C" in colturm 1, arid all
but the first line should be indented one additional tab (beyond
the current level of indentation).
Building on the suggestions of Boyle and Cody, an alternative
method of delimiting comments, recommended for important comments
or those extending over several lines, is to surround them by
a "box" of special characters. The following is an example of
what is meant by a "box":
C


          ::   THIS   ISACONT
C         :




Blank comment statements (i.e., comment statements containing
blanks in colizins 2 through 72) may be used wherever their use
enhances the readability of the program.
The statement irrmediately before the END statement should always
be a comment statement delimiting the end of the program and con-
taining the name of the program. An example follows:

C         :::::::::::     LAST CARD OF (NAME OF SUBROUTINE) :::::::::::
          END

The Prologue consists of the declarations of the calling sequence
and variable names of the subprogram, a number of sections of
text on the subprogram, and any flATA or EQUIVALCE statements.
It contains a number of headings denoting the different logical
sections of the Prologue. The headings are coimnt statements
with the character "k" in columns 7 through 11 and the heading name
beginning in column 12 and followed by a colon (:). A blank comment
statement should not immediately follow a heading. If the section
denoted by the heading line is empty, the heading should be followed
by a comment statement containing "NONE" in columns 7 through 10 and
then a blank comment statement.
The different headings, in the order they should appear, are:
          -PARAMETERS
          -LOCAL VARIABLES
          -FUNCTIONS
          -PURPOSE
          -PARAMETER DESCRIPTION
          -APPLICATION AND USAGE RESTRICTIONS
          -ALOORITHM NOTES
          -REFERENCES
          -HISTORY
          -GENERAL
          -BODY OF PROGRAM
                       —7—




Three delimiter lines, consisting of a blank conment statement,
a cnment statement consisting of the special character colon
(:) in co1uns 7 through 72, and then a second blank coirment
statement, should occur mneidately before the purpose heading
arid mnediately after the GENERAL section. All lines between
these delimiters should be comnnt statements. When colms
73 through 80 of each card contain serialization or identifica-
tion characters, this gives a box-like appearance to the part
of the Prologue containing text.
An exanle of two programs following these guidelines is in
Appendix I.
           is a brief description of each section of the
What follows
Prologue. Note that no blank connt statements should occur
until after the FUNCTIONS    section.
    A. CALLING SEQUENCE
        The SUBROUTINE or FUNCTION statement should be the
        first line of the subprogram. Blanks should be used
        to enhance readability.
     B. PARA1TERS
        Declaration   statements should be grouped by type, i.e
        first INTEGER, then REAL, then DØUBLE PRECISION, or REAL*8,
        then   REAL*l6, then Cø'PL'(, CøMPLD*32, then LØGICAL.    Within
        each type grouping, variable names should be listed in
        the order they occur in the calling sequence. By para-
        meters, we mean all of the variable names appearing in
        the calling sequence.
     C. LOCAL VARIABLES
        As with the preceding section, declaration statements are
        grouped by type, and in the same order. Within each type,
        variable names should be listed alphabetically.
        ALL variables used in the program should be explicitly
        declared.
    D. FUNCTIONS
        All functions called by the program should be explicitly
        declared. Declaration statements are grouped by type.
    E. PURPOSE
        Briefly describe the purpose of this subprogram. Give
        references when necessary. More detail can be given in
        later sections.

    F. PARAMETER DESCRIPTION
        This section contains 3 subsections. The first describes
        input parameters, the second describes output parameters,
        and the third subsection describes parameters used for
        temporary storage by the subprogram. If the contents of
        any parameter variable can be changed by the subprogram,
                     —8—




     it should be considered an output parameter. See
     the examples in Appendix I for the forirat, keywords,
     punctuation and indentation used in this section.
G. APPLICATION AND USAGE RESTRICTIONS
     If any other programs in this package can call this
     subprogram, or are called by it, they should be des-
     scribed here. If this subprogram is part of a group
     of programs which are called in some specified order,
     this should also be included. Give references except
     when a reference is implicit, as with another member
     of the same package.
     Also included in this section are any warnings about
     special cases or possible errors which can occur if there
     are errors in the subprogram call. Warnings about misuse
     of tolerance parameters belong here. The entry in
     PARAETER DESCRIPTION should refer the reader to this
     section where   applicable.

H.   ALGORITHM NOTES
     Anything special about the algorithm used or its implernen-
     tation should be listed here. Any    special   conventions
     regarding           labeling or camienting should be
                  statement
     mentioned. If there is anything special about error     hand-
     ling which has not yet been mentioned, it should be
     described here.
I.   REFERENCES
     References from elsewhere in the documentation, as well as
     any other references pertaining to the subprogram, should
     be listed.
J. HISTORY
     The author of this subprogram, as well as the date and place
     of origin should be listed. If the subprogram is a transla-
     -don of a program in another larigiiage or is based on another
     program, a reference should be given. If the program has
     been rrdified since it was written, the date and person
     making the itodification should be noted. If this subprogram
     has been released as part of a subroutine library, the current
     release date of the library should be given.
K. GENERAL
     If this                          under research supported by
               subprogram was developed
     a grant requiring ac]<owlednent, the required information
     should occur here. The person to contact concerning coninents
     and problems with the subprogram should have his address in
     this section.
                —9-.




L. DATA and EQUIVALANCE Statements
   Following the second occur'ence of deliting comment
   statements (a blank comment statement, a cojmnt state-
   ment with colons in colurrris 7 through 72, and a second
   blank colTrnent statement) is where all DATA and EQUIVALENCE
   statements should occur. If a DATA statement contains an
   installation-dependent constant, coimnt statements explain-
   ing its value and mentioning the installation's desiation,
   should precede the DATA statement. Those conunent statements
   should conform to the standards of program-flow comments.
   All DATA statements should precede any EQUIVALENCE staements.
M. BODY OF PROGRAM
   This heading denotes the end of the Prologue and the beginning
   of the program body.
                                     —10—




                                 References



El] Dahl, 0 .H, Dijks'a, E . W., Hoare, C .A. R., S1ictured Pograimning, Academic
       Press, (1972).

[2]   Kerriighan, B.W., Plauger, P.J., "Prograiiing Style: Examples and Counter-
       Examples," ACM Coriuting Surveys, Vol 6, No. J., pp. 303-319, December,
        (197'i.).


[3]   Kernighan, B. W., Plauger, P. J.,     "The Elements of Proanimirig Style," Bell
        Telephone   Laboratories (l97L.).
                                 -U-

                               Appendix
This appendix contains listings of two subroutines that are samples of
candidates for inclusion in ROSEPACK. The reader is reminded that we
are relying on Fortran compiler optfriization of sub-expressions within
loops.
    SUBROUTINE I1INSOL(NM,N,V,W,IP,B,RKTOL,IERR,RV1)                                                                1INOO01O
C                                                                                                                    11N00020
C   *****PARMIETERS:                                                                                                !'IIN0003O
    INTEGER NM, N ,IP, IERR                                                                                         MIN0oOO
    REAL*8 V(Nt•1,N),W(N),B(NM,IP),RKTOL,Rv1(N)                                                                     MIN0005O
C   *****LQCAL VARIABLES:                                                                                           r1IN00060
    INTEGER I,J,K                                                                                                   fiIN0007O
    REAL*8 RKTOL1,X,Z                                                                                               MIN000BO
C   *****FUNCTIONS:                                                                                                 MIN0009O
C   NONE                                                                                                             IINOO100
C                                                                                                                   NINOO1lO
C   :   :::::: : : : :   : : : : : : : : : : : : : : : : : : : ::::::: : : : : : : : : : : : : : : : : : : : : : ::::: :MINOO 120
C                                                                                                                        tiINOGl3O
C   *****PURPOSE:                                                                                                   MINOOV4O
C   THIS SUBROUTINE DETERMINES A CANDIDATE SOLUTION TO THE LINEAR                                                   NINOO15O
C                                                                                                    T              :11N00160
C   SSTEf1 AXB, AFTER THE SINGULAR VALUE DECOMPOSITION AUSV OF' A NINOO17O
C                                                                         T                                         NINOO18O
C   REAL Ii BY N RECTANGULAR MATRIX, FORMING U B RATHER THAN U,E!AS                                                 tIINOO190
C   ALREADY BEEN PERFORMED. THIS CANDIDATE SOLUTION IS BASED ON THE                                                 NINOO200
C   RANK TOLERANCE PARAMETER, RKTOL, OR THE DEFAULT, 2.ODO**(_26),                                                  M1NOO21O
C   WHICH IS THE SQUARE ROoT OF THE MACHINE PRECISION 2.ODO**(_52).                                                 N1N00220
C                                                                                                                   P11N00230
C                                                                                                                   NINOO2O
C   *****PARANETER DESCRIPTION:                                                                                     NINO02O
C   ON INPUT:                                                                                                       M1U00260
C                                                                                                                   11U00270
C         NM MUST BE SET TO THE ROW DIMENSION OF THE TWO DIMENSIONAL                                                MINOO28O
C             ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM                                                   M1N00290
C                 DIMENSION STATEMENT;                                                                              MINOO300
C                                                                                                                   NINOO31O
C         N IS THE NUMBER OF ROWS OF B, AND THE ORDER OF V;                                                         M1N00320
C
                                                                                                                    M1N00330
C         V CONTAINS THE SQUARE MATRIX V (ORTHOGANAL) OF THE SINGULAR                                               t1IN0O30
C                 VALUE DECOMPOSITION;                                                                              11N00350
C
                                                                                                                    N1N00360
C         W CONTAINS THE N (NON—NEGATIVE) SINGULAR VALUES OF A (THE                                                 M1N00370
C              DIAGONAL ELEMENTS OF S). THEY ARE UNORDERED;                                                         U1N00380
C
                                                                                                                    MINOO39D
C         IP IS THE NUMBER OF COLUMNS OF B;                                                                         MINO000
C                                                                                                                   MIN0O41O
C                                                                    T                                              MrNOOI42O
C         N CONTAINS THE RECTANGULAR MATRIX U B;                                                                    MINOO3O
C                                                                                                                   MINOO!O
C         FKTOL IS THE RANK TOLERANCE WHICH WILL BE USED. IF RKTOL IS                                               NINO045O
C             NOT POSITIVE, THEN THE DEFAULT WILL BE USED.                                                          MINOO46O
C                                                                                                                   MItJOO.47O
C                                                                                                                    lIN008O
C   ON OUTPUT:                                                                                                      UINOO9O
C                                                                                                                    11U00500
C         V REMAINS UNCHANGED;                                                                                      !11N00510
c                                                                                                                   M1N00520
C         W CONTAINS THE PSEUDOINVERSE OF THE DIAGONAL MATRIX S.                                                    fl1N00530
C              ANY SINGULAR VALUES THAT ARE LESS THAN RKTOL TIMES THE                                               MINOO54O
C              LARGEST SINGULAR VALUE ARE SET TO ZERO IN THE PSEUDO—                                                HINOO55O
C              INVERSE;                                                                                             NINOO6O
C                                                                                                                   H1N00570
C         B HA.S BEEN OVERWRITTEN BY THE SOLUTION X;                                                                NINOOS8O
c                                                                                                                   1INOO59O
C         IERR IS SET TO                                                                                            rltNOO600
C                 ZERO FOR NORMAL RETURN,                                                                           MINOO61O
C                 —1      IF THE MAXIMUM SINGULAR VALUE IS ZERO (INDICATING                                         M1N00620
C                         A ZERO A—MATRIX IN THE SINGULAR VALUE                                                     N1N00630
C                         DECOMPOSITION).
C                                                                                                                   M1N00650
C                                                                                                                     M1N00660
C       RVI IS A TEMPORARY STARAGE ARRAY.                                                                             F11N00670
C                                                                                                                     M1N00680
C       *****APPLICATION AND USAGE RESTRICTIONS:                                                                      M1N00690
C       IT IS RECOMMENDED THAT THE SUBROUTINE MINFIT (1) PERFORM THE                                                  MINOO700
C       SINGULAR VALUE DECOMPOSITION.                                                                                 MINOO7t1O
C       THE IERR PARAMETER SHOULD BE CHECKED BEFORE CALLING MINSOL.       MINOO72O
c                                                                         M1N00730
C       SETTING THE RANK TOLERANCE SHOULD ONLY BE DONE IF THE USER KNOWS MINOO7!O
C       THE SINGULAR VALUES OF THE A—MATRIX WITH RESPECT TO THE CERTAINTY M1N00750
C       OF THE DATA.                                                      M1N00760
C                                                                         M1N00770
C       *****ALGQRITH1 NOTES:                                             N1N00780
C       NONE                                                              MINOO79O
C                                                                                                                     IIINOO800
C       *****BEFERENCES:                                                                                              IIINOO81O
C       (1) ARGONNE NATIONAL LAB., FORTRAN SUBROUTINE MINFIT, ANLF233S.                                               tiINOO82O
C       (2) BECKER,R.,KADEN,N., AND KLEMA,V., 'THE SINGULAR VALUE                                                     111N00830
C          ANALYSIS IN MATRIX COMPUTATION', MBER WORKING PAPER NO. L6,                                                t1INOO8i4O
C          (JULY i97Z)                                                                                                tIINOO85O
C       (3) GOLUB,G.H., AND REINSCH,C.,'SIt4GULAR VALUE DECOMPOSITION     M1N00860
C          AND LEAST SQUARES SOLUTIONS,IN J.H. WILKINSON AND C. REINSCH MINOO87O
C          (EDS.) HANDBOOK FOR AUTOMATIC COIIPUTATION,VOLUME II:LINEAR     r4INOO8O
C          ALGEBRA, SPRINGER VERLAG,.1314—151 (1971); PREPUBLISHED IN     M1N00890
C          NU1ER. MATH. 14,O3_t12O (4970).                                MINOO900
C                                                                         MINOO91O
C       *****HISTQRY:                                                      MINOO92O
C       MINSOL IS BASED ON CODE WRITTEN BY FRED CIARAMAGLIA (NBER/COtIPUTERMIN0O93O
C       RESEARCH CENTER; MAY , 1973).                                      1IN0O90
C                                                                         N1N00950
C
o
        ADAPTED BY NEIL KADEN (NBER/coMpuTER RESEARCH CENTER) JUNE                                         ,197!IriCo
                                                                                                                Jfl7
o
C
        DATE LAST MODIFIED: JUNE                  ii, 1975.
                                                                                                                      ltN3fl99J
C
C
                                                                                                                      1I 1 )fl
        QUESTIONS AND CO1MENTS SHOULD BE DIRECTED TO:                                                                      MINO1O1O
C             SUPPORT STAFF MANAGER                                                                                        MINO1O2O
C             COMPUTER RESEARCH CENTER FOR ECONOtIICS AND IIANAGEMENT SCIENCE ?11N01030
C             NATIONAL BUREAU OF ECONOMIC RESEARCH                                                                         M1N010140
C             575 TECHNOLOGY SQUARE                                                                                        MINO1O5O
C             CAMBRIDGE, MASSACHUSETTS 02139.                                                                              1IN01060
c                                                                                                                          MINO1O7O
C       DEVELOPMENT OF THIS PROGRAM SUPPORTED IN PART BY                                                                   MINO1O6O
C       NATIONAL SCIENCE FOUNDATION GRANT GJ—1154X3 AND                                                                    flINOlO9O
C       NATIONAL SCIENCE FOUNDATION GRANT DCR75—08802                                                                      UINO1100
C       TO NATIONAL BUREAU OF ECONOMIC RESEARCH, INC.                                                                      IIINO111O
C                                                                                                                          1IN01120
C       : : : : : : : : : : : : : : : : : : : : : : :::::::: : : : : : : : : : : : : : :::::: : : : : : : : : : : : : : : :MINO 1130
c                                                                                                                     r1IN01140
C       :::::::::: RKTOL.1, FOR THESE APPLICATIONS, IS A MACHINE DEPENDENT MINO11SO
C          PARAMETER BASED ON THE SQUARE ROOT OF THE RELATIVE PRECISION                                               MINO116O
C          OF FLOATING POINT ARITUMATIC.                                                                              111N01170
C          MACHE? = 16.ODO**(_13) FOR DOUBLE PRECISION ARITHMETIC
C          ON S360 AND S370. :
        DATA RKTOL1/Z3ALW000000000000/
                                             :::::::::                                                                MINO118O
                                                                                                                      tIINO119O
                                                                                                                      HINO1200
C                                                                                                                     r'IINO121O
C       *****BODY OF PROGRAM:                                                                                         H1N01220
        IERR    o                                                                                                     £11N01230
        IF (RKTOL .LE. O.ODO) RKTOL RKTOL1                                                                            f'1INO124O
C       :::::::::: FIND MAXIMUM ELEMENT OF W :::::::::;                                                               fIINO125O
        Z    0.000                                                                                                    rIINO126O
C                                                                                                                     M1N01270
        DO 750 J = 1, N                                                                                               ?11N01280
           x   W(J)                                                                                                   1INO1290
           IF (X .LE. Z) GO TO 750                                                                                    UINO1300
           Z   X                                                                                                      11N01310
    750 CONTINUE                                                                                                      1IN0 1320
c
                                                                                                                      tIINO133O
          IF (Z .EQ.0) GO TO 999                                     MINOI 3110
C         :::::::::: FORM PSEUDO INVERSE OF DIAG(W) ::::::::::       MINOl 350
         800 J
          DO      1, N                                               MINOl 360
         x    W(J) / Z                                               M1N01370
         IF (X .LE. RKTOL) GO TO 790                                 MINO1 380
         w(J)    1.ODO / W(J)                                        '1IN01 390
         GO TO 800                                                   HINOI 1400
  790    W(J) = O.ODO                                                HINO1111O
  800 CONTINUE                                                       HINO 11420
C     :::::::::: FORM X (RETURNED IN B)                              1 IN 011130
          DO 900 J       1, IF                                       M1N0111110
C                                                                    M IN 01 1450
               DO 810 I     1, N                                     H IN 01 1460
                  RV1(I)     w(I) *   B(I,J)                         N IN 01 1470
    810        CONTINUE                                              HINO 11180
C                                                                    MIND 11490
               DO 890 I = 1,     N                                   H IN 01500
                  X   O.ODO                                          HINO151O
C                                                                    MINOl 520
                   DO 850 K   1, N                                   MINO 1530
                      X = X + V(I,K) * RV1(K)                        N IN 015140
    850            CONTINUE                                          H IN 01 550
C                                                                    MIN0 1560
                   B(I,J)    X                                       HINO1 570
    890         CONTINUE                                             MIND 1 580
C                                                                    1 IN 0 1 590
    900 CONTINUE                                                     1 IN 0   1 600
C                                                                    HIND 1610
          GO TO 1000                                                 ri   INO 1620
C                        ERROR IF MAX SINGULAR VALUE   0 ::   ::::   IIINO 1630
    999 IERR =      —1                                               IINO1 6140
C                        RETURN TO CALLING PROGRAM                    II N 01 650
    1000 RETURN                                                      MINO1 660
C                        LAST CARD OF MINSOL                         N IN 01670
          END                                                        MINO168O
        SUBROUTINE LUDCMP(MN,M,N,A,IHTTC,ICOL,IROW,IERR,ICMAX)                 LUD000IO
C       *****PARAtIETERS:                                                      LUD0002O
        INTEGER tiN,M,N,IHTTc(N),IcoL(N),IRow(r1),IERR,ICMAx(N)                LUD0003O
        REAL*8 A(MN,N)                                                         LUDOOO4O
C       *****LQCAL VARIABLES:                                                  LUD0005O
        INTEGER I,nIIN,IPIVOT,ITEMP,J,MAXCOL                                   LUD0006O
        REAL* AMAX,RATIO,TEMP                                                  LUD0007O
C       *****FUNCTIONS:                                                        LUD0008O
        INTEGER IIINO                                                          LUD0009O
        REAL*8 DABS                                                            LU000100
C                                                                              LUDOO11O
C                                                                          ::::LUDOO12O
c                                                                              LUDOO13O
C       *****pURPOSE:                                                         LUDOO1O
C       THIS SUBROUTINE DOES AN LU DECOMPOSITION ON THE REAL N BY N           LUDOO15O
C          RECTANGULAR MATRIX A, WITH MODIFIED COMPLETE PIVOTING, AND         LUDOO16O
C          RETURNS BOTH THE STRICT LOWER TRIANGLE OF L AND THE FULL           LUDOO17O
C          UPPER TRIANGLE OF U.                                               LUDOO18O
c                                                                             LUDOO19O
C       *****PARMIETER DESCRIPTION:                                           LUDOO200
C       ON INPUT:                                                             LUDOO21O
C                                                                             LU00022O
C          NM MUST BE SET TO THE ROW DIMENSION OF THE TWO—DIMENSIONAL          LUDOO23O
C              ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM             LUDOO24O
C.             DIMENSION STATEMENT;                                            LUDOO2O
C                                                                              LUDOO26O
C          H MUST BE SET TO THE NUMBER OF ROWS IN THE MATRIX;                  LU00027O
c                                                                              LUDOO2SO
C          U   MUST BE SET TO THE NUMEH OF COLUMNS IN THE MATRIX;              LUDOO29O
C                                                                              LUDOO300
C          A CONTAINS THE MATRIX TO BE FACTORED BY THE LU—DECOMPOSITION        LUDOO31O
C               WITH COMPLETE PIVOTING;                                        LUDOO32O
C                                                                              LUDOO33O
C          IHTTC IS SET SUCH THAT IF IHTTC(J) IS LESS THAN ZERO THEN THE LUDOO3O
C               J—TH COLUMN OF THE INPUT MATRIX CANNOT BE PIVOTED INTO     LUDOO3SO
C               THE FIRST N COLUMNS OF ITS LU—DECOMPOSITION. ALL ELEMENTS LUDOO36O
C               OF THIS VECTOR SHOULD BE SET TO ZERO TO INSURE NORMAL      LUDOO37O
C               PIVOTING;                                                  LLTDJ0380
C                                                                          LUDOO39J
C       ON OUTPUT:                                                         LUDOOOO
C                                                                          LUDOO1O
C          A CONTAINS THE L—MATRIX AND THE U—MATRIX AS FOLLOWS:            LUD001420
C               A( ROW(I),COL(J) ) FOR I LESS THAN OH EQUAL TO J CONTAINS LUDOO3O
C               THE (I,J) ELEMENTS OF THE UPPER TRIANGULAR U—MATRIX;       LUDOO!4O
C               A( ROW(I),COL(J) ) FOR I GREATER THAN J CONTAINS THE       LUDOO5O
C               SUB—DIAGONAL (I,J) ELErIENTSOF THE L—NATRIX. THE DIAGONAL LUDOO6O
C               OF THE L—UATRIX CONTAINS ALL ONES;                         LUDOO7O
C                                                                              LUDOOt8O
C           IROW   REFLECTS THE ROW PIVOTING PERFORMED. IF IROW(J) IS          LUDOO49O
C                  EQUAL TO K THEN THE J—TH ROW WAS PIVOTED INTO THE K—TN      LU000500
C                  ROW—POSITION. SEE ALSO THE OUTPUT DESCRIPTION OF A;         LUDOO51O
C                                                                              LUDOO52O
C           ICOL REFLECTS THE COLUMN PIVOTING PERFORMED. SEE ALSO THE          LUDOOS3O
C                OUTPUT DESCRIPTION OF IROW;                                   LUDOO54O
C                                                                              LUDOOS5O
C           IERH IS SET TO ZERO FOR NORMAL EXITS.                          LU00056O
C                IT IS SET TO K, WHERE K IS AU INTEGER DENOTING THE        LUDOO57O
C                CURRENT ITERATION. IF NO ACCEPTABLE PIVOTS COULD BE FOUND LU00058O
C                (AN ACCEPTABLE PIVOT IS A NON—ZERO ONE WITH THE           LUDOO59O
C                CORRESPONDING ELEMENT OF IHTTC NON—NEGATIVE).             LUDOO600
    C              IF AN ERROR EXIT IS TAKEN, THE DECOMPOSITION HAS ONLY       LtJDOO61O
    C              BEEN PERFORMED FOR K—i ITERATIONS.                          LUDOO62O
                                                                               LU DO 0 6 30
C            ICMAX IS USED FOR TEMPORARY STORAGE BY THE SUBROUTINE.                                                                     LUDOO6O
C                                                                                                                                       LUDOO65O
C            *****APPLICATION AND USAGE RESTRICTIONS:                                                                                   LUDOO66O
C            LUDCMP CAN BE USED IN SOLVING A LINEAR SYSTEM AXB.                                                                         LUDOO67O
C                                                                                                                                       LUDOO6O
C            SPECIAL CARE SHOULD BE EXERCISED IN THE USE OF THE PARAMETER       LUDOO69O
C            IHTTC.                                                             LUDOO700
C                                                                               LUDOO71O
C            *****ALGQRITH?1 NOTES:                                             LUDOO72O
C            LUDCr-IP USES INDIRECTION IN FORMING THE LMATRIX AND THE U—MATRIX LUDOO73O
C            TO AVOID ACTUALLY INTERCHANGING ROWS AND COLUMNS IN MAIN STORAGE. LUDOO74O
C                                                                                                                                       LUDOO75O
C            *****REFERENCES:                                                                                                           LUDOO76O
C            NONE                                                                                                                       LU00077O
C                                                                                                                                       LUD00780
C            *****HISTORY:                                                                                                              LUDOO79O
C            WRITTEN BY NEIL KADEN (NBER/CONPUTER RESEARCH CENTER) JULY 31,                                                             LUDOO800
C            197L.                                                                                                                      LUDOO81O
C                                                                                                                                       LUDO'J820
C            DATE LAST MODIFIED: JUNE 17, 1975.                                                                                         LUDOO83O
C                                                                                                                                       LUD0O84O
C            *****GNRAL:                                                                                                                LUDOO85O
C            QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO:                     LIJDOO56O
C               SUPPORT STAFF MANAGER                                          LUDOO87O
C               COMPUTER RESEARCH CENTER FOR ECONOMICS AND MANAGEMENT SCIENCE LUDOO88O
C               NATIONAL BUREAU OF ECONOMIC RESEARCH                           LUD00890
C               575 TECHNOLOGY SQUARE                                          LUDOO900
C               CAMBRIDGE, MASS. 02139.                                        LUDOO91O
C                                                                              LUDOO92O
C            DEVELOPMENT OF THIS PROGRAM SUPPORTED IN PART BY                  LU00093O
C            NATIONAL SCIENCE FOUNDATION GRANT GJ—1154X3                       LUDO09O
C            TO NATIONAL BUREAU OF ECONOMIC RESEARCH, INC.                     LUDOO9SO
C                                                                                                                                              LU000960
C            :   : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :::::: : : : : : : : : : : : : : : : : : : : : : : : : : : LUDOO97O
C                                                                                                                                       LUDOOYbO
C            *****BODY OF PROGFAM:                                                                                                      LUDOO99O
             ThIN = 1INO(tl,N)                                                                                                          LUDO1000
             IERR   0                                                                                                                   LUDO1O1O
C                                                                                                                                       LUDO1O2O
             DO 10 I1,M                                                                                                                 LUDO1O3O
          IROW(I) =                   I                                                                                                 LUDO1O!10
    10 CONTINUE                                                                                                                         LUDO1OSO
C                                                                                                                                       LUDO1O6O
C                                                                                                                                       LUDO1O7O
       DO 20 I=1,N                                                                                                                      LUDO1O8O
          ICOL(I)                     I                                                                                                 LUDO1O9O
    20 CONTINUE                                                                                                                         LIJDO1100
C                                                                                                                                       LUDO111O
C            ::::::::::BEGINNINGQFOUTERLOOP::::::::::                                                                                   LUDO112O
             DO     110 IPIVOT=1,IMIN                                                                                                   LUDO113O
C                                                                                                                                       LUD011O
                    DO !40 J=IPIVOT,N                                                                                                   LUDO115O
                             ICMAX(J)            IPIVOT                                                                                 LUDO116O
C                                                                                                                                       LUDO117O
                             DO    30 I=IPIVOT,M                                                                                        LUDO1ibO
                                      IF    (DABS(A(IROW(I),ICOL(J))) .LE. DABS(A(IROW(                                                 LUDO119O
         1                             ICMAX(J)),ICOL(J)))) GO TO 30                                                                    LUDO12CO
                                  ICMAX(J) = I                                                                                          LUDO121O
    30                       CONTINUE                                                                                                   LUDO122O
c                                                                                                                                       LUDO1230
    4O              CONTINUE                                                                                                            LUDO124O
c                                                                                                                                       LUDO125O
                    MAXCOL   0                                                              LUDO1260
                    AMAX   0.ODO                                                            LUDO127O
                                                                                            LUDO 1280
                    DO 50 J=IPIVOT,N                                                        LUDO129O
                         IF (IHTTC(ICOL(J)) .NE. 0) GO TO 50                                LUDO1300
                         TEMP = DABS(A(IROW(ICMAX(J)),ICOL(J)))                             LUDO131O
                         IF (TEMP .LE. AMAX) GO TO 50                                       LUDO132O
                         AMAX = TEMP                                                        LUDO133O
                         MAXCOL = J                                                         LUD0134O
     50             CONTINUE                                                                LUDO13SO
C                                                                                           LUDO136O
                    IF (MAxC0L .EQ. 0) GO TO 99                                             LUDO137O
                    IF (MAXCOL .EQ. IPIVOT) GO TO 60                                        LUDO138O
C                   ::::::::::COLUMNEXCHANGE::::::::::                                      LUDO139O
                    ITEMP = ICOL(IPIVOT)                                                    LUD0100
                    ICOL(IPIVOT) = ICOL(MAXCOL)                                             LUD011O
                    ICOL(UAXCOL) = ITEMP                                                    LUDOV42O
    60              CONTINUE                                                                LUD013O
                    IF (ICMAX(MAXCOL) .EQ. IPIVOT) GO TO 70                                 LUDO10
C                   ::::::::::HOWEXCHANGE::.:::::::                                         LUDO1!450
                    ITEM?    IROW(IPIVOT)                                                   LUDO1.!460
                    IROW(IPIVOT) = IRow(ICMAxUIAxC0L))                                      LUD0170
                    IROW(ICMAx(MAXCOL))    ITEMP                                            LUDO1480
    70              CONTINUE                                                                LUD01L90
C                   ::::::::::PIVOTING ACCOMPLISI-IED::::;:::::                             LUDO1500
                    IF (IPIVOT .EQ. Ii) GO TO 110                                           LUDO151O
                    ITE?IP   IPIVOT + I                                                     LUDO1S2O
C                                                                                           LUDO1S3O
                    DO 90 I=ITEMP,M                                                         LUDO15LO
                         RATIO = A(IROW(I),ICOL(IPIVOT)) / A(IROW(IPIVOT),ICOL(             LU301550
          1           -        - IPIVOT))                                                   LwD01560
                          A(IROW(I),ICOL(IPIVOT))         RATIO                             LUDO157O
                          IF (IPIVOT .EQ. U) GO TO 90                                       LUDO158O
c                                                                                           LUDO159O
                          Do   80 J=ITErIP,N                                                LUDO1600
                                 A(IROW(I) ,   ICOL(J))   A(IROI(I) ,   ICOL(J))_RATIO*A(   LUDO161O
          1                           IROW(IPIVOT),ICOL(J))                                 LUDO162O
    80                    CONTINUE                                                          LUDO163O
C                                                                                           LUDO164O
    90              CONTINUE                                                                LUDO165O
C                                                                                           LUDO16ÔO
    110 CONTINUE                                                                            LUDO167O
C      :::::::::.ENDOFOIJTERLQOP::;:::::::                                                  LUDO168O
       GO TO 100                                                                            LUDO169O
C      ::::::::::NO NON—ZERO PIVOT FOUND::::::::::                                          LUDO1700
    99 IERR = IPIVOT                                                                        LUDO1710
C                                                                                           LUDOl 720
    100 RETURN                                                                              LUDO173O
C             ::::::::::LASTCARDOFLUDCMP::::::::::                                          LUDO17LO
              END                                                                           LUDO175O
