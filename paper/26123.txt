                            NBER WORKING PAPER SERIES




                 USING THE SEQUENCE-SPACE JACOBIAN TO SOLVE
                 AND ESTIMATE HETEROGENEOUS-AGENT MODELS

                                       Adrien Auclert
                                      Bence Bardóczy
                                      Matthew Rognlie
                                       Ludwig Straub

                                     Working Paper 26123
                             http://www.nber.org/papers/w26123


                    NATIONAL BUREAU OF ECONOMIC RESEARCH
                              1050 Massachusetts Avenue
                                Cambridge, MA 02138
                          July 2019, Revised November 2020




For helpful comments, we thank the editor Gianluca Violante, four anonymous referees, as well
as Riccardo Bianchi-Vimercati, Luigi Bocola, Michael Cai, Jesus Fernández-Villaverde, Joao
Guerreiro, Kurt Mitman, Ben Moll, Laura Murphy, Martin Souchier, and Christian Wolf. Martin
Souchier also provided outstanding research assistance. This research is supported by the
National Science Foundation grant SES-1851717. The views expressed herein are those of the
authors and do not necessarily reflect the views of the National Bureau of Economic Research.

NBER working papers are circulated for discussion and comment purposes. They have not been
peer-reviewed or been subject to the review by the NBER Board of Directors that accompanies
official NBER publications.

© 2019 by Adrien Auclert, Bence Bardóczy, Matthew Rognlie, and Ludwig Straub. All rights
reserved. Short sections of text, not to exceed two paragraphs, may be quoted without explicit
permission provided that full credit, including © notice, is given to the source.
Using the Sequence-Space Jacobian to Solve and Estimate Heterogeneous-Agent Models
Adrien Auclert, Bence Bardóczy, Matthew Rognlie, and Ludwig Straub
NBER Working Paper No. 26123
July 2019, Revised November 2020
JEL No. C63,E21,E32

                                          ABSTRACT

We propose a general and highly efficient method for solving and estimating general equilibrium
heterogeneous-agent models with aggregate shocks in discrete time. Our approach relies on the
rapid computation of sequence-space Jacobians--the derivatives of perfect-foresight equilibrium
mappings between aggregate sequences around the steady state. Our main contribution is a fast
algorithm for calculating Jacobians for a large class of heterogeneous-agent problems. We
combine this algorithm with a systematic approach to composing and inverting Jacobians to solve
for general equilibrium impulse responses. We obtain a rapid procedure for likelihood-based
estimation and computation of nonlinear perfect-foresight transitions. We apply our methods to
three canonical heterogeneous-agent models: a neoclassical model, a New Keynesian model with
one asset, and a New Keynesian model with two assets.

Adrien Auclert                                   Matthew Rognlie
Department of Economics                          Department of Economics
Stanford University                              Northwestern University
579 Serra Mall                                   2211 Campus Drive
Stanford, CA 94305-6072                          Evanston, IL 60208
and NBER                                         and NBER
aauclert@stanford.edu                            matthew.rognlie@northwestern.edu

Bence Bardóczy                                   Ludwig Straub
Northwestern University                          Department of Economics
Department of Economics                          Harvard University
2211 Campus Drive                                Littauer 211
Evanston, IL 60208                               Cambridge, MA 02139
bardoczy@u.northwestern.edu                      and NBER
                                                 ludwigstraub@fas.harvard.edu




A repository for code that automates and applies methods is available at https://github.com/
shade-econ/sequence-jacobian
1     Introduction
A rapidly expanding literature in macroeconomics incorporates rich heterogeneity into dynamic
general equilibrium models. A central challenge in this literature is that equilibrium involves the
time-varying, high-dimensional distribution of agents over their state variables.
     In this paper, we propose a general, systematic, and highly efficient method to deal with this
challenge. Our method follows Reiter (2009) by perturbing the model to first order in aggregates.
But, while the Reiter method writes equilibrium as a system of linear equations in the state space,
we instead write it as a system of linear equations in the space of perfect-foresight sequences--the
sequence space. Since the size of this system is independent of the size of the state space, it becomes
feasible to solve and estimate models that feature very rich heterogeneity. Our sequence-space ap-
proach builds on Boppart, Krusell and Mitman (2018), who solve for nonlinear impulse responses
to small shocks, but we obtain a much faster solution by directly exploiting linearity.
     We demonstrate the power of our method by solving and estimating three models, with in-
creasing degrees of complexity, at unparalleled speed. A code repository accompanies this paper
and provides general-purpose routines that automate the new algorithms we introduce.1
     The central objects in our method are sequence-space Jacobians: the derivatives of equilibrium
mappings between aggregate sequences around the steady state. These Jacobians summarize ev-
ery aspect of the model that is relevant for general equilibrium. For example, consider a standard
incomplete markets model. That model features a Jacobian J C,r that maps, to first order, changes
in the sequence of real interest rates {rt } to changes in the sequence of aggregate consumption
{Ct }. Under the hood, this mapping includes the heterogeneous responses of households to
changes in r, as well as the evolution over time of the distribution of agents that follows from
this change in r. But to know the aggregate effect of r on C, all we need to know is J C,r : it is
a sufficient statistic. Our method exploits this property. We compute all relevant sequence-space
Jacobians, and then compose and invert these Jacobians to obtain the model's full set of impulse
responses.
     Our main contribution is a fast algorithm for computing Jacobians for a large class of hetero-
geneous-agent problems, truncated to a horizon of T × T . A direct approach to calculating these
Jacobians is quite costly. For instance, to calculate J C,r , this direct approach requires iterating
backward to obtain the consumption policy at every date, then iterating forward on the distri-
bution of assets to date T - 1, given a shock to rs at each of the T dates s = 0 . . . T - 1. Our
method, by contrast, exploits the structure of the linearized heterogeneous-agent problem around
the steady state, which we capture formally in proposition 1. It requires only a single backward
iteration from s = T - 1 to obtain the consumption policy and impulses to the distribution. These
objects are then efficiently combined with information from the steady-state solution to form the
full Jacobian, lowering the cost by a factor of about T relative to the direct approach. Our algo-
    1 See https://github.com/shade-econ/sequence-jacobian,      which provides routines written in Python, as well as
pedagogical notebooks. A separate replication archive uses these routines to produce all figures and tables presented
in this paper.



                                                         2
rithm therefore provides a dramatic speed improvement, since T is typically at least equal to 300
in practice, and sometimes as large as 1000.
   We combine this algorithm with a systematic approach to composing and inverting Jacobians
to solve for general equilibrium impulse responses. Equilibrium in the sequence space can always
be expressed as a solution to a certain nonlinear system

                                            H (U, Z) = 0,                                      (1)

where U represents the time path of unknown aggregate sequences (usually aggregate prices
and quantities) and Z represents the time path of exogenous shocks. Obtaining the impulse re-
                                        1
sponses of unknowns to shocks, dU = -H-
                                      U HZ d Z, requires computing the Jacobians HU and
HZ , which are formed by combining Jacobians from different parts of the model. Starting from
the heterogeneous-agent Jacobians computed using our fast algorithm, this can be achieved by
any method that systematically applies the chain rule. We propose one such method, forward ac-
cumulation along a directed acyclic graph (DAG). This procedure can be automated, and it usually
only takes a few milliseconds.
   We verify that our method is accurate by showing that it delivers exactly the same solution as
the Reiter method, for models where the Reiter method is feasible. Like all perturbation methods,
both our method and the Reiter method are subject to error in taking derivatives; to allow for
a precise comparison, we therefore use automatic differentiation to take error-free derivatives in
both methods. We then demonstrate accuracy in two ways. First, we show that in response to spe-
cific 1% shocks, impulse responses under the two methods differ everywhere by less than 10-9 %.
Second, we provide a method to recover the state-space law of motion from our sequence-space
solution, and show that matrices in this law of motion differ from the same matrices obtained
using the Reiter method by a maximum of less than 10-8 . With accuracy established, we ad-
ditionally discuss how varying the truncation horizon T, or replacing automatic with numerical
differentiation, can affect these errors.
   In sum, our method enables researchers to obtain model Jacobians and linearized general equi-
librium impulse responses, accurately and rapidly, in models with heterogeneous agents that can
potentially be very complex. To show how these objects can be used in practice, we cover two
applications that are very common in applied research: estimation on time-series data, and com-
putation of nonlinear perfect-foresight transitions.
   To build toward estimation, we first summarize the Boppart, Krusell and Mitman (2018) sim-
ulation procedure. As they point out, the linearized impulse responses to shocks truncated to a
horizon of T form an MA ( T - 1) representation of the model with aggregate shocks, which yields
a straightforward simulation procedure. These sample paths can be used to calculate approximate
time-series moments, which in principle can then be used for estimation.
   We next provide an alternative route, which is to use analytical formulas to calculate the
model's time-series moments directly from impulse responses. From here, we can directly com-
pute the likelihood function of any empirical time series. Given a prior over parameters, we can

                                                 3
                                           Table 1: Summary of computing times.

Computing times for:                        req.    Krusell-Smith     HD Krusell-Smith       one-asset HANK       two-asset HANK

Steady state (s.s.)                                          0.42 s               52.08 s                1.88 s              16.16 s
Heterogeneous-agent Jacobians (J )          s.s.             0.09 s               10.47 s                0.32 s                3.50 s
One impulse response                        J             0.0009 s               0.0009 s             0.0136 s              0.0263 s
All impulse responses (G)                   J             0.0033 s               0.0033 s             0.0506 s              0.1735 s
Simulation (100,000 periods)                G             0.0040 s               0.0050 s             0.0219 s              0.1047 s
Bayesian estimation (shocks)                G
  single likelihood evaluation                           0.00064 s              0.00068 s            0.00235 s              0.0140 s
  obtaining posterior mode                                   0.06 s                0.06 s                0.66 s              16.22 s
  RWMH (100,000 draws)                                         66 s                  66 s                 284 s               1450 s
Bayesian estimation (shocks + model)        J
  single likelihood evaluation                                  --                    --                0.056 s              0.227 s
  obtaining posterior mode                                      --                    --                   14 s                522 s
  RWMH (100,000 draws)                                          --                    --                5609 s               21282 s
Nonlinear impulse responses                 J                0.32 s               27.85 s                1.17 s              14.63 s

No. of idiosyncratic states                                  3,500               250,000                 3,500                10,500
Time horizon (T )                                              300                    300                  300                   300
No. of shock parameters in estimation                            3                      3                     6                      14
No. of model parameters in estimation                            0                      0                     3                       5

   Notes. The times given are incremental, with the "req." column denoting the prerequisite step for each computation. RWMH refers
   to Random Walk Metropolis Hastings. Our Krusell-Smith model and its "high-dimensional" (HD) version are described in Section 2
   and Appendix B.1. Our one-asset HANK model is described in Appendix B.2. Our two-asset HANK model is described in Appendix
   B.3. All calculations in this paper were performed on a laptop with a 2.6GHz Intel Core i7-10750H processor with six cores.



   then find the posterior mode and trace out the posterior distribution via Markov Chain Monte
   Carlo methods. Here, a critical benefit of our sequence-space method is that it makes it easy
   to reuse Jacobians, especially heterogeneous-agent Jacobians, across multiple computations of the
   likelihood function. This dramatically speeds up estimation, especially for the parameters of shock
   processes.
       Finally, we demonstrate how to solve equation (1) nonlinearly by using our sequence-space
   Jacobians in a quasi-Newton method. We consider two types of nonlinear transitions: large tem-
   porary shocks, and transitions to a new steady state. We show how, for the examples we consider,
   sequence-space Jacobians allow convergence to the nonlinear solution in just a few iterations.
       Throughout the paper, we apply our methods to three canonical heterogeneous-household
   models of increasing complexity: a neoclassical model in the spirit of Krusell and Smith (1998),
   a one-asset New Keynesian model in the spirit of McKay, Nakamura and Steinsson (2016), and a
   two-asset New Keynesian model in the spirit of Kaplan, Moll and Violante (2018). Table 1 illus-
   trates the speeds that our algorithms are able to achieve on a laptop computer.2 For each of our
   three models (including a high-dimensional version of the Krusell-Smith model), it takes less than
      2 All   computations were performed on a laptop with a 2.6GHz Intel Core i7-10750H processor with six cores.


                                                                 4
11 seconds to compute the heterogeneous-agent Jacobians J . Once these Jacobians are known, it
is almost immediate to calculate impulse responses. Posterior-mode estimation takes less than 9
minutes for every model, and is, for simpler models, a matter of seconds or milliseconds. A stan-
dard Random Walk Metropolis Hastings algorithm that traces out the posterior distribution of
parameters with 100,000 draws takes less than six hours for our most complex, two-asset HANK
model. By contrast, the leading computational techniques existing today find it challenging to
estimate a two-asset HANK model at all.


Related literature.       Since the early breakthroughs of Krusell and Smith (1998) and den Haan
(1997), the literature on solution methods for heterogeneous-agent models has grown tremen-
dously. Part of the literature has developed nonlinear methods, which are well-suited to ad-
dress questions that inherently involve higher-order aggregate moments, such as the aggregate
implications of risk premia or volatility shocks.3 However, when it comes to the distribution of
agents, these methods typically require either limited heterogeneity, or "approximate aggrega-
tion" (where only a few moments of the distribution matter for forecasting general equilibrium
dynamics).
    Our paper, by contrast, follows Reiter (2009) by linearizing with respect to aggregates but pre-
serving nonlinearities with respect to idiosyncratic shocks. The Reiter method can be used to solve
models that do not feature approximate aggregation, and instead capture the rich interactions be-
tween the distribution of agents and macroeconomic outcomes that are the hallmark of the recent
heterogeneous-agent literature (see, for example, Krueger, Mitman and Perri 2016 and Kaplan and
Violante 2018). Its main limitation is that it involves a linear system that grows with the dimen-
sion of the state space of the heterogeneous-agent model. For many complex models, the Schur
(or equivalent) decomposition required to solve these models becomes too costly. This has led the
literature to turn to "model reduction" methods, which involve approximating the equilibrium
distribution, and sometimes also the value function.4 How accurately these methods match the
solution without model reduction varies depending on the application.5 Our method, by contrast,
solves the unreduced model, leaving all heterogeneity intact.
    Boppart, Krusell and Mitman (2018) also propose a sequence-space method that solves the
unreduced model and avoids the need for a large state-space system. They solve nonlinearly for
impulse responses to one-time, unanticipated aggregate shocks ("MIT shocks"); when the shocks
are small, this gives approximately the model's linear impulse responses. This method, however,
requires some way to solve for nonlinear impulse responses in the first place. Boppart, Krusell
and Mitman (2018) follow the typical approach by iterating over guesses for aggregate sequences,
   3 See the survey by Algan, Allais, Den Haan and Rendahl (2014) and recent work by Brumm and Scheidegger (2017),

Mertens and Judd (2018), Proehl (2019), and Fernández-Villaverde, Hurtado and Nuño (2019), among many others.
   4 See, for instance, Reiter (2010), Ahn, Kaplan, Moll, Winberry and Wolf (2018b), Winberry (2018), and Bayer and

Luetticke (2020).
   5 For instance, Ahn et al. (2018b) show that their model reduction technique works well for a one-asset model, but

that it is more difficult to achieve a good fit for a two-asset model; they are able to reduce the size of the state-space
system for the latter to 2445-by-2445, but further reduction degrades accuracy.



                                                            5
but there is no general method for updating these guesses, nor any guarantee of convergence.6 By
exploiting linearity instead, we avoid the need for any iteration, achieving the stability and speed
required for advanced applications such as estimation.7


Layout. The rest of the paper proceeds as follows. Section 2 introduces our computational
method with an example. Section 3 provides our fast algorithm for computing the Jacobians of
heterogeneous-agent problems. Section 4 shows how to efficiently combine these Jacobians to
compute general equilibrium impulse responses. Section 5 provides our application to estima-
tion, and section 6 our application to nonlinear transitions. Section 7 concludes.


2      The sequence-space Jacobian: an example
We introduce our methods by means of an example: Krusell and Smith (1998)'s celebrated exten-
sion of the real business cycle model to heterogeneous households. This model is a natural starting
point, since it well-known and there exist many well-established methods for solving it.
      We set up the model in the sequence space, that is, assuming perfect foresight with respect
to aggregates. We then show how to use the sequence-space Jacobian to solve for the impulse
response of the model to a total factor productivity (TFP) shock in a fraction of a second.


2.1        Model description

The economy is populated by a mass 1 of heterogeneous households that maximize the time-
separable utility function E  t u (ct ) , where u has the standard constant relative risk aversion
                c 1- 
form, u (c) = 1   - . There exist ne idiosyncratic states, and in any period t, agents transition be-
tween any two such states e and e with exogenous probability P (e, e ). We denote by  the sta-
tionary distribution of P and assume that the mass of agents in each state e is always equal to
 (e).8 Agents supply an exogenous number of hours l , and earn wage income wt el , where wt is
the wage per efficient hour. Agents can only trade in capital k, which pays a rental rate rt net of de-
preciation, and are subject to a no-borrowing constraint. The value function of an agent entering
    6 Insection 6, we propose such a method for updating guesses using sequence-space Jacobians. It would be redun-
dant, however, to use this method to obtain linear impulse responses, since we can solve directly for these responses
from the Jacobians.
   7 We share with all aggregate linearization methods the drawback that the model does not generate risk premia,

portfolio choice is indeterminate, and optimal Ramsey policy is ill-defined. For these applications, higher-order pertur-
bations or global solution methods are more appropriate (see for example Fernández-Villaverde, Rubio-Ramírez and
Schorfheide 2016.)
   8 In the original Krusell and Smith (1998) model, the transition probabilities depend on the aggregate state, that is, P

takes the form P (e, e , Zt ). Our methods can be applied to this case as well (see the general formulation in appendix A).




                                                            6
the period in income state e and with capital k - at time t is therefore

                            Vt (e, k - ) = maxc,k u (c) +   Vt+1 e , k P e, e
                                                                         e
                                                s.t.       c + k = (1 + rt ) k - + wt el                                  (2)
                                                           k0

Denote by c                   
           t ( e, k - ) and k t ( e, k - ) the policy functions that solve the Bellman equation (2). Also
denote by Dt (e, K- )  Pr (et = e, k t-1  K- ) the measure of households in state e that own capital
in a set K- at the start of date t. The distribution Dt has law of motion

                                   Dt + 1 e , K =       Dt      e, k-
                                                                    t
                                                                      1
                                                                        ( e, K ) P e, e                                   (3)
                                                       e

         1
where k-
       t   (e, ·) denotes the inverse of kt ( e, · ). We assume that prior to t = 0, the economy is in a
steady state with constant wage wss and net rental rate rss , corresponding to a steady state of the
general equilibrium economy discussed momentarily. In this steady state, there is a unique value
function and decision rule solving (2), and a unique stationary distribution Dss solving (3). We
suppose that agents start in this stationary distribution at date 0, so that D0 = Dss .
    Equation (2) shows that, for any t, the policy kt ( e, k - ) is a function of the future path {rs , ws }st .
Given D0 = Dss , through (3), the distribution Dt (e, K ) at any t is a function of the entire path
{rs , ws }s0 .9 It follows that aggregate household capital holdings are characterized by a capital
function Kt {rs , ws }s0 , where

                                   K t ( {r s , ws } ) =            kt ( e, k - ) Dt ( e, dk - )                          (4)
                                                           e   k-


The ability to reduce interactions between heterogeneous agents to functions such as Kt , which
map aggregate sequences into aggregate sequences, is key to the sequence-space Jacobian method.
We now combine this Kt function with equations describing production and market-clearing con-
ditions to describe the entire Krusell-Smith economy. Production is carried out by a competitive
                                                                   L1- , rents capital and la-
representative firm, which has a Cobb-Douglas technology Yt = Zt Kt -1 t
bor from workers at rates rt +  and wt , and faces the sequence of total factor productivity Zt . The
firm's first-order conditions
                                                                              -1
                                                                K t -1
                                             rt =  Zt                              -                                      (5)
                                                                 Lt
                                                                                      
                                                                             K t -1
                                            wt = (1 - ) Zt                                                                (6)
                                                                              Lt
   9 This       can be shown recursively: given D0 = Dss , D1 is a function of {rs , ws }s0 , and therefore so is D2 , through
its dependence on D1 . In section 3, we elicit explicitly the first-order dependence of Dt , k     t , and Kt on the sequence
{ r s , w s } s 0 .




                                                               7
relate the paths of prices {rt , wt } to the exogenous paths { Zt , Lt =   (e) el } and the endogenous
path for capital {Kt }. Combining (4)­(6), we can express the capital market clearing condition at
each point in time as a function H ,

                                                         -1                                        
                                         K s -1                                    K s -1
          Ht (K, Z)  Kt          Zs                           - , (1 - ) Zs                                - Kt = 0                (7)
                                          (e) el
                                                                                    (e) el
                                                                                   

where K = (K0 , K1 , . . .) . Given initial capital K-1 and the exogenous path for productivity, Z =
( Z0 , Z1 , . . .) , equation (7) pins down the equilibrium path of capital.

2.2     Impulse responses

Applying the implicit function theorem to (7), the linear impulse response of capital to a transitory
technology shock dZ = (dZ0 , dZ1 , . . .) is given by

                                                            1
                                                   dK = -H-
                                                          K HZ dZ                                                                  (8)

where HK and HZ denote the Jacobians of H with respect to K and Z, evaluated at the steady
state. Given dK, the impulse responses of other variables, e.g. {Ys , Ls , rs , ws }, follow immediately.
In practice, (8) is solved up to a given (large) horizon T such that K and Z have approximately
returned to steady state by time T .
      We use the chain rule to relate the Jacobians HK and HZ to the derivatives of the K function
defined in equation (4), evaluated at the steady state. For example, differentiating equation (7)
with respect to Ks , we find that the t, s entry of HK is

                                                 K t  r s +1    K t  w s +1
                                [ H K ] t,s =                +              - 1{ s = t }                                           (9)
                                                 r s +1  K s    w s +1  K s

                                                                                          r s +1  w s +1  r s +1          w s +1
A similar expression applies to HZ . In addition, the derivatives                        Ks , Ks ,  Zs             and     Zs      at
(Kss , Zss ) can all be computed analytically: for example,
                                                                          -2
                                       r s +1                      Kss              1
                                              =  ( - 1) Zss                    ·
                                       Ks                          Lss             Lss

                    1
Hence, to obtain H-
                  K HZ in (8), all we need are the Jacobians of the K function with respect to
its two inputs r and w. The key remaining challenge is to compute these Jacobians. In the next
section, we introduce a fast algorithm for doing so. As table 1 reveals, for a standard calibration of
the Krusell-Smith model detailed in appendix B.1, this algorithm takes 90 milliseconds to calculate
Jacobians of K, truncated to a horizon of 300 × 300.10 In a "high-dimensional" calibration that
increases the dimensionality of the state space from 3,500 to 250,000, it still takes less than 11
  10 This is long enough to accurately compute the solution given the shocks considered in Figure 1. We discuss how to

choose an appropriate truncation horizon in section 4.4.



                                                              8
                                    Figure 1: Impulse responses of capital to 1% TFP shocks in the Krusell-Smith model

                                 (a) AR(1) shock with persistence                                                      (b) News shock at time s

                       2.5                                            =0.3                                                                              s=5
                                                                      =0.5                                   0.6                                        s=10
                       2.0                                            =0.7                                                                              s=15
 % deviation from ss




                                                                                      % deviation from ss
                                                                      =0.8                                   0.4                                        s=20
                       1.5                                            =0.9                                                                              s=25
                                                                                                             0.2
                       1.0
                                                                                                             0.0
                       0.5
                                                                                                            -0.2
                       0.0
                             0        10      20            30   40          50                                    0    10      20            30   40          50
                                                   Time t                                                                            Time t




seconds.
                       Given these Jacobians, the underlying heterogeneity no longer matters: the Jacobians tell us
everything that we need to know, to first order, about the aggregate behavior of the model's het-
erogeneous agents. This feature of our method is apparent in table 1, where we see that most other
computing times are identical between our two calibrations of the Krusell-Smith model, despite
the large disparity in the size of their underlying state spaces.


Impulse responses and news-shock interpretation.                                             Once we have the Jacobians of K, we can
                                                         1
immediately calculate                                -H-
                                                       K HZ .     Given (8), applying this matrix to any path for dZ delivers the
impulse response dK of capital with a single matrix-vector multiplication. Panel (a) of figure 1
does this for a variety of dZ, representing 1% AR(1) shocks to TFP with different persistences  in
our high-dimensional Krusell-Smith model. Note that the same matrix is applied to all these dZ
vectors: once we have computed an impulse response, it is almost costless to compute others.
                       It is, in particular, immediate to obtain the effect of the "news" at date 0 that TFP will be higher
by 1% at time s, as in panel (b) of figure 1. By definition, the impulse responses to s-period ahead
                                                   1
news are equal to the sth column of the matrix -H-
                                                 K HZ . This "news shock" interpretation of the
columns provides a useful way of understanding their role in the computation of generic impulse
responses. For example, the impulse responses to AR(1) TFP paths of persistence  in panel (a)
can be reinterpreted as the effect of the simultaneous news, at date 0, of an increase of s in TFP at
times s = 0, 1, . . .


3                       Computing Jacobians for heterogeneous-agent problems
In the previous section we established the usefulness of knowing the Jacobians K /r and K /w
for computing the impulse responses of the Krusell-Smith model. In this section, we generalize the
K function, to encompass the mapping from inputs to outputs in a broad class of heterogeneous-

                                                                                  9
agent problems. In this general case, inputs are the aggregates relevant to the decision-making of
individual agents, such as interest rates or wages, while outputs can describe aggregate savings,
consumption, investment, or other decisions by heterogeneous households or firms. We introduce
a fast algorithm, which we call the fake news algorithm, for computing the Jacobian of any output
with respect to any input.


3.1     General model representation

We begin by introducing a generic representation of a heterogeneous-agent problem as a mapping
between a time path of aggregate inputs Xt and a time path of aggregate outputs Yt . Assume that
there are n x inputs and ny outputs, and that the distribution is discretized on n g grid points. Let
Dt be the n g × 1 vector representing the distribution of agents at time t, and suppose that the ag-
gregate outputs of interest are the averages of individual "outcomes" against the distribution, that
is, Yt = yt Dt , with yt denoting the n g × ny matrix of individual outcomes (an outcome can be an
agent's policy, e.g. consumption, or any other variable of interest defined at the individual level).11
We assume that there exists three functions v,  and y such that, for a given initial distribution
D0 , Yt is the solution to the system of equations:

                                                v t = v ( v t +1 , X t )                                             (10)
                                             D t +1 =  ( v t +1 , X t ) D t                                          (11)
                                                Y t = y ( v t +1 , X t ) D t                                         (12)

Here, Xt is the n x × 1 vector of aggregate inputs. Equation (10) expresses how the vector repre-
senting the value function, vt , relates to Xt and to its own value in the next period. Equation (11)
updates the distribution, with (vt+1 , Xt ) an n g × n g transition matrix representing the discretized
law of motion for this distribution. Finally, equation (12) defines the ny × 1 vector of aggregate
outputs Yt , with the n g × ny matrix of individual outcomes yt defined by y(vt+1 , Xt ). Later, we
will argue that many heterogeneous-agent models indeed take this form.
   For given Xss , the steady state of the model is the fixed point (Yss , vss , Dss ) of (10)­(12) that
obtains when Xt = Xss at all times. For convenience, we write ss  (vss , Xss ) and yss 
y(vss , Xss ). We consider transitions of length T that end at this steady state, so that the terminal
values are X T -1 = Xss , and v T = vss . The initial distribution D0 is given, and our main result
assumes that it is also equal to Dss . Hence, this setting allows us to study transitory shocks around
a steady state.12
      Given this setup, (10)­(12) define a mapping from the T × n x stacked vector of inputs X, to the
  11 As we show in appendix A, it is straightforward to extend our method to include higher order moments, such as
the variance of consumption, among the outputs of interest.
  12 Section 6 discusses how to solve for nonlinear transition dynamics with arbitrary initial distributions D , including
                                                                                                              0
the effects of permanent shocks that change the steady state.




                                                           10
T × ny stacked vector of outputs Y, which we write

                                               Y = h (X)                                            (13)

We assume that the functions v,  and y are differentiable around (vss , Xss ), so that the function
h is also differentiable around Xss . Our goal is to characterize the Jacobian J of h evaluated at
X = Xss . J represents the aggregate response of heterogeneous agents to perturbations to their
environment at different dates. This Jacobian can be of interest in its own right. But, critically, it is
the key object required to compute the general equilibrium solution.


Example: Krusell and Smith.       In the model of section 2, the inputs are Xt = (rt , wt ), and one
natural choice for outputs is Yt = (Kt , Ct ). The model can be solved with value function iteration.
In this case, vt is the value function Vt in equation (2) at each point on the grid for states (e, k - ),
and Dt is the fraction of agents at time t at each point on this grid. Given vt+1 and Xt , the solution
to (2) involves a maximized value function vt --equation (10)--and a policy function kt . We use
the Young (2010) lottery method to convert this policy into a transition matrix on the grid, and
compose this with the process for e to obtain the full transition matrix t from current states
(e, k - ) to next-period states (e , k)--equation (11). Finally, aggregate capital and consumption
are obtained by taking the dot product of the policies kt and ct with the distribution Dt : this is
equation (12), with yt  (kt , ct ).
     An alternative approach, which is typically faster and more accurate in practice, is to use the
                                                                                                   Vt
Euler equation, as in Carroll (2006). In this approach, vt is the derivative of the value function  k-
at each point on the grid for (e, k - ). The Euler equation maps vt+1 and Xt to optimal capital and
consumption policies kt and ct , and the envelope theorem implies vt = (1 + rt ) u (ct ). Combining
these, we obtain equation (10). Again, combining kt with the exogenous law of motion for the
state e delivers  in equation (11), and yt  (kt , ct ) aggregates individual policies into Kt and Ct
in equation (12).
     Beyond this example, many other heterogeneous-agent problems can also be cast into the
framework of equations (10)­(12). The scope and limitations of our framework will become clearer
after we have presented our algorithm, so we postpone this discussion to the end of the next sec-
tion.


3.2   Fake news algorithm

In this section, we provide a fast algorithm for computing J , which we call the "fake news"
algorithm. We start with two preliminaries: notational conventions, and a direct method for com-
puting J that will serve as a benchmark for our algorithm.


Notation.     To present our algorithm in an intuitive manner, we start by assuming that there is
only one input and one output, n x = ny = 1, and later generalize to any n x and ny . Define the


                                                   11
T × 1 vector es to have 0's everywhere except at the sth entry, where it has a 1. For a given dx,
we say there is a "shock at time s" when the T × 1 input vector is given by Xs  Xss + es dx. Let
vs    s        s                                                   s            s      s      s
 t , Dt , and Yt denote the solution to equations (10)­(12) given X . Also, let t   ( vt+1 , Xt )
denote the transition matrix between states at time t, and ys       s      s
                                                            t  y ( vt+1 , Xt ) denote the outcome
function at time t, in response to the shock at time s. Finally, denote with a d the difference of all
objects relative their steady state level, so that dYts  Yts - Yss , dys   s           s  s
                                                                       t  yt - yss , d t  t - ss , and
                                                                                  dYs
dDs   s              th
  t  Dt - Dss . The s column of the Jacobian J is then the limit of               dx    as dx  0.


Direct method.        A direct method for computing the sth column of the Jacobian using one-sided
numerical differentiation is as follows. First, starting with a small shock dx at time s, iterate (10)
backward, starting with v T = vss , and compute the value function vs                         s
                                                                    t , the transition matrix t , and
individual policies ys
                     t , for t = T - 1, . . . , 0. Second, iterate (11) forward, starting with D0 = Dss , to
solve recursively for the distributions Ds
                                         t for t = 1, . . . , T - 1, by applying the transition matrices
s                                                               s   s
  t . Next, for each t, take the distribution-weighted sum ( yt ) Dt of individual policies to obtain
Yts in (12). Finally, form Jt,s = dYts /dx = (Yts - Yss )/dx. To obtain the entire Jacobian J , repeat
this process T times, once for each s. This is costly in practical applications, since T is typically at
least equal to 300.


Structure of Jacobian J .     We now turn to our algorithm, which relies on several results about
the structure of the Jacobian J . The key is to recognize that the columns of J are closely related.
Using our s superscript notation, equation (12) defines the output at time t in response to the shock
at time s as
                                                 Yts = (ys    s
                                                         t ) Dt                                        (14)

and (11) defines the distribution at time t + 1 given the shock at time s as

                                                Ds         s     s
                                                 t +1 = (  t ) D t                                     (15)

   We first show how to efficiently obtain the policy functions ys                         s
                                                                 t and transition matrices t . This
makes use of the following implication of dynamic programming.

Lemma 1. For any s  1, t  1, we have:
                                                                        
                          yss                  s<t                      ss                   s<t
                 ys
                  t =                                   and       s
                                                                  t =                                  (16)
                           y T -1              st                         T -1               st
                             T -1- ( s - t )                               T -1- ( s - t )


   Lemma 1 follows immediately from the recursive structure of equation (10) and the definition
of ys     s
    t and t . The intuition is that agents only care about the distance to the shock s - t, rather than
calendar time t and s separately, when deciding on their own behavior. For instance, the response
of their consumption policy at time t to any shock at time t + 1 is the same as the response of their
consumption policy at time 0 to the same shock at time 1.


                                                       12
     By implication, we can compute all policies ys
                                                  t from a single perturbation of the input at date
s = T - 1. The same argument applies to the transition matrices s
                                                                t . Lemma 1 therefore suggests
an immediate improvement to the direct algorithm for computing the Jacobian: replace the T
backward iterations by a single backward iteration starting from a shock at date T - 1. This is
enough to deliver all policy functions ys     s
                                        t and t for all shock dates s and all t. Observe that this
result is true nonlinearly, i.e. irrespective of the size of dx.
     Our next result speeds up the algorithm even further, for the case in which the transition begins
and ends at the same steady state (D0 = Dss ) and the shock dx is infinitesimal. The result concerns
aggregate outcomes Yts . For any s  1, t  1, we define

                                                               -1
                                         Ft,s · dx  dYts - dYts- 1                                (17)

as the difference between the aggregate response of the output at t to a shock at date s, and its
                                                                                      s -1
response at t - 1 to a shock at date s - 1. Since equation (16) implies that dys
                                                                               t = d yt-1 for all
s, t  1, one might conjecture that Ft,s is identically zero. But this conjecture is not quite right,
since the distribution in equation (14) is also changing over time. The next lemma characterizes
F t,s .

Lemma 2. Assume that D0 = Dss . For infinitesimal dx, and any s  1, t  1, we have:

                                                            t -1      s
                                       Ft,s · dx = yss ss          d D1                           (18)

Proof. First, since D0 = Dss , in the absence of any shock (dx = 0) we have Yt = Yss , ys
                                                                                        t = yss and
Ds
 t = Dss for all t. Since y and  are differentiable, in the limit as dx  0, equation (14) implies


                                       dYts = yss dDs        s
                                                    t + ( d yt ) Dss                              (19)

                         -1                                                          s -1
Subtracting dYts and dYts-                                                    s
                           1 and using the fact that equation (16) implies d yt = d yt-1 , we obtain

                                                               s -1
                                     Ft,s · dx = yss dDs
                                                       t - d D t -1                               (20)

Next, in the limit as dx  0, equation (15) implies both

                                    dDs         s         s
                                      t = ss d Dt-1 + ( d t-1 ) Dss                               (21)

and
                                    s -1         s -1    s -1
                                  dDt -1 = ss d Dt-2 + d t-2              Dss
                                                                   s -1
Subtracting and using the fact that equation (16) implies ds
                                                           t-1 = d t-2 , we therefore finally have




                                                    13
simply

                                           s -1                 s -1
                                  dDs                  s
                                    t - d Dt-1 = ss d Dt-1 - d Dt-2
                                                                    2                s -1
                                                      =     ss          dDs
                                                                          t -2 - d D t -3
                                                       .
                                                       .
                                                       .
                                                                    t -1      s
                                                      =     ss             d D1                                           (22)

                                                                     s -1
where the last line follows because, given that D0 = Dss , we have dD0    = 0 for all s  1.

    The intuition for equation (18) is as follows. Suppose that we know the path of the aggregate
output Yt at all dates t = 0 . . . T - 1 in response to a shock at date s - 1. How does this compare
to the path of Yt in response to a shock at date s, from date t = 1 onwards? From lemma 1, the
behavior of agents at all dates is identical in both cases. Therefore, the only difference is that the
                                            s rather than D . To first order, this difference in initial
initial distribution in the second case is D1              ss
distribution affects aggregates at all dates as if agents followed their steady state behavior, which
is what equation (18) expresses.
    For a given s, Ft,s can be interpreted as the impulse response to a "date-s fake news shock":
a shock to date s announced at date 0, and retracted at date 1.13 At date 0, agents react to the
                                               s . After the announcement is retracted, they
announcement, which leads to the distribution D1
                                                                                                             t -1      s . This
revert to steady-state policies, so the effect on output at all dates t  1 is yss · (ss )                           d D1
expression can usefully be rewritten with the help of the following definition.

Definition 1. The expectation vector for outcome Y at time t is defined by

                                                      Et  (ss )t yss                                                      (23)

For each grid point, the time path of Et represents the expected time path of outcome Y , in the
steady state, for an agent starting at that grid point.14 Equation (18) then reads Ft,s · dx = Et-1 dD1
                                                                                                      s.


    We can now use lemmas 1 and 2 to arrive at the following proposition.

Proposition 1. Assume that D0 = Dss . For infinitesimal dx, define the (t, s)-th element of the fake news
matrix F as                                                
                                                           dY s               t=0
                                                                0
                                            Ft,s · dx                                                                     (24)
                                                                        s     t1
                                                               t -1 d D 1
                                                           E

  13 This information structure is the same as that used by Christiano, Ilut, Motto and Rostagno (2010) to generate
a boom-bust episode in response a shock to productivity that later turns out not to happen. In our case, the "fake
news" shock for date s is unlearned at date 1. It is also related, though not formally equivalent, to the "noise shocks"
considered in the belief-driven business cycle literature literature (e.g. Lorenzoni 2009.)
  14 In the literature on control theory, the matrix with rows E , E , . . . is sometimes called the observability matrix. This
                                                                 0 1
concept is also used by Reiter (2010) and Ahn et al. (2018b).




                                                              14
where dY0s = d ys D and d Ds = d s D . Then, the Jacobian J of h satisfies the recursion J
             ( 0 ) ss             1    ( 0 ) ss                                             t,s =
Jt-1,s-1 + Ft,s for t, s  1, with Jt,s = Ft,s for t = 0 or s = 0, and is therefore given by

                                                         min{s,t}
                                               J t,s =              F t - k ,s - k                                   (25)
                                                           k =0

Proof. When t, s  1, the recursion immediately follows from lemma 1. When t = 0, Jt,s · dx =
              s by definition.
Ft,s · dx = dY0
    Finally, when s = 0 and t  1, lemma 1 implies that dy0    t = 0, and by equation (19), we have
Jt,0 · dx = dYt = yss dDt . Since dt = 0 for all t  1, using (21) we can write Jt,0 · dx = yss dD0
              0          0            0
                                                                                                 t =
           0                    t - 1  0         0
yss ss dDt-1 = · · · = yss (ss ) dD1 = Et-1 dD1 , which is Ft,0 · dx in (24).

    Proposition 1 characterizes the first-order aggregate response of heterogeneous agents to changes
                                                            s (the aggregate initial response to shocks
in their environment at any date s, as a function of only dY0
              s (the response of the distribution at date 1 to shocks at date s), and the expectation
at date s), dD1
vectors Et which can be obtained from the stationary solution. The intuition goes back to lemmas
1 and 2: since policy functions only depend on the distance to the shock, and since the steady
state expectation vectors Et give information about the behavior of aggregates after shocks to the
initial distribution, it is possible to project the effect at any date t from knowledge of the effects of
future shocks on aggregates and distributions at date 0. The expectation vectors, in turn, are easy
to compute thanks to the following observation.

Lemma 3. The expectation vectors defined in (23) solve the recursion Et = ss Et-1 , with E0 = yss .


Algorithm for a single input and output.                  Proposition 1 and lemma 3 inspire our fast "fake
news" algorithm. When implemented with one-sided numerical differentiation, given a small
dx > 0, the algorithm consists of four steps:
                 s and s for each s using a single backward iteration from time T - 1. Combining
   1. Calculate y0     0
       these with the initial steady state distribution, form two key objects: the T scalars Ys defined
       by Ys dx  dY0  s = d ys D , representing the effect on the output at date 0 from the shock
                           ( 0 ) ss
                                                                  s = d s D , giving the change
       to the input at date s; and the T n g × 1-vectors Ds dx  dD1  ( 0 ) ss
       in the distribution at date 1 from the shock at date s.15

   2. Calculate the T - 1 n g × 1 expectation vectors Et  (ss )t yss , using the recursion from
      lemma 3.

   3. Combine results from the previous two steps to form the fake news matrix F from propo-
       sition 1. The first row (t = 0) of this matrix contains the Y ' s from step 1, and other rows
  15 In practice, it is usually more accurate to compute the differences d ys and d s by subtracting "ghost runs" rather
                                                                             0        0
than steady states. That is, compute y0    s as described for some small dx > 0. Repeat the same procedure with dx = 0 to

get y
    ~0s . Set d ys = ys - y s . This procedure is more accurate than subtracting steady state values whenever those have
                           ~0
                 0     0
not fully converged, i.e. whenever y     s = y . Do the same for d s . See appendix C.1 for more details on this and other
                                        ~0      ss                   0
ways to manage numerical error.


                                                            15
         (t  1) contain the product Et-1 Ds from steps 1 and 2:
                                                                                           
                                      Y0         Y1          Y2       ···     Y T -1
                                     E0 D0      E0 D1       E0 D2            E 0 D T -1
                                                                                           
                                                                                           
                                                                                           
                            F =      E1 D0      E1 D1       E1 D2            E 1 D T -1            (26)
                                                                                           
                                                                                           
                                        .
                                        .          .
                                                   .           .
                                                               .                  .
                                                                                  .
                                                                                           
                               
                                        .          .           .                  .        
                                                                                           
                                    E T -2 D 0 E T -2 D 1 E T -2 D 2 · · · E T -2 D T -1

   4. Using proposition 1, build up the Jacobian Jt,s = Jt-1,s-1 + Ft,s recursively from its first
         row and first column. By equation (25), the element (t, s) of the Jacobian J is the sum of the
         (t, s) element of the F matrix and of all the elements on the diagonal to its immediate upper
         left in (26). For instance, we have J2,2 = E1 D2 + E0 D1 + Y0 .

At this stage it is clear why this algorithm achieves significantly higher speed than the direct
method for computing the Jacobian: it requires only the computation of the primitive objects Yt
and Dt , which can be obtained with one backward iteration starting from a shock at T - 1, and of
Et , which can be obtained by recursive application of the steady-state transition matrix, starting
with the vector yss of steady-state outcomes.


Example: Krusell and Smith.          Panel (a) of figure 2 displays several columns of the Jacobian
J K ,r   for the Krusell-Smith model of section 2. By the news shock interpretation, these columns
represent the time path of aggregate capital accumulation {Kt } when households learn at date 0
about an increase in the rental rate rs at various dates s.
    When the shock takes place at date 0, households are surprised by a higher return on existing
assets. They save some of this additional return (a standard wealth effect), accumulating assets
that they later progressively decumulate. When the shock takes place at later dates s > 0, house-
holds also have an intertemporal substitution response, which leads them to save in anticipation
of the increase in r. This generates a "tent" pattern in the Jacobian J .
    Proposition 1 shows that the columns of J reflect the accumulation of terms from the fake
news matrix F . The columns of that matrix are depicted in panels (b) and (c). The first column
of J is the same as that of F . By contrast, the other columns of J are a combination of a shifted-
down version of the first column of F and of its other columns F·s for s > 0. By the "fake news"
interpretation, these columns represent the behavior of aggregate assets when households first
save at date 0 in anticipation of an increase in r at date s, and then dissave after the announcement
is retracted at date 1.
    One striking feature of the columns of the Jacobian J is that they converge to a regular pattern
around the main diagonal: the s = 50 impulse response around t = 50 is almost the same as the
s = 75 and s = 100 impulse responses around t = 75 and t = 100. In other words, if the shock
is anticipated far enough in advance, all impulse responses are just shifted versions of each other.
This reflects the fact that Ft,s goes to zero both for high t (the effect of date-0 behavior through the


                                                      16
               Figure 2: Jacobian J K,r and fake news matrix F K,r in the Krusell-Smith model.

   (a) Columns of the Jacobian J K,r                     (b) First column of F K,r                       (c) Later column of F K,r

  12                                             3                                             0.2
                                   s=0                                             s=0                                              s=25
   8                               s=25                                                                                             s=50
                                                 2
                                   s=50                                                        0.1                                  s=75
   4                               s=75          1                                                                                  s=100
                                   s=100
   0                                             0                                             0.0
       0      100            200           300       0        100            200         300         0         100            200           300
                    Time t                                          Time t                                           Time t



distribution dies away) and for high s (the effect of far-out shocks on date-0 behavior dies away),
so that Jt,s  Jt-1,s-1 for high t and s.16


Generalization to many inputs and outputs.                            In the general case in which the h function has
multiple inputs i and outputs o, the algorithm above is straightforward to apply separately for
each i and o. However, some further speed gain can be achieved by observing that certain objects
can be reused several times. Specifically, the Ds depend only on the input shock dX i , so they only
                                                          i . Moreover, the E defined in step 2
need to be computed once per input and can be written as Ds                  t
depend only on the output of interest dY o , so they only need to be computed once per output and
can be written as Eto . By contrast, the Ys defined in step 1 depend on both the input shock dX i and
the output of interest dY o . They are computed by doing a backward iteration in response to each
input shock i, and then taking the aggregate response of each o for each s. This delivers a Yso,i for
each o and i. The F o,i matrix can then be computed as in equation (26), but with Y o,i in the first
row, and the products (Eto ) Ds
                              i in the other rows t, s.



Implementation and accuracy. The result in Proposition 1 shows that the direct method to com-
pute J described at top of this section, and the fast algorithm building up J from the F matrix,
should deliver exactly the same solution. We suggested implementing these algorithms with one-
sided numerical differentiation. While this is simple to do in practice, it also introduces small
errors from the differentiation procedure. Here, we evaluate these errors in computing the Jaco-
bian, and discuss how to mitigate them.
    We first discuss alternatives to one-sided numerical differentiation. A simple alternative is
two-sided (or symmetric) numerical differentiation. For example, to obtain the sth column J·,s via
the direct method with this procedure, compute for a given dx the response Ys+ to Xs+  Xss +
                                                                               Ys+ - Ys-
es dx, Ys- to Xs-  Xss - es dx, and then form J·,s =                              2dx .    This method is known to provide
a better approximation to the derivative, but it requires twice the computational cost. Another
route is to use automatic differentiation. This is typically more difficult to implement in practice,
  16 This "asymptotic time invariance" property is a general feature of the Jacobians of heterogeneous-agent problems.

A previous version of this paper (Auclert, Bardóczy, Rognlie and Straub 2019) provided a formal proof.


                                                                     17
                 Table 2: Direct and fake news algorithms to compute 300 × 300 Jacobians J .

                              Krusell-Smith       HD Krusell-Smith       one-asset HANK    two-asset HANK

   Direct                               21 s                   2102 s             156 s             956 s
     step 1 (backward)                  13 s                   1302 s             132 s              846 s
     step 2 (forward)                    8s                     800 s               24 s             111 s


   Fake news                         0.086 s                10.467 s             0.317 s           3.498 s
     step 1                          0.060 s                  8.654 s            0.236 s           3.159 s
     step 2                          0.011 s                  1.061 s            0.022 s           0.119 s
     step 3                          0.011 s                  0.758 s            0.045 s           0.201 s
     step 4                          0.003 s                  0.003 s            0.014 s           0.018 s

   Grid points n g                     3,500                  250,000             3,500            10,500
   Inputs n x                              2                       2                  4                 5
   Outputs ny                              2                       2                  4                 4
   Jacobians n x × ny                      4                       4                 16                20



since it requires writing all routines in a way that can be accepted by automatic differentiation
packages,17 but has the benefit of computing the exact derivatives without approximation error.
Appendix C.1 discusses all three approaches to differentiation in more detail.
   In appendix D.1, we evaluate the errors that result from various types of differentiation when
computing the Jacobian J K,r in figure 2. We use as a benchmark the Jacobian that results from the
direct method with automatic differentiation. We then compare this Jacobian to the one that results
from one or two-sided numerical differentiation, in either the direct or the fake news method.
   The conclusions from this exercise are as follows: first, under automatic differentiation, the di-
rect and the fake news method deliver exactly the same Jacobian, to near-machine precision. This
verifies Proposition 1. Second, two-sided numerical differentiation is always more accurate than
one-sided numerical differentiation, closing the gap with the automatic differentiation solution by
one to two orders of magnitude. Third, when implemented with numerical differentiation, the
fake news method is typically more accurate than the direct method. In all cases, the errors are
small, less than 0.01% of the peak response.


Efficiency.     Table 2 displays the time it takes to compute J s for the heterogeneous-agent block
of each of our three benchmark models: the Krusell-Smith model already introduced, a one-asset
HANK model with endogenous labor described in appendix B.2, and a two-asset HANK model
described in appendix B.3. We report the times from one-sided numerical differentiation, which
is the easiest and fastest to implement in practice. The speed-up from using the fake news rather
than the direct algorithm is very large in all cases: a factor of over 200 for for all models.
   What is the source of the large efficiency gain? When there are n x inputs and ny outputs, the
direct algorithm discussed at the top of this section requires n x T 2 backward "steps" and n x T 2
 17 Our   implementation uses Python's jax automatic differentiation package.


                                                         18
forward "steps". By contrast, the fake news algorithm requires n x T backward steps and ny ( T - 1)
applications of the matrix ss to construct the expectation vectors Et , reducing computational
effort in steps 1 and 2 by a factor of around T , which in our application is T = 300.18,19


Jacobians as sufficient statistics for the heterogeneous-agent problem.                       Since the Jacobians J
locally describe the mapping Y = h(X), they are all that is needed to capture the local behavior
of the heterogeneous-agent problem. This observation implies that all of the complexity intro-
duced by heterogeneity in any given model boils down entirely to the Jacobian of the resulting
heterogeneous-agent problem. This facilitates the analysis of the importance of heterogeneity for
general equilibrium, and the connection of models to the data. For example, in simple general
equilibrium models, the Jacobian of aggregate consumption with respect to income J C,y is all that
is needed for general equilibrium (Auclert, Rognlie and Straub 2018).


Scope and limitations.          In addition to the Krusell-Smith model, the two other models we con-
sider in this paper fit into the framework of equations (10)­(12), so that the fake news algorithm
applies to them directly. Our one-asset HANK model features a multidimensional choice over
both labor and asset policies. Our two-asset HANK model features two endogenous states, a
liquid and an illiquid asset, with the price of the illiquid asset varying in response to shocks.
    A number of other models can also be directly cast into the framework of equations (10)­(12).
This includes models with search and matching where the inputs X matter directly for the tran-
sition between employment states (as in Gornemann, Kuester and Nakajima 2016), and models
where higher-order moments of the distribution of agents are relevant as an output Y (such as
the variance of consumption or a CES price index). It also includes models where some non-grid-
based representation of the value function, such as Chebyshev polynomials, is used. Appendix
A.1 covers these direct applications.
    Other models require a slightly more general framework than (10)­(12). This includes models
where the distribution of agent features entry and exit (e.g. Hopenhayn 1992 and simple over-
lapping generations models), or models where a nonlinear function of the distribution, such as
the uth quantile function, is relevant. It also includes models where the distribution is represented
parametrically, as in Algan, Allais and Den Haan (2010). Appendix A.2 covers these more complex
applications, which require a modification of Proposition 1, after which the fake news algorithm
continues to apply.
  18 The computation of expectation vectors in step 2 takes far less time than the backward iteration in step 1, especially

for the more complex models, because it only requires repeatedly multiplying by ss --which can be split into multipli-
cation by a small transition matrix for the exogenous state, and multiplication by a highly sparse matrix with policies
for endogenous states, both of which we implement efficiently.
  19 There are two additional steps required for the fast algorithm, steps 3 and 4. Step 3 involves the multiplication

of T × n g and n g × T matrices, which has a cost proportional to n g T 2 for each input-output pair--but since matrix
multiplication is implemented extremely efficiently by standard numerical libraries, this is less of a bottleneck overall
than the backward iteration in step 1, especially for models like the two-asset HANK where backward iteration is
especially complex. Step 4 is even faster, since it is a simple recursion on T × T matrices.




                                                           19
      Appendix A also covers how to approach models featuring discrete choice: for example, over
the extensive margin of labor supply (e.g. Chang and Kim 2007), or over resetting a price or
investing in the presence of fixed costs (Golosov and Lucas 2007, Khan and Thomas 2008). These
fit into our original framework when taste shocks smooth out the discrete choice (appendix A.1),
and into our extended framework in other cases (appendix A.2). Since these decision problems
are often naturally posed in multiple stages, in appendix A.3 we further extend our framework to
accommodate multiple stages within each period.
      Our extended framework in appendix A allows for very general equations governing the dis-
tribution Dt and aggregate outputs Yt . An important limitation, however, is that it does not
change the structure of equation (10): in particular, the value function vt is not allowed to de-
pend on Dt . This prevents us from applying the fake news algorithm when the behavior of het-
erogeneous agents depends on the anticipated future distribution through the value function, in
a way that cannot be intermediated via aggregates Xt in general equilibrium. This includes, for
instance, OLG models with an endogenous distribution of bequests that are received in mid-life
(e.g. de Nardi 2004, Straub 2017), and money-search models where the anticipated distribution of
cash balances matters directly for agent decisions (e.g. Molico 2006).


4     Obtaining general equilibrium impulse responses
A typical general equilibrium heterogeneous-agent model consists of one or more heterogeneous-
agent problems of the type described above, as well as additional sets of equations that govern
production, market clearing, and so on. In this section, we explain how to solve for general equi-
librium impulse responses once the Jacobians of the underlying heterogeneous-agent problem(s)
are known.


4.1     General equilibrium in the sequence space

A general equilibrium model in the sequence space is always characterized by a certain system of
nonlinear equations
                                             H ( U, Z ) = 0                                        (27)

where Z denotes the path of exogenous "shocks", with Zt any nz × 1 vector at each t, and U
denotes the path of "unknown" vectors, with Ut an nu × 1 vector at each t. We assume that the
model has as many equations (or "targets") as unknowns, and that it is locally determinate, i.e. that
H is invertible near the steady state (Uss , Zss ). Then, equation (27) truncated to a horizon of T is a
nonlinear system of nu × T equations in nu × T unknowns, which delivers the general equilibrium
impulse response to any change dZ in the path of Z relative to Zss .
      We solve for the impulse responses of the model to first order around the steady state. By the
implicit function theorem applied to equation (27), the response of unknowns dU to the shock dZ




                                                  20
is given by:
                                                           1
                                                  dU = -H-
                                                         U HZ dZ                                                        (28)

where the Jacobians HU and HZ are evaluated at (Uss , Zss ). Hence, to obtain dU, we need a method
to construct HU and HZ from the Jacobians of the heterogeneous-agent problem that we obtained
in section 3.


Dealing with dimensionality: reducing nu with variable substitution.                         There are typically many
options for putting a given model into the form of equation (27). Some of these options use more
endogenous variables than others. For instance, a simple direct approach consists of including
all endogenous variables at time t in the set of unknowns Ut .20 Under this direct approach, the
Jacobians obtained from section 3 enter directly as blocks of the HU or HZ matrices. However, this
direct approach is computationally inefficient, because nu is then typically quite large in realistic
applications--typical DSGE models have dozens of endogenous variables--so that inverting the
nu T × nu T matrix HU in equation (28) becomes impractical.
    This dimensionality problem is well-recognized in the literature solving equation (27) nonlin-
early. The typical approach is to alleviate this problem by substituting some endogenous variables
for others. For example, in section 2, we used this approach to substitute rt and wt and solve only
for Kt as an unknown variable. This brought down nu from 3 to 1, reducing the size of the matrix
HU by a factor of 9. After any such variable substitution, the H function becomes a composite
of subfunctions from different parts of the model, which we must now differentiate to obtain HU
and HZ .


Obtaining HU and HZ with automatic differentiation.                       One way to differentiate H is to use an
automatic differentiation package. Directly applying such a package on the full set of equations
governing H (U, Z), including the subset of these equations that involves the heterogeneous-agent
problem, would be computationally very costly.21 This is where the computational advances of
section 3.2 are critical: one can compute the Jacobians of the heterogeneous-agent problem using
the fake news algorithm, and then supply these Jacobians to the automatic differentiation pack-
age.22 The package then delivers HU and HZ much faster.
    In the following two sections, we describe an explicit procedure to obtain HU and HZ that
does not require an automatic differentiation package. This procedure is closely related to what
  20 In the Krusell-Smith model, if aggregate labor efficiency is normalized to   (e) el = 1, this direct approach sets
Ut  (Kt , rt , wt ), and includes in Ht the asset market clearing equation, H1t  Kt ({rs , ws }) - Kt , as well as the firms'
                                              -1
first-order conditions H2t  rt +  -  Zt Kt    -1 and H3t  wt - (1 -  ) Zt Kt-1 .
                                                                             
   21 See Ahn, Moll and Schaab (2018a) for an example of such an application of automatic differentiation to the H

function. Effectively, the computer then follows an approach resembling the direct method discussed in section 3.1,
and does not take advantage of the speedups afforded by the structure of the Jacobian in Proposition 1. See also
Childers (2018) for an application of automatic differentiation to heterogeneous-agent models.
   22 Typically, automatic differentiation packages allow the user to provide custom evaluations of derivatives. A simple

alternative is to replace the heterogeneous-agent equations with their linearized counterpart in the H function. For
instance, for the Krusell-Smith model, one would write K - Kss = J K,w · (w - wss ) + J K,r · (r - rss ) using the Jacobians
obtained from section 3.


                                                             21
such packages do, since it also computes derivatives by systematically applying the chain rule,
but it has a number of computational and conceptual benefits. Computationally, it affords greater
control over how derivatives are computed and accumulated, which we use to increase efficiency
and accuracy.23 Conceptually, by being explicit about the variable substitution pattern embedded
in H, it delivers a concise representation of models that can be used to understand how individual
"blocks" of the models interact, inspect the transmission mechanism of shocks, and understand
the implications of changing blocks one at a time. We also use this representation to recover the
state-space law of motion in section 4.3.


4.2    Equilibrium computation as a directed acyclic graph

In this section, we introduce a formal way of representing the variable substitutions that underlie
the H function. The idea is to organize the model as a set of blocks arranged along a directed
acyclic graph, or DAG. While the technical definition requires some formalism, we note at the
outset that all of the main complexities of defining and computing a model in this way can be
automated, as we have done in our online code repository.
      The general type of model whose Jacobians we can compute consists of any combination of
heterogeneous-agent problems (or heterogeneous-agent blocks), characterized by the mapping (13),
and simple blocks, which capture typical aggregate relationships in dynamic macro models. For-
mally, we define simple blocks as mappings between inputs X and outputs Y for which there exist
k, l  N and a time-invariant function h such that Yt is only a function of neighboring Xt 's, that is,

                                              Yt = h ( Xt-k , . . . , Xt+l )

For instance, a neoclassical firm sector can be represented as a simple block mapping Xt = (Kt , Zt )
to Yt = (Yt , rt , wt ). Combining such a sector with a heterogeneous-agent block mapping Xt =
(rt , wt ) to Yt = Kt ({rs , ws }), as well as a simple block mapping Xt = (Kt , Kt ) to market clearing
Yt = Kt - Kt , we obtain the Krusell-Smith model of section 2. Jacobians of simple blocks are
straightforward to compute explicitly.
      We call "sequence-space model" any combination of these blocks that maps shocks (like Zt ) and
unknowns (like Kt ) to targets (like asset market clearing) along a directed acyclic graph.

Definition 2. A sequence-space model is defined by:

   1. A set of sequence indices N = Z  U  O , where Z are exogenous shocks, U are unknowns, O
       are outputs, and H  O are targets,

   2. A set of blocks, each either simple or heterogeneous-agent blocks, indexed by B , where each
       block b  B has inputs Ib  N and outputs Ob  O , such that each output o  O belongs
  23 For example, we get efficiency gains by reusing Jacobians for blocks whose parameters do not change, as in the

reestimation in section 5.4, and we increase accuracy by avoiding the truncation error of simple blocks, as described in
appendix C.4.



                                                           22
      to exactly one block, and for each output o  Ob , block b provides a function ho ({Xi }iIb )
      mapping the block's input sequences to this output sequence,

such that a) the number of unknowns and targets are equal, that is, nu = nh , and b) the directed
graph of blocks, formed by drawing an edge from b to b whenever some output o  Ob is used as
an input o  Ib , is acyclic.

Definition 3. An equilibrium of a sequence-space model, given sequences {Xi }iZ for the exoge-
nous shocks, is a set of sequences {Xi }iU O such that: a) Xo = ho ({Xi }iIb ) for any output o  O ,
and b) Xo = 0 for any target o  H.

Definition 4. A steady state equilibrium is an equilibrium in which all sequences are constant over
time, Xit = Xiss for all i  N .

   A sequence-space model thus consists of a combination of blocks that are linked along a di-
rected graph. Each individual block covers a different aspect of the economy and computes either
equilibrium conditions themselves (i.e. outputs that are also "targets") , or variables that are use-
ful for other blocks (i.e. outputs that are also inputs). Any such variable can be viewed as having
been "substituted out" and need not be carried around as an unknown. Thus, the directed graph
represents the (possibly complex) pattern of variable substitution that the modeler uses to reduce
the number of unknowns.
   An important property we require is that the directed graph that connects blocks be acyclic,
that is, it does not feature circular dependencies across blocks. Instead, there is always an ordering
b1 , . . . , bnb of the blocks (formally, a "topological sort") such that all input variables used in later
blocks, e.g. b3 or b4 , are either output variables from earlier blocks, e.g. b1 or b2 (in which case those
variables were substituted out) or they are shocks or unknowns. Recursively, this implies that
starting with shocks and unknowns {Xi , i  Z  U } we can follow along this ordering, computing
each block's output, one-by-one, starting with block b1 (which only uses inputs that are either
shocks or unknowns), then moving to block b2 (whose inputs can also be outputs of b1 ), and so
on. When we are done, we will have calculated all outputs, including the target sequences H.
   Thus, this procedure gives us a mapping from shocks and unknowns {Xi , i  Z  U } to targets
{Xo }oH , with possibly lots of intermediate variables that are computed as outputs and used as
inputs in between. We can write this mapping in condensed form as H(U, Z), where U is defined
as the stacked vector of unknown sequences {Xi }iU , Z is defined as the stacked vector of exoge-
nous sequences {Xi }iZ , and H(U, Z) itself is the implied stacked vector of targets {Xi }iH . When
we combine these sequences with all intermediate variables Xo = ho ({Xi }iIb ) that are computed
along the DAG when evaluating H, the only equilibrium condition that is left is that targets are
equal to zero, H(U, Z) = 0.


Example: Krusell-Smith model.         Figure 3 visualizes the DAG for the Krusell-Smith model that
corresponds to the variable substitutions we made in section 2. It has three blocks (neoclassical


                                                    23
                           Figure 3: DAG representation of Krusell-Smith economy

                                                       r,w
                                              firms             HA
                                     K, Z                                K

                                exog. Z                 K                 asset mkt.
                               endog. K                                  clearing (H)



firms, heterogeneous households "HA", and a block to compute the asset market clearing con-
dition H ), one exogenous shock (productivity Z = { Z }), one unknown (capital U = {K }), four
outputs (capital return, wage, household savings, asset market clearing, so O = {r, w, K, H }),
and one target (asset market clearing H = { H }).24 The DAG is best read from left to right. The
"firms" block maps the unknown sequence of capital stocks K and the exogenous shocks Z into
the interest rate and wage sequences r, w. Those are then used to substitute out r, w in the "HA"
block, before asset market clearing H is computed.


One and two-asset HANK models. The Krusell-Smith model allows for a relatively straightfor-
ward DAG that reduces the number of unknowns to nu = 1. Figure 4 gives a DAG for a more
complex case: a one-asset HANK model similar to McKay, Nakamura and Steinsson (2016). This
model combines standard NK elements--sticky prices, flexible wages, and a Taylor rule for mone-
tary policy, but no capital--with a one-asset incomplete market HA household sector where labor
supply is endogenous. It is introduced formally in appendix B.2.
    As figure 4 shows, the DAG for this model features three unknowns (wages w, output Y , and
inflation  ), which are used to compute six intermediate outputs, ultimately yielding three tar-
gets (a Phillips curve condition H1 , labor market clearing H2 , and asset market clearing H3 ). In
other words, the DAG substitutes out six variables that would otherwise have to be included as
unknowns. We introduce four exogenous shocks (productivity Z, Taylor rule intercept r  , govern-
ment spending G, and markups µ).
    The DAG makes it easy to visualize the dependencies between macroeconomic aggregates that
are embedded in the model: for instance, the dividends from firms are distributed to households
(according to a certain rule), so the output d of the firm block is an input to the HA block. Similarly,
the real interest rate r affects the taxes required for the government to achieve its balanced-budget
target, so r is an input to the fiscal block, which has an output  that is an input to the HA block.
    Even as models grow in complexity beyond this one, they often still admit DAGs with small
numbers of unknowns and targets. In appendix B.3, we introduce our third model example, a
two-asset HANK model, and we show that still only three unknowns and targets are required to
write down its DAG. This DAG has 18 intermediate variables being computed by its blocks, thus
  24 Not visualized are firm production Y or household consumption C , which could be additional outputs of the firm
and HA blocks, respectively, but are not strictly necessary since we are using asset rather than goods market clearing
to define equilibrium.


                                                         24
                          Figure 4: DAG representation of one-asset HANK economy



                               µ, Y, w, 

                                                   firms
                                                                            r              Phillips
                                                                                          curve (H1 )
                             Z, Y, w,       w           r               d       N



                 exog. Z, r , G, µ     r  , Y,                      r                N     labor mkt.
                                                  mon pol                       HA
                  endog. Y, w,                                                           clearing (H2 )

                                                                                     A
                                           G                     
                                                    r

                                                                                           asset mkt.
                                                                                         clearing (H3 )
                                                   fiscal



corresponding to a complicated web of 18 variable substitutions. The model is similar to Kaplan,
Moll and Violante (2018), with households saving in liquid and illiquid assets subject to convex
adjustment costs of portfolio adjustment. On the supply side, it features wage as well as price
rigidities, as well as capital with quadratic adjustment costs.


4.3   Jacobians and impulse responses

We now show how to use the DAG representation of the model to automatically evaluate the Ja-
cobians HU and HZ . To do so, we systematically apply the chain rule along the model's DAG,
implementing a technique known as forward accumulation in the automatic differentiation liter-
ature (Griewank and Walther 2008). This technique combines the Jacobians of individual blocks
to build up HU and HZ . The key idea is to apply the chain rule in the same order that we would
evaluate a function itself.25


Total Jacobians J.      To start, we need a new concept. For any exogenous shock or unknown i 
Z  U and any output o, let the Jo,i denote the total Jacobian of o with respect to i when o is evaluated
along the DAG. For instance, in the one-asset HANK model in figure 4, the total Jacobian JN ,w
of household labor supply with respect to wages combines two forces: the direct effect of w on
household decisions, and the indirect effect working through the influence of w on firm profits
and therefore the dividends d received by households. This is in contrast to J N ,w , which is a
  25 In actual computations, the methods in this section will be applied on Jacobians that are truncated to some horizon

T × T . For simple blocks we use a simple sparse representation of the Jacobian, described in appendix C.4, and do not
need to truncate.


                                                            25
partial Jacobian that captures only the direct effect.
    To obtain Jo,i through forward accumulation, we first initialize Ji,i to the identity for each i 
Z  U . We then go through blocks following the ordering (topological sort) b1 , . . . , bnb one-by-one
beginning with b1 . For each block b, we evaluate the total Jacobian of all its outputs o  Ob with
respect to shocks and unknowns i  Z  U :

                                                J o ,i =         J o , m J m ,i                                    (29)
                                                           mIb


This systematically applies the chain rule: for each input m, (29) takes the product of the partial
Jacobian J o,m with the already-calculated total derivative Jm,i of m with respect to i. (When m = i,
then the latter is the identity and the term is just the partial Jacobian J o,i .) The benefit of building
up the Jo,i progressively via forward accumulation is that the chain rule is applied in an efficient
way, without redundant computations.


General equilibrium Jacobians G.              Using the J matrices, we can compute the total Jacobians of
all targets with respect to all unknowns and shocks, HU = JH,U and HZ = JH,Z . By equation (28),
                                                                                     1
these are the objects needed to solve the equilibrium response of unknowns, dU = -H-
                                                                                   U H Z d Z.
We can compute this response for any arbitrary shock vector dZ by simple multiplication with the
           1
matrix -H-
         U HZ . We refer to this matrix as general equilibrium Jacobian of unknowns to shocks, and
denote it by GU ,Z .
    It is often important to also compute the general equilibrium responses of variables that are not
unknowns. To do this, we generalize the idea of the general equilibrium Jacobian to all outputs.
We denote by Go,z the matrix that maps an arbitrary sequence of a shock z  Z into the corre-
sponding impulse response of any output o  O . We adopt the convention that Go,Z is the matrix
one arrives at by stacking Go,z for all z  Z . Given Go,Z , one computes the impulse response dXo
with a simple matrix multiplication:
                                                   d X o = G o ,Z d Z                                              (30)

To compute Go,Z for any output o, we trace the same forward accumulation steps as before, and
build Go,Z recursively, using26
                                              G o ,Z =           J o ,m G m,Z                                      (31)
                                                           mIb

Each Go,Z has nz T columns, each of which can be interpreted as the impulse response of o to some
news shock. One way to think about this approach, therefore, is that we are simultaneously calcu-
lating nz T general equilibrium impulse responses. For our Krusell-Smith, one-asset HANK, and
two-asset HANK models, nz T is 1 × 300 = 300, 3 × 300 = 900, and 3 × 300 = 900, respectively.27
   26 An alternative is to re-use total Jacobians and write Go,Z = Jo,U GU ,Z + Jo,Z . In our experience, the recursive

approach tended to be more efficient.
   27 If one only needs to compute one impulse response, it is possible to obtain this impulse response faster using an

alternative method described in appendix C.6. Interestingly, it is not too much more expensive to calculate the full set
of impulse responses in G: in our one-asset HANK example, obtaining 900 rather than one impulse response only takes


                                                            26
                                             Table 3: Computing times for G.

                                                      Krusell-Smith    one-asset HANK         two-asset HANK

       Total                                                 3.3 ms              50.6 ms               173.5 ms
         step 1 (forward accumulate HU and HZ )              0.6 ms               7.5 ms                27.0 ms
                                            1
         step 2 (compute   G U ,Z   =   -H-
                                          U HZ )             1.2 ms              25.9 ms                51.6 ms
         step 3 (forward accumulate for all Go,Z )           1.5 ms              17.2 ms                95.0 ms

       No. of unknowns                                           1                     3                      3
       No. of exogenous shocks                                   1                     3                      7



      Comparing table 3 to table 2, we see that computing Gs is, in each of our cases, significantly
cheaper than applying our fast algorithm to obtain J s for the heterogeneous-agent block: for
instance, it takes about 50 milliseconds for the one-asset HANK model, while the fake news al-
gorithm took 320 milliseconds. This shows the power of J s as sufficient statistics: once we have
them, it is just a matter of linear algebra to obtain a full characterization of equilibrium.28


Recovering the state-space law of motion.                From the linearized solution in the sequence space,
given a particular shock process expressed in state-space form, it is possible to recover the equiv-
alent state-space law of motion. The general idea is to determine the effect that a perturbation to
any state, and any innovation to the shock process, has on all states in the following period. This
can be done in three steps: one first finds (a) the effect of the perturbation on the targets dH, then
(b) the response of unknowns to targets dU, and finally (c) the response of next-period states to
unknowns. Since the distribution of agents is a state, this process requires two pieces of informa-
tion about the distribution, which are both computed by the fake news algorithm in section 3.2:
                                                                                     i for step (c).29
the expectation vectors Eto for step (a), and the distribution perturbation vectors D1
One can then use the state-space law of motion for any standard application, such as simulation
or estimation using state-space methods.


4.4     Numerical accuracy: equivalence to the Reiter method

We now establish that our implementation of the sequence-space Jacobian ("SSJ") method is accu-
rate by comparing the solution it produces to that obtained using the Reiter method.
      In principle, the two methods should give the same solution, i.e. the first-order solution of the
model in aggregates. Indeed, they are both intended to solve to first order the same system of
equations, which includes (10)-(12) and simple blocks from t = 0, . . . , . There are, however, two
potential concerns to rule out. First, both our method and Reiter--like all first-order perturbation

about 5 times as long. This is possible because we only need to calculate HU once, independent of shocks.
  28 Appendix C.7 also shows that using the direct approach to computation described in section 4.1, rather than a DAG

representation with a small number of unknowns, comes at a significant computational cost.
  29 Appendix C.8 provides additional details about this procedure for the case of the Krusell-Smith model with AR(1)

TFP shocks.



                                                           27
methods--are subject to error when computing derivatives. Second, rather than solving the true
infinite-dimensional system in sequence space, our method truncates sequence-space Jacobians at
some high T .30
     To verify accuracy, we choose as our benchmark the Reiter method with automatic differentia-
tion. Automatic differentiation, unlike numerical differentiation, ensures that there is no approx-
imation error when computing derivatives. We then show that the SSJ method--with the same
parameterization on the same grid and T = 300, and the fake news algorithm implemented using
automatic differentiation--delivers identical impulse responses to Reiter, and that its state-space
law of motion is also identical.31 We find that the SSJ method with numerical differentiation deliv-
ers larger but still relatively minor errors. We finally discuss practical considerations in choosing
T.
     As is well known, the main bottleneck of the Reiter method is that it cannot be used directly
with large idiosyncratic state spaces without model reduction (the method scales in the cube of
the size of the idiosyncratic state space). For this reason, we restrict our comparison to the Krusell-
Smith model and the one-asset HANK model, each computed on a small grid of n g = 300 points
(100 asset grid points and 3 income states). We describe our implementation of the Reiter method
in appendix C.2.


Preliminaries: benchmark representative-agent models.                       Before proceeding, we first check that
our implementation of the SSJ method is accurate for models without heterogeneity. Appendix D.2
verifies that the linear impulse responses of output to all shocks in the Smets and Wouters (2007)
model and in the Herbst and Schorfheide (2015) model--two benchmark models used extensively
for estimation in the literature--are identical to those obtained using the first-order solution from
Dynare, which uses standard state-space methods for computation.


Accuracy of impulse responses. Figure 5 compares the impulse responses from the Reiter method
with automatic differentiation, and the impulse responses produced by our SSJ method using the
three types of differentiation discussed in section 3.2. All panels compute impulse responses to a
1% TFP shock with persistence  = 0.9, and the SSJ truncation horizon is chosen at T = 300. The
top panels show the impulse response of capital in the Krusell-Smith model. The bottom panels
show the impulse response of output in the one-asset HANK model. Panels (a) and (c) plot the
impulse responses in levels using all four methods. The impulse responses look visually identi-
cal. To get a sense of the differences, panels (b) and (d) plot the absolute value of the differences
between the lines in the left panel and the Reiter solution at each t. When solved with automatic
  30 Recallfrom equations (10)­(12) that we take as given a discretized model, which we take to be the "true" model.
We compare the solution to the Reiter method applied to the same discretized model. If the "true" model is continuous
instead, getting to the discretized model in the first place involves some error, but this does not affect the comparison
here.
  31 Note that this usage of automatic differentiation in the backward iteration of the fake news algorithm, which is

discussed in section 3.2, is distinct from the usage of automatic differentiation discussed in section 4.1: the former is to
obtain error-free derivatives of v, , and y in (10)­(12), while the latter is to obtain derivatives of H .



                                                            28
                                      Figure 5: Equivalence between the SSJ and the Reiter (2009) methods.

                                                                       Krusell-Smith model

                   (a) Impulse responses of capital across methods                                 (b) Differences to Reiter (2009)


                       2.5                     Reiter                                  10-2                            SSJ with 1-sided num. diff.
                                               SSJ with 1-sided num. diff.                                             SSJ with 2-sided num. diff.
                       2.0                     SSJ with 2-sided num. diff.             10-4                            SSJ with auto. diff.
 % deviation from ss




                                               SSJ with auto. diff.
                       1.5                                                             10-6

                       1.0                                                             10-8

                       0.5
                                                                                       10-10

                       0.0
                                                                                       10-12
                             0   20      40             60       80                            0       20       40            60         80
                                              Time t                                                                 Time t


                                                                      One-asset HANK model

                   (c) Impulse responses of output across methods                                  (d) Differences to Reiter (2009)

                                                                                       10-1
                       0.6                     Reiter                                                                 SSJ with 1-sided num. diff.
                                               SSJ with 1-sided num. diff.             10-3                           SSJ with 2-sided num. diff.
                       0.5
                                               SSJ with 2-sided num. diff.                                            SSJ with auto. diff.
 % deviation from ss




                       0.4                     SSJ with auto. diff.                    10-5

                       0.3                                                             10-7

                       0.2                                                             10-9

                       0.1                                                            10-11

                       0.0
                                                                                      10-13
                             0   20      40             60       80                           0       20       40             60        80
                                              Time t                                                                 Time t




differentiation, our method yields essentially the same result as the Reiter solution with automatic
differentiation, up to ten digits of accuracy. Applying our method with numerical differentiation
predictably introduces a small error, comparable to the errors typically found when implementing
the Reiter method with numerical differentiation. Despite this error already being small, one can
reduce it significantly at just twice the computational cost by using two-sided numerical differen-
tiation. This is important because two-sided numerical differentiation is often easier to implement
than automatic differentiation in practice.


Accuracy of the state-space law of motion.                                   While comparison of individual impulse responses
is a useful proof of accuracy, a more definitive test is to verify that the state-space laws of motion
are identical. To do this, we compare the matrices describing the state-space law of motion in


                                                                               29
                                             Figure 6: Impulse response error (relative to T = 1000) as a function of the truncation horizon T

                                                     (a) TFP persistence  = 0.9                                                                              (b) TFP persistence  = 0.99
 RMSE in dY /Yss in first 100 periods (%)




                                                                                                         RMSE in dY /Yss in first 100 periods (%)
                                                                             Krusell-Smith                                                                                            Krusell-Smith
                                            10-1                                                                                                    10-1
                                                                             One-asset HANK                                                                                           One-asset HANK
                                                                             Two-asset HANK                                                                                           Two-asset HANK
                                            10-3                                                                                                    10-3


                                            10-5                                                                                                    10-5


                                            10-7                                                                                                    10-7


                                            10-9                                                                                                    10-9
                                               100      200            300         400        500                                                      100       200            300         400        500
                                                              Truncation horizon T                                                                                     Truncation horizon T




the Krusell-Smith model and the one-asset HANK model, both computed via automatic differ-
entiation so as not to introduce numerical differentiation error. We find that the sup norm of the
difference between these matrices is below 10-8 for both models.


Choice of truncation horizon T . We have established that our method, for large enough T, de-
livers the same solution as the Reiter method. In practice, however, a separate computation via
the Reiter method is usually not available as a benchmark. In these cases, how can one ensure
that T is, in fact, high enough? To answer this question, we now examine the sensitivity of the
sequence-space solution to T.
                                            We take as our benchmark the sequence space solution with a very large T (T = 1000), well
above the horizon required to achieve agreement with the Reiter method in our previous exercise.
We then see how the impulse response in the first 100 periods differs from this benchmark as we
reduce T. Throughout, we compute Jacobians with one-sided numerical differentiation, since it is
the easiest and most commonly used in practice.
                                            Figure 6 performs this exercise for our three models, each in response to a 1% shock to TFP
with persistence . In the left panel,  = 0.9. We see that even for truncation horizons T far shorter
than the T = 300 used in this paper, the RMSE of the output impulse response dY /Yss is near
zero in both the Krusell-Smith and one-asset HANK models. The two-asset HANK model, on the
other hand, only achieves five digits of accuracy by T = 300. This is because that model has much
greater internal persistence: the magnitude of the underlying output impulse response at t = 300
is above 10-4 %, while it is below 10-9 % for the two other models. (By that point, the shock itself
is below 10-13 %.)
                                            The right panel looks at a more extreme case, with  = 0.99. Here, the shock at t = 300
remains at 5% of its level on impact. Now the two-asset HANK model achieves less than 3 digits
of accuracy even with T = 300, and about 5 digits of accuracy with T = 500. This indicates the


                                                                                                    30
importance of a high T when dealing with highly persistent shocks, especially in models with
high internal persistence.32
      Overall, to be sure that the truncation horizon is long enough, it is most important to ensure
that both the shock itself and the endogenous impulse response--which may feature some internal
persistence--are near zero by T. An additional check is to make sure that changing T to a higher
value does not change the impulse response: as figure 6 indicates, when T is not yet high enough to
deliver accuracy, the results are sensitive to changes in T. These two simple checks ensure that one
has minimized truncation error, leaving numerical differentiation as the only possible remaining
source of error relative to the true first-order solution of the model in aggregates.


5      Application to estimation
We now discuss how to use the sequence-space Jacobian method to estimate models on time-series
data. This application uses the equivalence of impulse responses with the moving-average ( MA)
representation of the model with aggregate shocks. This equivalence, in turn, follows immediately
from the certainty equivalence property of first-order perturbation methods such as ours (see e.g.
Simon 1956, Theil 1957, Judd and Guu 1993, and Boppart, Krusell and Mitman 2018).
      We use the convention that variables with tildes denote observed time paths, while variables
without tildes denote impulse responses. We assume that each shock z  Z follows the moving-
average process
                                                              
                                                  ~t
                                                 dZ z
                                                      =     dZsz       z
                                                                       t-s                                           (32)
                                                           s =0
        z } are mutually iid standard normally distributed innovations. It follows from (32) that
where { t
a unit innovation to      z                                z , dZ z , . . ., starting at t.
                              has an impulse response of dZ0
                          t                                      1
                                                                             o , dX o , . . . for any
      In the previous section, we showed how to find the impulse responses dX0     1
output o  O in response to simultaneous impulses to all shocks z  Z . Now, we are con-
sidering the impulse of o driven by an innovation                     z   for a specific z, and we denote this im-
                                                                      t
           o ,z     o ,z                                                                       o ,z
pulse by dX0    , dX1    , . . .. Truncating all impulses to        horizon T , and writing {dXs    }s  dXo,z and
    z       z
{dZs }s  dZ , we can apply equation (30) to obtain

                                                   d X o ,z = G o ,z d Z z                                           (33)

                                                      ~t
Certainty equivalence then implies that each output d X o follows the moving-average process


                                                       T -1
                                               ~t
                                              dX o
                                                   =     dXso,z              z
                                                                             t-s .                                   (34)
                                                       s=0 zZ

    32 Interestingly,
                  the error in the first 100 periods in the other two models is below 10-9 % with T = 300, in spite of the
shock's persistence. Of course, there is still error near t = 300, as is inevitable when the shock has not died out by the
truncation horizon, but this error does not propagate backward in these models to nearly the same extent. This lack
of backward propagation is related to the weaker internal persistence in these models relative to the two-asset HANK
model.


                                                              31
In summary, an MA ( T - 1) representation of dX can be obtained by simple matrix multiplications
of the general equilibrium Jacobians G from section 4.3 with the shock impulse-response vectors
dZ.33 The rapid computation of this MA representation is the foundation of our applications in
this section, which will build up to likelihood-based estimation of our three models.


5.1       Simulation

As pointed out by Boppart, Krusell and Mitman (2018), the formulation in equation (34) is useful to
simulate sample paths for aggregate variables generated by any model, including a heterogeneous-
agent model. Assume impulse responses dXo,z have been computed for a given outcome o for all
shocks z, with truncation horizon T . Then, a procedure to simulate a random sample path of o is
                                                                               z } for each shock z,
as follows: first, draw paths for the shock innovations, that is, a sequence { t
up to a large horizon T. Second, evaluate (34) for each t. Finally, discard the first T elements of the
       ~t
path d X o . This procedure generates a random sample path of outcome o of length T - T .34 Panel

(a) of Figure 7 presents an example of such simulations for the Krusell-Smith model with AR(1)
TFP shocks.35
      Table 1 shows that, given the G matrices, this simulation procedure is extremely fast in prac-
tice: to draw sample paths of length 100,000 for the observables used in the estimation of our
four main models at their posterior modes in section 5.4, we only need 5 ms for the Krusell-Smith
model (one observable, one shock), 22 ms for the one-asset HANK model (three observables, three
shocks), and 105 ms for the two-asset HANK model (seven observables, seven shocks).
      One use of these simulated sample paths, as Boppart, Krusell and Mitman (2018) show, is to
compute the second moments of outcomes--their variances and covariances, at various lags and
leads. In the next section, however, we will instead discuss a more efficient, analytical way of
computing these moments, based directly on the impulse responses dXo .


5.2       Analytical second moments
     ~ t = (d X
Let dX        ~to)
                   o O be the vector-valued stochastic process of all no outputs, and let d Xs be the
stacked no × nz matrix of MA coefficients dXs   o ,z
                                                     . The autocovariances of dX~ t are given by the
standard expression (see, for instance, Box and Jenkins 1970 and Hamilton 1994):

                                                        T -1- ( t - t )
                                      ~ t , dX
                                 Cov(dX      ~t ) =                       ( d Xs ) ( d Xs+t -t )                      (35)
                                                             s =0


The covariance in (35) only depends on the distance t - t, not on t and t separately.
  33 In appendices A.1 and A.2, we describe how to calculate Jacobians when o is a distributional statistic, like the
coefficient of variation or quantiles of the asset distribution. Given the resulting Go,Z , we can apply (33) to get the MA
representation, just like with any other o.
  34 In appendix C.9, we explain how to extend this procedure to simulate panels of individuals.
  35 For this simulation, we assume an AR(1) process for TFP with persistence  = 0.9, and innovations with standard

deviation of  = 0.02. We set T = 300 and T = 500, so there are 200 periods of observation.



                                                            32
 Figure 7: Simulations and second moments of the Krusell and Smith (1998) model for AR(1) TFP,  = 0.9

                                 (a) Simulation of various series X                              (b) Corr(dXt+l , dZt ) for various series X

                                                                                          1.0
                        20                                            dZ / Z                                                               dZ
                                                                      dY /Y                                                                dY
                                                                                          0.8
                                                                      dC /C                                                                dC
 % deviation from ss




                        10                                            dK /K                                                                dK
                                                                                          0.6

                         0                                                                0.4


                                                                                          0.2
                       -10

                                                                                          0.0
                             0          50        100        150               200         -60       -40     -20      0       20      40        60
                                                 Time t                                                              Lag l




                       In panel (b) of figure 7, we provide an illustration of these second moments for the param-
eterization of the stochastic Krusell-Smith model simulated in panel (a). The figure shows the
correlations of productivity, output, consumption, and capital with the underlying productivity
process, at various lags. The figure shows that capital and consumption--and to a much lesser
extent, output--tend to lag productivity. This reflects the typical transmission mechanism of TFP
shocks in RBC models.
                       As table 4 reveals, it is very fast to calculate autocovariances in this way: for our estimation
exercises of section 5.4, moving from the MA( T - 1) representation to a full set of autocovariances,
which are stacked in constructing the matrix V, only takes between 0.4 and 0.7 milliseconds.36
These autocovariances can be used directly to calibrate or estimate a model--as in the simulated
method of moments, but without the need for explicit simulation.37 Alternatively, they can be
used to evaluate the likelihood function, as an input to likelihood-based estimation on time series
data. This is where we turn next.


5.3                      Evaluating the likelihood function

The typical approach to likelihood-based estimation in the DSGE literature is to compute the like-
lihood by applying the Kalman filter to the model's state-space representation (see e.g. Smets and
Wouters 2007, An and Schorfheide 2007, Herbst and Schorfheide 2015, and Fernández-Villaverde,
Rubio-Ramírez and Schorfheide 2016). This approach is appropriate for models with small state
spaces. With the large state spaces that characterize heterogeneous-agent models, however, eval-
uating the likelihood in this fashion can be prohibitively slow.
     36 This
          is facilitated by using the fast Fourier transform to calculate (35) in a highly efficient way, a process that we
describe in appendix C.10.
  37 For recent examples of this approach to estimation, see Auclert and Mitman (2020) and Bardóczy (2020). For a

previous instance of an analytical approach to calculating second moments from a heterogeneous-agent model, see
Harmenberger and Sievertsen (2017).


                                                                                     33
    We now suggest an alternative approach: to use the MA representation provided by the
sequence-space Jacobian method to rapidly compute (and recompute) the likelihood. The idea
of using the MA representation of a DSGE model directly to calculate the likelihood goes back to
at least Hansen and Sargent (1981). There are multiple ways to perform this calculation. The ap-
proach we employ in our application builds directly on the analytical moments from the previous
section.38 Let
                                                  ~ obs
                                                 dX        ~
                                                    t = B dXt + ut                                                  (36)

denote the vector of nobs observables whose likelihood we would like to determine.39 Here {ut }
                                                                                        ~ obs is a
is iid normal with mean 0 and covariance matrix u , and B is a nobs × no matrix. Since dX                       t
linear combination of the        z
                          and ut terms, it has a multivariate normal distribution. Moreover, its
                                 t
                                                               ~ t:
second moments are a simple linear transformation of those of dX

                                  ~ obs
                             Cov(dX       ~ obs                      ~      ~
                                    t , d Xt ) = 1t=t · u + B Cov( d Xt , d Xt ) B                                  (37)

We stack these covariances into a large symmetric nobs Tobs × nobs Tobs matrix V, where Tobs is the
number of time periods in our data.40 The log-likelihood function is then the conventional log
multivariate density. Dropping the constant term, it can be expressed as a function of the observed
      ~ obs = (dX
data dX         ~ obs ) (stacked as an nobs Tobs -dimensional vector) as
                     t

                                      1            1 ~ obs        ~ obs
                                 L = - log det V -   dX    V -1 d X                                                 (38)
                                      2            2

We evaluate this expression by performing a Cholesky decomposition of V, from which we can
                                                                             ~ obs V-1 dX
quickly calculate both the log determinant log det V and the quadratic form dX          ~ obs .41
Table 4 reveals that this is quite efficient in our applications: calculating L takes about 2 millisec-
onds or less in all except the two-asset HANK, where it takes about 12 milliseconds.
    A weakness of this approach is that the Cholesky decomposition of V requires time propor-
tional to n3    3
           obs Tobs . As the number of time-series observations Tobs grows, this can become quite
costly.42 An alternative that scales better with Tobs is to use the Whittle approximation to the
likelihood, as in Hansen and Sargent (1981) and Plagborg-Møller (2019), which can be efficiently
  38 Recent papers in the DSGE literature that use the same approach include Mankiw and Reis (2007) and Schmitt-
Grohé and Uribe (2010).
  39 These may include moments of micro data (if we interpret u as sampling error), since we can construct model im-
                                                                t
pulse responses for such moments using our extended methods from appendices A.1 and A.2. More comprehensively
integrating micro data into time series estimation requires other methods. For promising work along these lines, see
Chang, Chen and Schorfheide (2018) and Plagborg-Møller and Liu (2019).
  40 Missing or mixed-frequency data can be easily accommodated by replacing the B in (36) with a time-specific B ,
                                                                                                                        t
which can have a time-varying number of rows. The second term on the right in (37) then becomes Bt Cov(dX  ~ t , dX
                                                                                                                  ~t )B .
                                                                                                                       t
  41 We provide an accuracy check of our implementation of (38) by using it to find the posterior modes of the Herbst

and Schorfheide (2015) and the Smets and Wouters (2007) models, on their original datasets. Table D.1 in appendix D.3
shows that the modes are numerically identical to those obtained in Dynare given the state-space formulations of these
models.
  42 One relatively minor modification, which exploits the block Toeplitz structure of V, is to use Levinson recursion
                                                                                                   2 instead, although
instead of the Cholesky decomposition (e.g. Meyer-Gohde 2010). Asymptotically, this scales with Tobs
for our applications it did not deliver a major improvement.


                                                           34
calculated using the Fast Fourier Transform.
      Another approach is to construct a state-space system from the MA representation, includ-
ing the most recent T realizations of each innovation                z
                                                                     t,   and then apply the Kalman filter. This
system is distinct from the usual state-space one, and does not scale with the underlying hetero-
geneity--but since its size is proportional to the truncation horizon T , it is often large enough in
our applications that applying the Kalman filter is costly. Still, this approach has a number of ad-
vantages: for instance, its cost only scales linearly in Tobs , and if desired we can apply the Kalman
smoother to do inference on shocks.


5.4      Bayesian estimation

In this section, we perform a Bayesian estimation of macro parameters for our three example
economies. Our primary objective is to illustrate that, by reusing Jacobians, this can be done very
efficiently with the SSJ method. We first estimate the posterior mode, and then use a standard
Markov chain Monte Carlo method (Random Walk Metropolis Hastings, RWMH) to trace out the
shape of the posterior distribution, as described in Herbst and Schorfheide (2015). We leave a
detailed understanding of the economics behind the estimation results to future research.


Reusing Jacobians. Likelihood-based estimation involves computing the likelihood function
many times for different parameters. In our case, given equation (38), this requires computing
the covariance matrix of model observations V for each parameter draw, which in turn requires
computing the impulse responses dX. Our key innovation is to make the repeated computation of
dX very efficient by reusing Jacobians. The benefits of this procedure, however, depend on which
parameters we are estimating.
      Consider first the estimation of the parameters of shock processes. In this case, the matrices
G o ,z   in equation (33) is unchanged across parameter draws, since these parameters only change
the vector dZz . Hence, it is sufficient to compute all G matrices once, and then for each param-
eter draw form dX, V and L without re-solving the model. This separation constitutes a clear
advantage of our sequence-space approach relative to a state-space approach to estimation.
      Next, consider the estimation of parameters that do not change the steady state of the heterogeneous-
agent problem. This includes parameters that govern price stickiness, capital adjustment costs, or
monetary policy rules. These parameters also do not affect the Jacobian of the heterogeneous-
agent problem. Hence, in the construction of the total model Jacobian in equation (29), these
Jacobians can be held fixed at their initial value.43 Since heterogeneous-agent Jacobians are by far
the most time-consuming step in obtaining G (see Table 1), this is still very fast.
      Finally, consider estimating parameters that do change the steady state of the heterogeneous
agent problem. There, the Jacobian of that problem needs to be recomputed for each new draw
of parameters, together with the steady state. While the fake news algorithm speeds up Jacobian
  43 This   statement is true, more generally, of the Jacobian of any block in the DAG whose parameters do not change.




                                                            35
computation considerably, the additional time cost of re-evaluating the steady state on each draw
remains substantial, and we do not pursue this type of estimation here.44


Priors, data, and estimation.        We now proceed to our main estimation exercise. Across all mod-
els, we assume the following prior distributions. We assume that the priors for the standard
deviations of all shocks are Inverse-Gamma distributed with mean 0.4 and standard deviation
4. We assume that the priors for persistence parameters are Beta distributed with mean 0.5 and
standard deviation 0.2. We also assume no measurement error, u = 0. We describe the priors of
model-specific parameters below. We search for the posterior mode using a standard optimization
routine, starting with the prior mode as our initial guess.45 We run a standard RWMH in which
the proposal distribution is a multivariate normal with variance equal to the inverse Hessian at
the posterior mode, scaled by a factor c that is adjusted to get an acceptance rate around 25%.46
We simulate the Markov chain for 100,000 draws, discarding the first 50,000.
    For each model, we use the same U.S. data series as those used in Smets and Wouters (2007),
over the same sample period (1966:1­2004:4). We linearly de-trend the logs of all growing vari-
ables (output, consumption, investment, wages, hours) and take out the sample means of inflation
and nominal interest rates. The individual models are then estimated as follows.


Krusell-Smith model. We estimate our Krusell and Smith (1998) model with a single shock,
                                 obs }, output. We assume that TFP shocks follow an ARMA (1, 1)
TFP, and a single time series {dXt
                   ~ t = (1 -  L) t , where L denotes the lag operator. We estimate the roots ,  as
process, (1 -  L)d Z
well as the standard deviation . Table E.1 in appendix E shows the estimates, finding a persistent
AR root   0.9, as well as a relatively small MA component   0.03. Recursive means and
univariate plots of the posterior distribution sampled with the RWMH algorithm suggest that the
Markov chain has converged and the posterior distribution is well behaved.


One-asset HANK model. We estimate our one-asset HANK model both with only shock pa-
rameters, and with shock and model parameters together. In both cases, we use three shocks
(monetary policy shocks, government spending shocks, and price markup shocks) and three time
series (output, inflation, and nominal interest rates). Each shock is modeled as an AR(1) with its
own standard deviation and persistence. Thus, there are six shock parameters for this model. The
first four posterior columns in table E.2 in appendix E show our estimates when only estimating
  44 In the literature, Winberry (2018), Auclert, Rognlie and Straub (2020), and Bayer, Born and Luetticke (2020) all
calibrate the steady-state micro parameters governing the heterogeneous-agent problem, and use time series data only
to estimate macro parameters, as we do here. In recent work, Acharya, Cai, Del Negro, Dogra, Matlin and Sarfati (2020)
use time series data to also estimate micro parameters, with sequential Monte Carlo methods to speed up estimation.
Also see Plagborg-Møller and Liu (2019), who estimate micro parameters using a mix of micro and macro data.
   45 Specifically, we use the SciPy implementation of L-BFGS-B, imposing some non-binding bounds to guide the rou-

tine away from poorly-behaved regions of the parameter space.
   46 One simple improvement, which we do not attempt, might be to use a proposal distribution where a positive

probability of draws only change the parameters of shock processes, not other parameters. Since we can re-use G,
calculating the likelihood for these draws would be much faster.



                                                         36
those shock parameters; we find persistent government spending shock and price markup shocks,
while monetary policy shocks are less so. The last four posterior columns in this table report the
estimated shock and model parameters in the joint estimation. We find a Taylor coefficient  of
around 1.3, a modest responsiveness of the Taylor rule to output y  0.13, and a Phillips curve
slope parameter  around 0.14. These are standard values in the literature. Again, recursive means
and posterior distribution plots suggest good convergence properties for the RWMH algorithm.


Two-asset HANK model.             We add all seven shocks from Smets and Wouters (2007) to the two-
asset model: shocks to TFP, government spending, monetary policy, price and wage markups. The
two exceptions are that we use discount factor shocks rather than "risk premium" shocks (both
shock the Euler equation and are thus very similar), and we shock firms' first-order conditions for
capital instead of using investment-specific technology shocks.47 We estimate the parameters of
these seven shock processes using time series data on output, consumption, investment, hours,
wages, nominal interest rates and price inflation. As with the one-asset model, we estimate two
versions of the model, one with only shock parameters and one with shock and model parameters
(table E.3 in appendix E). Compared to the one-asset model, we find here somewhat less respon-
sive coefficients of the Taylor rule on inflation and output at the mode, but also a much wider 90%
credible interval. We also find smaller Phillips curve slope parameters  p ,  w . We also estimate
the degree of capital adjustment costs         I   and find it to be in line with standard estimates from the
literature. The evolution of the recursive means across the 50,000 non-discarded draws, as well
as the estimated posterior distributions, suggest good convergence properties when we only es-
timate shocks, but less stability when estimating both shocks and parameters. This could be due
to the fact that the model is not designed explicitly to fit the hump shapes in the time series; see
Auclert, Rognlie and Straub (2020) for a model that addresses this shortcoming.


Estimation times. Table 4 lists computing times for each of our five estimation exercises, includ-
ing times for each likelihood evaluation and their breakdown into the three steps described in
section 5.3.
    Once the Go,z matrices are computed (table 3), the Krusell-Smith model's likelihood can be
evaluated in less than one millisecond, and the posterior mode can be found in around 60 millisec-
onds. The entire RWMH estimation takes just over a minute. We attain similar speeds estimating
the shock processes for the one-asset HANK model (just under 5 minutes for RWMH). Since we
allow for seven shocks when estimating the two-asset HANK model, estimating the parameters
of these shock processes is somewhat slower than in the other two models; this has nothing to do
with the complexity or micro heterogeneity of the two-asset model. Still, a single likelihood eval-
uation only takes a few milliseconds, the posterior mode is found in a few seconds, and RWMH
estimation takes about 24 minutes.
  47 Investment-specifictechnology shocks are known to have counterfactual implications for the relative price of in-
vestment--see, for instance, Justiniano, Primiceri and Tambalotti (2011).




                                                         37
                                          Table 4: Estimation times.

                                    Krusell-Smith                  one-asset HANK                 two-asset HANK

                                          shocks       shocks       model + shocks      shocks     model + shocks

Single likelihood evaluation            0.639 ms     2.353 ms            56.001 ms    13.992 ms        227.245 ms
  step 1 ( MA)                          0.015 ms     0.091 ms            53.686 ms     1.139 ms        214.396 ms
  step 2 (autocovariances)              0.041 ms     0.144 ms             0.146 ms     0.706 ms          0.712 ms
  step 3 (log-likelihood)               0.582 ms     2.117 ms             2.169 ms    12.148 ms         12.137 ms


Posterior mode optimization                0.06 s         0.66 s            13.95 s     16.22 s           522.03 s
  no. of evaluations                          81            237                580        1094               6560


Random Walk Metropolis Hastings           66.20 s     284.21 s           5608.50 s    1449.79 s        21281.95 s
  no. of evaluations                      100,000      100,000             100,000      100,000           100,000
  acceptance rate                           0.248         0.246              0.251        0.255             0.245
  scaling factor c                           2.50          1.10               0.65         0.40              0.10

No. of shocks                                  1              3                  3           7                  7
No. of estimated shock parameters              3              6                  6          14                 14
No. of estimated model parameters              0              0                  3           0                  5
Total no. of estimated parameters              3              6                  9          14                 19



     When model parameters are also estimated, the likelihood takes a bit longer to be re-evaluated.
 This is entirely due to step 1--the computation of impulse responses. The single likelihood evalu-
 ation for the two-asset model, for instance, takes 227 ms rather than 14 ms when model parameters
 change, and finding the posterior mode takes less than 9 minutes. Running RWMH with 100,000
 evaluations on the two-asset model when estimating 19 shock processes and model parameters
 takes less than 6 hours. To the best of our knowledge, these are much faster speeds for estimation
 of such models than what any other method has been able to achieve at a comparable level of
 accuracy.
     Our main contribution in this section, the idea of reusing Jacobians, is essential to achiev-
 ing these speeds. To illustrate this, observe that re-evaluating the heterogeneous-agent Jacobian
 100,000 times for the two-asset model would take about 4 full days with our fake news algorithm
 (approximately 3.5 s per evaluation), and about 3 years with the direct algorithm (approximately
 950 s per evaluation).


 6     Application to nonlinear perfect foresight transitions
 We now discuss how to use sequence-space Jacobians to obtain nonlinear solutions to equation
 (27). These solutions are the nonlinear perfect foresight impulse responses to unexpected shocks
 perturbing the aggregate steady state at date 0 (sometimes called "MIT shocks"). In the literature,
 these are used by researchers to explore size dependence and sign asymmetries (see e.g. Kaplan



                                                     38
                       Figure 8: Nonlinear impulse responses and transitional dynamics for the two-asset HANK model

                        (a) Consumption after shocks to Taylor rule                                              (b) Transition after a 1% permanent TFP shock

                       1.50
                                                  Linear, 5pp
                       1.25                       5 × (Nonlinear, 1pp)




                                                                                   % deviation from initial ss
                                                                                                                  1.0
                                                  Nonlinear, 5pp
 % deviation from ss




                       1.00
                                                                                                                                                           Y
                       0.75                                                                                       0.5                                      N
                                                                                                                                                           K
                       0.50
                                                                                                                  0.0
                       0.25

                       0.00                                                                                      -0.5
                              0                5                         10                                             0     50        100       150          200
                                             Time t                                                                                    Time t




and Violante 2018 for fiscal policy and Berger, Guerrieri, Lorenzoni and Vavra 2018 for house price
changes), and to simulate transitions between two steady states in applications that involve long-
term changes (see e.g. Heathcote, Storesletten and Violante 2010 for rising inequality, and Krueger
and Ludwig 2007 for demographic change). Recently, Boppart, Krusell and Mitman (2018) have
also suggested examining the extent of size dependence in these shocks as a test of how closely
the first-order aggregate perturbation matches the nonlinear solution with aggregate risk.
                       To find the U that solves H (U, Z) = 0 for a given Z, truncated to some T , we use the following
iterative procedure. First, starting from j = 0, guess a path U0 (typically, U0 = Uss ). Second,
calculate H U j , Z . Third, form the j + 1 guess using

                                                      U j+1 = U j - [HU (Uss , Zss )]-1 H U j , Z                                                              (39)

This algorithm falls in the class of quasi-Newton methods,48 since the steady-state sequence space
Jacobian HU (Uss , Zss ) is used instead of the actual Jacobian HU U j , Z .49 We illustrate this method
using our two-asset HANK model in two ways.


Nonlinear impulse responses.                               Panel (a) of figure 8 shows three impulse responses of consump-
tion in the two-asset HANK model in response to monetary policy shock with quarterly persis-
tence  = 0.6. Two are the linear and nonlinear impulse responses to a -5pp shock to the Taylor
rule, and the other is the nonlinear impulse response to a -1pp shock, scaled up by a factor of 5.
  48 This idea of Newton's method to compute nonlinear impulse responses dates back to Laffargue (1990), Boucekkine

(1995), and Juillard (1996). For heterogeneous-agent models, previous versions of the method in (39) were implemented
by approximating the HU (Uss , Zss ) matrix: see, among others, Auclert and Rognlie (2018), Straub (2017), and Koby and
Wolf (2020). For an example using automatic differentiation to obtain HU (Uss , Zss ), see Ahn, Moll and Schaab (2018a).
     49 One
         alternative is to build an approximation to HU U j , Z for each new guess U j , holding heterogeneous-agent
Jacobians constant at their steady state values but using exact Jacobians elsewhere. This is useful when there are
substantial nonlinearities originating outside the heterogeneous-agent block.


                                                                              39
The linear and scaled-up nonlinear impulse responses are almost identical, indicating that linear-
ity is an accurate assumption for -1pp shocks. The nonlinear impulse response to the -5pp shock
is visibly a bit smaller than the other two, but still similar: 1.36% on impact, rather than 1.46%.
This similar response, despite the extreme size of the monetary shock, suggests that nonlinearities
in the household model--such as large shocks moving households away from their borrowing
constraints--do not play an important role for plausibly-sized shocks.
     The algorithm above converges to |H| < 10-8 in 13 iterations for the -5pp shock, and 5 itera-
tions for the -1pp shock. By contrast, methods that rely on ad-hoc adjustment criteria sometimes
require hundreds of iterations before convergence of equilibrium sequences.
     In Table 1, we use the algorithm to compute nonlinear impulse responses for all four of our
models, and report the time this requires, which ranges from 0.32 s for Krusell-Smith to 15 s for
two-asset HANK. (For comparability, these numbers are for a 1% shock to TFP, which is available
in every model.)


Transition to a new steady state.    We can use this algorithm to compute the response to a perma-
nent shock. Here, it important to use the Jacobian HU (Uss , Zss ) around the terminal steady state.
For example, panel (b) of figure 8 reports the nonlinear transition, starting from the initial steady
state of our two-asset HANK model, to a one-time permanent shock of 1% to TFP. In this example,
it takes 7 iterations to reach |H| < 10-8 .


7     Conclusion
This paper presents a highly efficient method for computing heterogeneous-agent models. The
core idea is that sequence-space Jacobians are sufficient statistics that summarize all we need to know
about the heterogeneity in order to determine general equilibrium dynamics, to first order with
respect to aggregate shocks. Our main contribution is a fast algorithm for computing the Jaco-
bians of heterogeneous-agent problems. We combine this algorithm with a systematic method for
computing model Jacobians and linearized impulse responses. We apply these objects to estimate
models with high-dimensional state spaces, and compute their nonlinear transitional dynamics.
     Our methods allow us to find the posterior mode of a two-asset HANK model in under ten
minutes and trace its with posterior distribution with MCMC in under six hours, estimation times
that had so far been out of reach for the literature. We hope that they will prove useful to solve
and estimate other heterogeneous-agent models and facilitate new developments in the field.


References
Acharya, Sushant, Michael D Cai, Marco Del Negro, Keshav Dogra, Ethan Matlin, and Reca
    Sarfati, "Estimating HANK: Macro Time Series and Micro Moments," Manuscript, March 2020.



                                                  40
Achdou, Yves, Jiequn Han, Jean-Michel Lasry, Pierre-Louis Lions, and Benjamin Moll, "In-
  come and Wealth Distribution in Macroeconomics: A Continuous-Time Approach," Review of
  Economic Studies, October 2020, Forthcoming.

Ahn, SeHyoun, Benjamin Moll, and Andreas Schaab, "Huggett Model:                Transition Dy-
  namics, Newton method using @myAD. Available at https://benjaminmoll.com/wp-
  content/uploads/2020/06/huggett_newton_myAD.m," April 2018.

  , Greg Kaplan, Benjamin Moll, Thomas Winberry, and Christian Wolf, "When Inequality
  Matters for Macro and Macro Matters for Inequality," NBER Macroeconomics Annual, April 2018,
  32 (1), 1­75.

Algan, Yann, Olivier Allais, and Wouter J. Den Haan, "Solving the Incomplete Markets Model
  with Aggregate Uncertainty Using Parameterized Cross-Sectional Distributions," Journal of Eco-
  nomic Dynamics and Control, January 2010, 34 (1), 59­68.

  ,     ,   , and Pontus Rendahl, "Chapter 6 - Solving and Simulating Models with Heterogeneous
  Agents and Aggregate Uncertainty," in Karl Schmedders and Kenneth L. Judd, eds., Handbook
  of Computational Economics, Vol. 3, Elsevier, January 2014, pp. 277­324.

An, Sungbae and Frank Schorfheide, "Bayesian Analysis of DSGE Models," Econometric Reviews,
  April 2007, 26 (2-4), 113­172.

Auclert, Adrien and Kurt Mitman, "Consumer Bankruptcy as Aggregate Demand Management,"
  Manuscript, August 2020.

      and Matthew Rognlie, "Inequality and Aggregate Demand," Working Paper 24280, National
  Bureau of Economic Research, February 2018.

  , Bence Bardóczy, Matthew Rognlie, and Ludwig Straub, "Using the Sequence-Space Jacobian
  to Solve and Estimate Heterogeneous-Agent Models," Working Paper 26123, National Bureau
  of Economic Research, July 2019.

  , Matthew Rognlie, and Ludwig Straub, "The Intertemporal Keynesian Cross," Working Paper
  25020, National Bureau of Economic Research, September 2018.

  ,     , and     , "Micro Jumps, Macro Humps: Monetary Policy and Business Cycles in an Esti-
  mated HANK Model," Working Paper 26647, National Bureau of Economic Research, January
  2020.

Bardóczy, Bence, "Spousal Insurance and the Amplification of Business Cycles," Job Market Pa-
  per, Northwestern University 2020.

Bayer, Christian and Ralph Luetticke, "Solving Discrete Time Heterogeneous Agent Models
  with Aggregate Risk and Many Idiosyncratic States by Perturbation," Quantitative Economics,
  November 2020, 11 (4), 1253­1288­1288.

                                                 41
  , Benjamin Born, and Ralph Luetticke, "Shocks, Frictions, and Inequality in US Business Cy-
  cles," Manuscript, January 2020.

Berger, David, Veronica Guerrieri, Guido Lorenzoni, and Joseph Vavra, "House Prices and Con-
  sumer Spending," Review of Economic Studies, July 2018, 85 (3), 1502­1542.

Boppart, Timo, Per Krusell, and Kurt Mitman, "Exploiting MIT Shocks in Heterogeneous-Agent
  Economies: The Impulse Response as a Numerical Derivative," Journal of Economic Dynamics
  and Control, April 2018, 89, 68­92.

Boucekkine, Raouf, "An Alternative Methodology for Solving Nonlinear Forward-Looking Mod-
  els," Journal of Economic Dynamics and Control, May 1995, 19 (4), 711­734.

Box, George E. P. and Gwilym M. Jenkins, Time Series Analysis: Forecasting and Control, San Fran-
  cisco: Holden-Day, 1970.

Brumm, Johannes and Simon Scheidegger, "Using Adaptive Sparse Grids to Solve High-
  Dimensional Dynamic Models," Econometrica, 2017, 85 (5), 1575­1612.

Carroll, Christopher D., "The Method of Endogenous Gridpoints for Solving Dynamic Stochastic
  Optimization Problems," Economics Letters, 2006, 91 (3), 312­320.

Chang, Minsu, Xiaohong Chen, and Frank Schorfheide, "Heterogeneity and Aggregate Fluctu-
  ations," Manuscript, October 2018.

Chang, Yongsung and Sun-Bin Kim, "Heterogeneity and Aggregation: Implications for Labor-
  Market Fluctuations," American Economic Review, December 2007, 97 (5), 1939­1956.

Childers, David, "Automated Solution of Heterogeneous Agent Models," Manuscript, December
  2018.

Christiano, Lawrence, Cosmin L. Ilut, Roberto Motto, and Massimo Rostagno, "Monetary Policy
  and Stock Market Booms," Jackson Hole Symposium Proceedings, August 2010.

de Nardi, Mariacristina, "Wealth Inequality and Intergenerational Links," Review of Economic
  Studies, 2004, 71 (3), 743­768.

den Haan, Wouter J., "Solving Dynamic Models with Aggregate Shocks and Heterogeneous
  Agents," Macroeconomic Dynamics, June 1997, 1 (2), 355­386.

Fernández-Villaverde, Jesús, Juan F. Rubio-Ramírez, and Frank Schorfheide, "Chapter 9 - So-
  lution and Estimation Methods for DSGE Models," in John B. Taylor and Harald Uhlig, eds.,
  Handbook of Macroeconomics, Vol. 2, Elsevier, January 2016, pp. 527­724.

  , Samuel Hurtado, and Galo Nuño, "Financial Frictions and the Wealth Distribution," Working
  Paper 26302, National Bureau of Economic Research, September 2019.

                                                42
Golosov, Mikhail and Robert E. Lucas, "Menu Costs and Phillips Curves," Journal of Political
  Economy, April 2007, 115 (2), 171­199.

Gornemann, Nils, Keith Kuester, and Makoto Nakajima, "Doves for the Rich, Hawks for the
  Poor? Distributional Consequences of Monetary Policy," Manuscript, April 2016.

Griewank, Andreas and Andrea Walther, Evaluating Derivatives: Principles and Techniques of Algo-
  rithmic Differentiation, Second Edition, SIAM, November 2008.

Hamilton, James D., Time Series Analysis, 1 ed., Princeton University Press, January 1994.

Hansen, Lars Peter and Thomas J. Sargent, "Exact Linear Rational Expectations Models: Specifi-
  cation and Estimation," Federal Reserve Bank of Minneapolis Staff Report, 1981.

Harmenberger, Karl and Hans Henrik Sievertsen, "The Labor-Market Origins of Cyclical Income
  Risk," Manuscript, November 2017.

Heathcote, Jonathan, Kjetil Storesletten, and Giovanni L. Violante, "The Macroeconomic Im-
  plications of Rising Wage Inequality in the United States," Journal of Political Economy, August
  2010, 118 (4), 681­722.

Herbst, Edward P. and Frank Schorfheide, Bayesian Estimation of DSGE Models, Princeton Univer-
  sity Press, December 2015.

Hopenhayn, Hugo A., "Entry, Exit, and firm Dynamics in Long Run Equilibrium," Econometrica,
  1992, 60 (5), 1127­1150.

Iskhakov, Fedor, Thomas H. Jørgensen, John Rust, and Bertel Schjerning, "The Endogenous
  Grid Method for Discrete-Continuous Dynamic Choice Models with (or Without) Taste Shocks,"
  Quantitative Economics, 2017, 8 (2), 317­365.

Judd, Kenneth L. and Sy-Ming Guu, "Perturbation Solution Methods for Economic Growth Mod-
  els," in Hal R. Varian, ed., Economic and Financial Modeling with Mathematica®, New York, NY:
  Springer New York, 1993, pp. 80­103.

Juillard, Michel, "Dynare: A Program for the Resolution and Simulation of Dynamic Models with
  Forward Variables Through the Use of a Relaxation Algorithm," CEPREMAP Working Paper no
  9602, 1996.

Justiniano, Alejandro, Giorgio E. Primiceri, and Andrea Tambalotti, "Investment Shocks and
  the Relative Price of Investment," Review of Economic Dynamics, 2011.

Kaplan, Greg and Giovanni L. Violante, "Microeconomic Heterogeneity and Macroeconomic
  Shocks," Journal of Economic Perspectives, August 2018, 32 (3), 167­194.

  , Benjamin Moll, and Giovanni L. Violante, "Monetary Policy According to HANK," American
  Economic Review, March 2018, 108 (3), 697­743.

                                                  43
Khan, Aubhik and Julia K. Thomas, "Idiosyncratic Shocks and the Role of Nonconvexities in
  Plant and Aggregate Investment Dynamics," Econometrica, March 2008, 76 (2), 395­436.

Koby, Yann and Christian Wolf, "Aggregation in Heterogeneous-Firm Models: Theory and Mea-
  surement," Manuscript, July 2020.

Krueger, D., K. Mitman, and F. Perri, "Chapter 11 - Macroeconomics and Household Hetero-
  geneity," in John B. Taylor and Harald Uhlig, eds., Handbook of Macroeconomics, Vol. 2, Elsevier,
  January 2016, pp. 843­921.

Krueger, Dirk and Alexander Ludwig, "On the Consequences of Demographic Change for Rates
  of Returns to Capital, and the Distribution of Wealth and Welfare," Journal of Monetary Eco-
  nomics, January 2007, 54 (1), 49­87.

Krusell, Per and Anthony A. Smith, "Income and Wealth Heterogeneity in the Macroeconomy,"
  Journal of Political Economy, October 1998, 106 (5), 867­896.

Laffargue, Jean-Pierre, "Résolution D'un Modèle Macroéconomique Avec Anticipations Ra-
  tionnelles," Annales d'Économie et de Statistique, 1990, (17), 97­119.

Lorenzoni, Guido, "A Theory of Demand Shocks," American Economic Review, December 2009, 99
  (5), 2050­2084.

Mankiw, N. Gregory and Ricardo Reis, "Sticky Information in General Equilibrium," Journal of
  the European Economic Association, May 2007, 5 (2-3), 603­613.

McKay, Alisdair, Emi Nakamura, and Jón Steinsson, "The Power of Forward Guidance Revis-
  ited," American Economic Review, October 2016, 106 (10), 3133­3158.

Mertens, Thomas M. and Kenneth L. Judd, "Solving an Incomplete Markets Model with a Large
  Cross-Section of Agents," Journal of Economic Dynamics and Control, June 2018, 91, 349­368.

Meyer-Gohde, Alexander, "Linear Rational-Expectations Models with Lagged Expectations: A
  Synthetic Method," Journal of Economic Dynamics and Control, May 2010, 34 (5), 984­1002.

Molico, Miguel, "The Distribution of Money and Prices in Search Equilibrium," International Eco-
  nomic Review, August 2006, 47 (3), 701­722.

Plagborg-Møller, Mikkel, "Bayesian Inference on Structural Impulse Response Functions," Quan-
  titative Economics, 2019, 10 (1), 145­184.

   and Laura Liu, "Full-Information Estimation of Heterogeneous Agent Models Using Macro
  and Micro Data," Manuscript, June 2019.

Proehl, Elisabeth, "Approximating Equilibria with Ex-Post Heterogeneity and Aggregate Risk,"
  SSRN Scholarly Paper ID 2620937, Social Science Research Network, Rochester, NY February
  2019.

                                                  44
Reiter, Michael, "Solving Heterogeneous-Agent Models by Projection and Perturbation," Journal
  of Economic Dynamics and Control, March 2009, 33 (3), 649­665.

  , "Approximate and Almost-Exact Aggregation in Dynamic Stochastic Heterogeneous-Agent
  Models," IHS Working Paper 258, 2010.

Schmitt-Grohé, Stephanie and Martín Uribe, "Evaluating the Sample Likelihood of Linearized
  DSGE Models Without the Use of the Kalman Filter," Economics Letters, December 2010, 109 (3),
  142­143.

Simon, Herbert A., "Dynamic Programming Under Uncertainty with a Quadratic Criterion Func-
  tion," Econometrica, 1956, 24 (1), 74­81.

Smets, Frank and Rafael Wouters, "Shocks and Frictions in US Business Cycles: A Bayesian DSGE
  Approach," American Economic Review, June 2007, 97 (3), 586­606.

Straub, Ludwig, "Consumption, Savings, and the Distribution of Permanent Income," Manuscript,
  November 2017.

Theil, Henry, "A Note on Certainty Equivalence in Dynamic Planning," Econometrica, 1957, 25 (2),
  346­349.

Whiteman, Charles, Linear Rational Expectations Models: A User's Guide, Univ Of Minnesota Press,
  April 1983.

Winberry, Thomas, "A Method for Solving and Estimating Heterogeneous Agent Macro Models,"
  Quantitative Economics, November 2018, 9 (3), 1123­1151­1151.

Young, Eric R, "Solving the Incomplete Markets Model with Aggregate Uncertainty Using the
  Krusell­Smith Algorithm and Non-Stochastic Simulations," Journal of Economic Dynamics and
  Control, 2010, 34 (1), 36­41.




                                               45
  Online Appendix to "Using the Sequence-Space Jacobian
      to Solve and Estimate Heterogeneous-Agent Models"

A     Generalizing the fake news algorithm
A.1       Direct applications of the existing framework

First, we identify several ways in which the existing framework can be adapted to include model
elements differing from our examples, with either no change or limited changes to the algorithm.


Non-grid representations of value function.               (10)-(12) assume that the distribution is discretized
as a finite grid, and that y and  give the value of the output Y at each point and the transition
probabilities between points. None of this places any restriction, however, on how the value
function is discretized as v. Our algorithm therefore accommodates a variety of discrete represen-
tations of v (splines, Chebyshev polynomials, parametric, etc.) without any modification.


Higher moments. At first glance, (12) seems to require that we are taking the mean yt Dt of
some individual outcome yt . But if we redefine the individual outcome as yk
                                                                           t , then we can the
calculate kth (non-centered) power moment yk
                                           t Dt as well. Applying this strategy as necessary
for different k and combining the results using a simple block, we can obtain the Jacobian for any
transformation of these moments, such as the variance, the coefficient of variation, or a CES price
index.
    This allows us to calculate many moments of interest, though not all; for instance, for some
distributional moments like the Gini coefficient, we need the general framework of the next sec-
tion.50


Leads and lags.       The equations (10)-(12) include only contemporaneous Xt , without any leads or
lags. What if, instead, a lagged or future variable appears, such as Xt-1 or Xt+1 ? In the case of leads
like Xt+1 , the algorithm works without any change: lemma 1 goes through without modification,
                                                                   s and d s needed in proposition
so that iterating backward from a shock at T - 1 still gives the dy0       0
1. Intuitively, this is because our backward iteration already incorporates the effects of a future
shock working through the value function, and nothing more is needed to handle the case where
future X also appears directly in (10)-(12).
    If, on the other hand, a lag like Xt-1 appears in (10)-(12), then it is no longer true that ys
                                                                                                 t = yss
and s
    t = ss for t = s + 1 in (16), because both are affected by the lagged shock. Lemma 1 fails,
  50 Note, however, that this is only necessary if we need Jacobians for these moments. If, instead, we only need impulse

responses for these moments (and the moments themselves are not needed to solve for general equilibrium), we can
apply the linearized (10)-(12) to the equilibrium impulse responses for Xt and recover impulse responses yt and Dt ,
then directly compute any desired moments from these.




                                                           46
and our method--which does not account for the possibility that "past" shocks affect current
individual outcomes at a particular point in the state space--no longer works.
    The simplest solution is to transform variables outside the heterogeneous-agent block, e.g.
define a new variable X~ t  Xt-1 (which can be the output of a simple block taking in X), so that
                                                      ~ t appears, matching the exact form of
within the algorithm, only a contemporaneous variable X
(10)-(12).51


Discrete choice with taste shocks.          The models we simulate in this paper all have the feature that
policy functions are continuous in the underlying idiosyncratic state variables. This is no longer
generally the case for models that feature discrete choices, such as lumpy adjustment of durables,
price setting with menu costs, or a discrete labor-leisure choice (see e.g. Bardóczy 2020). For such
models, if the problem is discretized using a grid, linearization can give extremely misleading
results: if none of the grid points at a point where the discrete choice changes, then the first-order
response of the discrete choice to any shock is zero.
    This problem is common to all perturbation methods. One standard solution is to assume
continuously-distributed iid taste shocks affecting the value of each discrete choice. The proba-
bility of each discrete choice then varies continuously with the (pre-taste shock) state.52 To write
the model in the form (10)-(12), Dt should then be the discretized pre-taste shock distribution, and
vt , yt , t should be the expected values at each state in this distribution.
    An alternative to taste shocks, which we discuss in the next section, is to use a continuous
representation of the distribution rather than a discrete grid.


Endogenous distribution. The distribution Dt in equation (11) is assumed to be unaffected by
the current shock Xt and the value function vt+1 . In short, it is predetermined at date t. What if we
want events at date t to affect the distribution--for instance, if shocks at date t can affect capital
gains on wealth at date t, or can affect the probability of unemployment at date t?
    Within the framework (10)-(12), the solution is to keep Dt predetermined at date t, and in-
corporate these shocks into the functions v, , y instead. For instance, in our two-asset HANK
example, the date-0 return on the illiquid asset includes an endogenous capital gain. The distri-
bution D0 gives the state prior to this capital gain, and then the ex-post return on illiquid assets,
 a is included as part of X as an input to v, , y.
r0                         0
    Similarly, if the probability of unemployment is endogenous at date t, Dt should still be the
state prior to the realization of the idiosyncratic unemployment shock, and then v, , y should take
expectations over the realizations of this shock.
  51 To implement the fake news algorithm directly with lags, we would need to calculate y0   s and s for all s from - u
                                                                                                    0
to T - 1, where u is the maximum lag length, use these to build a fake news matrix F with columns s = -u, . . . , T - 1,
then apply the recursion Jt,s = Jt-1,s-1 + Ft,s in step 4 starting from this new leftmost column -u. In our experience,
                                                ~ t solution above.
this is more difficult and error-prone than the X
  52 One particularly convenient approach is to use extreme value taste shocks as in Iskhakov, Jørgensen, Rust and

Schjerning (2017), which are smooth and lead to logit choice probabilities. Bardóczy (2020) implements the fake news
algorithm using this approach.



                                                          47
   Although this procedure can virtually always be used to put a model into the framework of
(10)-(12), it becomes unwieldy in complex cases. In appendix A.3, we describe how to apply the
fake news algorithm to a model where the distribution evolves over multiple subperiods within
each period. This provides a more formal, structured approach.


A.2    Nonlinear Y or D

We now generalize our algorithm to the case of nonlinear functions for Dt+1 and Yt in (11)-(12).
The key is the following generalization of proposition 1.

Proposition 2. Assume that equations (11) and (12) are replaced, respectively, by

                                             D t +1 = D ( v t +1 , X t , D t )                                      (40)
                                                Y t = Y ( v t +1 , X t , D t )                                      (41)

for some functions D (v, X, D) and Y (v, X, D). Then proposition 1 still holds, provided that definition 1 is
changed to
                                                    Et  ( DD )t YD                                                  (42)
              D                                  Y
where DD      D ( vss , Xss , Dss )   and YD      D ( vss , Xss , Dss )   are the n D × n D Jacobian and 1 × n D gradient
of D and Y with respect to D, respectively.

Proof. In the proof of lemma 2, we replace (19) by dYts = YD dDs         s           s
                                                               t + Yv d vt+1 + YX d Xt . Subtracting
             -1                        s -1                        s -1
dYts and dYts-                s
               1 and using d vt+1 = d vt    from (16) and dXs
                                                            t = d Xt-1 by construction, we get
                              s -1
Ft,s · dx = YD (dDs   t - d Dt-1 ), which is identical to (20) except with yss replaced by YD .
    Similarly, replacing (21) with dDs                    s          s          s
                                            t = DD · d Dt-1 + Dv d vt + DX d Xt-1 , we follow the same steps
                            s -1           t-1 d Ds , which is identical to (22) except with  replaced by
to show that dDs    t - d D t - 1 = ( DD )        1                                            ss
DD . The modified lemma 2 follows, with yss , ss replaced by YD , DD . Replacing these in the
definition of Et , the proof of proposition 1 goes through.

   Remarkably, the only change needed in proposition 2, relative to proposition 1, is to redefine
Et as ( DD )t YD rather than (ss )t yss . This redefinition is natural: the Jacobian DD , which gives
the first-order effect of yesterday's distribution on today's, is the generalized counterpart of the
forward iteration matrix ss , and the gradient YD , which gives the first-order effect of today's
distribution on the aggregate output, is the generalized counterpart of yss .
    Given this redefined Et , which can be calculated recursively via Et = ( DD )Et-1 and E0 = YD ,
the fake news algorithm is otherwise unchanged. We now discuss some applications.


Entry and exit.     In general, if we modify our original framework to allow for entry and exit, we
have an equation (40) of the more specific form

                                      Dt+1 = (vt+1 , Xt )Dt + D entry (vt+1 , Xt )                                  (43)


                                                             48
where  is a Markov matrix with rows that may sum to less than one (because of exit, which may
be endogenous) and D entry accounts for the possibly-endogenous entry of agents. If, additionally,
new entrants show up in the aggregate output, then we also have an equation (41) of the form

                                      Yt = y(vt+1 , Xt ) Dt + Y entry (vt+1 , Xt )                                     (44)

where Y entry accounts for the effect of the new entrants.
    Note that from (43) and (44), we have DD = ss and YD = yss . Hence the expectation vector
(42) is the same as our original definition from section 3, and proposition 1 and the fake news
algorithm apply in their original form.


Alternative representations of the distribution.                    In our original equations (11)-(12), we assumed
that the distribution vector Dt consisted of probability masses at discrete grid points. Now, in
(40)-(41), Dt can be an arbitrary vector describing the distribution. For instance, suppose that
the state is one-dimensional and continuous. Then if Dt is a vector of parameters53 encoding a
density f ( ; Dt ) for   (-, ), we can write a function D (vt+1 , Xt , Dt ) that specifies how these
parameters evolve over time in our problem. We can also define the aggregate output Y as the
average of some idiosyncratic outcome y( ; vt+1 , Xt ) of interest:
                                                           
                               Y ( v t +1 , X t , D t )        y (  ; v t +1 , X t ) · f (  ; D t ) d                  (45)
                                                           -

Assuming that we already have a way to calculate D and Y , all we need to implement the fake
news algorithm is DD and YD . If D is not too high-dimensional, then numerical differentiation is
usually a simple strategy to calculate these, although automatic differentiation or (in special cases)
analytical differentiation may also be useful.


Moments of the distribution.             Suppose that we want the Jacobian for some moment that can not
be represented as a transformation of power moments as in the previous section. For instance--to
take a simple example--suppose that D is a vector of parameters describing the distribution of
assets, and we want the uth quantile of this asset distribution. This is a nonlinear function Y (Dt ),
and to apply the fake news algorithm we only need to calculate the gradient YD , which (as above)
can be done using either numerical or automatic differentiation.
    If D is instead a simple discretized distribution, then the uth quantile function is discontinu-
ous, consisting of many steps, and its Jacobian is therefore essentially meaningless (wherever it
can be calculated, it is identically zero). We could obtain a more interesting object, however, by
converting this function to be piecewise linear, interpolating between the discrete mass points.
With many grid points, numerical differentiation might be impractical in this case, but thanks to
   53 For an example of a parametric family of distributions often used with heterogeneous-agent models, see Algan et

al. (2014). In some cases, another possibility is to represent the distribution with a more flexible set of basis functions,
such as Chebyshev polynomials.



                                                               49
the simplicity of the linearly interpolated quantile function, one can write the gradient YD analyt-
ically instead.


Discrete choice without taste shocks. As discussed in appendix A.1, first-order methods are
misleading for endogenous discrete choices on a state space that has been discretized to a grid,
since locally these choices will not respond to shocks unless the grid points happen to be at the
discontinuities (in which case there is instead a singularity). The suggestion of appendix A.1 was
to assume iid taste shocks, so that the probabilities of each discrete choice vary continuously.
    If D is a vector of parameters parametrizing a smooth density, however, then the integral (45)
aggregating a discrete choice y will generally vary smoothly in Xt even if y itself is discontinuous.
Similarly, the law of motion (40) should also vary smoothly. At this point, there is no particular
computational problem posed by discrete choice, and we can apply proposition 2 as long as we
can calculate DD and YD , just like above.54


A.3    Multi-stage problems

In appendix A.1, we observe that in cases where the "distribution" at time t seems endogenous
to events at time t (e.g. unemployment risk), our basic framework (10)-(12) can be applied if we
interpret Dt as being the distribution prior to any time-t events, and v, , y as taking expecta-
tions over these events. But as models become more complex, with more within-period structure,
implementing this approach manually can become difficult.
    We therefore further generalize our framework to account for multiple "stages" j  {0, . . . , J -
1} within a given period t. We now assume that the three equations (10)-(12) are replaced by

                                             v t, j = v j ( v t, j +1 , X t, j )                                     (46)
                                         D t, j +1 = D j v t, j +1 , D t, j , X t, j                                 (47)
                                            Yt, j = Yj vt, j+1 , Dt, j , Xt, j                                       (48)

where we adopt the convention that ·t, J = ·t+1,0 , and assume that the initial distribution D0,0 is
given exogenously.
    At each stage j, we allow for stage-specific inputs Xt, j and outputs Yt, j .55 Given a path for {Xt, j },
one solves (46)-(48) to obtain {Yt, j } in the standard way, except that all iterations go through both
  54 One   caveat, however, is that a smooth density is not always realistic in models with discrete choice. For instance,
if agents always reset to the same ideal state, then there will be a mass point at that state; further, if uncertainty in
the model is discrete, then there will be mass points corresponding to the each finite sequence of shocks that might
be realized after that state. To avoid having the distribution consist entirely of mass points in this way, it is useful
to introduce some stochastic variables that are drawn from a continuous distribution (e.g. in household models, iid
lognormal income risk in each period, in addition to whatever other income risk is present). This is also true if we
want to avoid mass points in a model with occasionally binding constraints (e.g. in household models, a borrowing
constraint).
   55 If some stages have either no outputs or no inputs, we can simply disregard the relevant terms. If multiple stages

include the same input, then we can use the algorithm to calculate Jacobians with respect to the input at each stage
individually, and then sum the Jacobians.


                                                               50
t and, within each t, through each stage j. For instance, iterating backward over (46), starting from
some steady-state v T,0 = vss,0 , would involve iterating through

                             v T -1, J -1 , v T -1, J -2 , . . . , v T -1,0 , v T -2, J -1 , v T -2, J -2 , . . . ,

and so on.
               j    Dj          k        Yk
    Write DD       D       and YD        D ,   and use these to define Etk, j recursively, iterating backward over
                                            k = (Y k ) and then writing
(t, j) starting with the initial condition E0, k  D

                                                                        j
                                                         Etk, j  ( DD ) Etk, j+1                                                  (49)

for all t > 0 or t = 0 and j < k. For any s, the vector Etk, j gives the first-order impact of the
distribution Ds, j at time s, stage j on the output Ys+t,k at the time s + t, stage k.
    Next, assuming a shock dx to Xk
                                  s , we define
                                                                
                                                                dY s,k                   t=0
                                                j,k                 0, j
                                             Ft,s · dx            j
                                                                                                                                  (50)
                                                                           s,k
                                                                E
                                                                  t-1,0 d D1,0           t1

and have the following further refinement of proposition 1.
                                                                                                                      j,k   j,k     j,k
Proposition 3. Assume D0,0 = Dss,0 . The Jacobian J of h satisfies the recursion Jt,s = Jt-1,s-1 + Ft,s
                     j,k        j,k
for t, s  1, with Jt,s = Ft,s for t = 0 or s = 0, and is therefore given by

                                                                 min{s,t}
                                                        j,k                     j,k
                                                      J t,s =               F t - u,s - u                                         (51)
                                                                    u =0

         j,k
where Ft,s is defined in (50).

    Obtaining entries of the Jacobian is therefore no more complicated than in our original case,
                                                                               j,k
conditional on being able to evaluate (50) to obtain Ft,s .
                                      s,k         s,k
    For each k, we can still obtain dY0, j and d D1,0 for all s = 0, . . . , T - 1 and j by iterating backward
from a shock at date T - 1. This is slightly more involved than before, however. One must first
         s,k
obtain dv0, j for each s and j through backward iteration, then for each s, combine this with (47)
                                                        s,k                            s,k
and (48), iterating forward through the js, to obtain dY0, j for all js and finally d D1,0 . (This is in
                                                          s involved no forward iteration at all.)
contrast to the original algorithm, where obtaining the dY0




                                                                      51
                         Table B.1: Calibration of our Krusell-Smith economy

                       Parameter                                               Value

                       r                 Real interest rate                     0.01
                                         Risk aversion                            1
                                         Capital share                          0.11
                                         Depreciation rate                     0.025
                                         Skill mean reversion                  0.966
                       /    1 - 2        Cross-sectional std of log earnings    0.5
                       ne                Points in Markov chain for e            7
                       nk                Points on asset grid                   500


B     Model descriptions
B.1   Calibration of the Krusell-Smith economy

We follow a standard calibration. We assume that P (e, e ) discretizes a log AR(1) process,

                                           loget = loget-1 +       t


with normal innovations t  N (0, 1). We use the Rouwenhorst method for discretization. Ta-
ble B.1 summarizes the rest of our calibration. The number of grid points refers to our baseline
calibration with 3500 idiosyncratic states. We also consider two variations on the number of grid
points. In the high-dimensional ("HD") version, ne = 50 and nk = 5000, so there are a total of
250,000 idiosyncratic states. In the lower-dimension version that we consider for comparison to
the Reiter method, ne = 3 and nk = 100.


B.2   One-asset HANK model

This is an economy without capital, but with nominal rigidities.


Households.

Households now get to choose labor supply in addition to consumption and savings to maximize
a standard separable utility function. A household in state e working nt hours earns labor income
wt nt e, pays a lump-sum tax  (e) t , and receives dividend d (e) dt per period from his ownership
of a nontradable firm share. The only asset households can trade is one-period nominal bond that
pays rt in real terms. All in all, the Bellman equation can be written as

                                          c 1-    n 1+ 
                   Vt (e, a- ) = max            -       +   Vt+1 (e , a)P (e, e )
                                c,n, a    1-      1+       e

                              c + a = (1 + rt ) a- + wt en - t ¯ (e) + dt d¯(e)

                                     a0


                                                      52
The solution is a collection of policy functions ct (e, a- ) , nt (e, a- ) and at (e, a- ) that depend on the
paths {rs , ws , s , ds }st that households take as given. Analogously to section 2, we can summarize
the household block by aggregate consumption, labor supply and asset demand functions

                                  Ct {rs , ws , s , ds }s0                ct ( a, e) dDt (e, a- )              (52)

                                 Nt {rs , ws , s , ds }s0                 ent ( a, e) dDt (e, a- )             (53)

                                 At {rs , ws , s , ds }s0                 a dDt (e, a- )                       (54)


Firms.

There is a continuum of identical firms that produce differentiated goods using labor only. To
preserve symmetry, we assume that firm employs a representative workforce. They engage in
monopolistic competition and set the price of their product subject to the usual iso-elastic demand
curve and quadratic adjustment costs. The Bellman equation of firm j is

                                            p jt                     µt 1                 2    Jt+1 ( p jt )
           Jt ( p jt-1 ) = max                   y jt - wt n jt -           log(1 +  jt ) Yt +
                        y jt , p jt ,n jt   pt                    µ t - 1 2                    1 + r t +1

                               s.t. y jt = Zn jt
                                                             µt
                                                        -µ
                                                 p jt        t -1
                                        y jt =                      Yt
                                                 pt

This is a standard problem that yields the following equilibrium conditions:

   · Phillips curve:

                                                        wt   1                   1    Yt+1
                          log(1 + t ) =                    -              +                log(1 + t+1 ).      (55)
                                                        Z    µt               1 + rt+1 Yt

   · Production:
                                                                     Yt = ZNt                                  (56)

   · Price adjustment cost:
                                                           µt 1               2
                                                 t =              log(1 + t ) Yt .                             (57)
                                                        µ t - 1 2

   · Dividends:
                                                         dt = Yt - wt Nt - t                                   (58)


Policy and market clearing

The government runs a balanced budget, spends Gt each period, and maintains a constant level of
bonds B by adjusting taxes. Monetary policy sets the nominal rate according to a Taylor rule that


                                                                     53
                       
is subject to a shock rt

                                      t = rt B + Gt ,                                              (59)
                                               
                                       it =   rt
                                              + t + y (Yt - Yss )                                  (60)
                                           1 + i t -1
                                  1 + rt =                                                         (61)
                                            1 + t

Market clearing requires that B = At , Nt = Nt and Yt = Ct + Gt + t .


Shocks.
                                                              , government spending shocks G ,
There are three shocks to the model: monetary policy shocks rt                              t
and markup shocks µt . Hence, these enter as "exogenous" variables in the DAG in figure 4. Given
the time path of the three unknowns variables (Yt , wt , rt ), one can solve for the value of the three
targets: the residual in the Phillips curve (55), labor market clearing Nt = Nt and asset market
clearing B = At .


Calibration.

The calibration mostly follows McKay, Nakamura and Steinsson (2016) and is summarized in table
B.2. The number of grid points refers to our baseline calibration with 3500 idiosyncratic states. In
the lower-dimension version that we consider for comparison to the Reiter method, ne = 3 and
n a = 100.


B.3   Two-asset HANK model

This embeds a two-asset household block, described in more detail in appendix C.3, into a New
Keynesian model.


Households.

Income zit is determined as
                                         zit = (1 - t )wt Nt eit                                   (62)

where eit is individual productivity following a Markov process as in the other models. All in all,
the household block takes as inputs the sequences of interest rates for illiquid and liquid assets
   a , r b }, wage per efficiency units { w }, labor tax rate {  } and labor demand { N } as inputs. The
{r s     s                                 s                    s                      s
relevant outputs are illiquid asset demand, liquid asset demand, productivity-weighted marginal




                                                   54
                          Table B.2: Calibration of our one-asset HANK economy
                Parameter                                                      Value       Target

                Households
                                    Discount factor                             0.982     r = 0.005
                                    Disutility of labor                         0.786       N =1
                                    Inverse IES                                   2
                                    Inverse Frisch                                2
                  b                 Borrowing constraint                          0
                  e                 Autocorrelation of earnings                 0.966
                  e                 Cross-sectional std of log earnings          0.5
                Firms
                  µ                 Steady-state markup                          1.2
                                    Slope of Phillips curve                      0.1
                Policy
                  B                 Bond supply                                  5.6
                  G                 Government spending                           0
                                    Taylor rule coefficient on inflation         1.5
                  y                 Taylor rule coefficient on output             0
                Discretization
                  ne                Points in Markov chain for e                  7
                  na                Points on asset grid                         500


utility, consumption, and portfolio adjustment costs:

                            a b
                     A t {r s , rs , ws , s , Ns } =        a dDt (e, b, a),                          (63)
                               a b
                        B t {r s , rs , ws , s , Ns } =     bt (e, b, a) dDt (e, b, a),               (64)
                                a b
                         U t {r s , rs , ws , s , Ns } =    e · ct (e, b, a)- dDt (e, b, a),          (65)
                                a b
                         C t {r s , rs , ws , s , Ns } =    ct (e, b, a) dDt (e, b, a),               (66)
                               a b
                        P t {r s , rs , ws , s , Ns } =     ( at (e, b, a), a) dDt (e, b, a).         (67)

The last two are required only for checking the omitted goods market clearing condition.


Labor unions.

We assume that every household provides a continuum of differentiated labor services, each of
which is represented by a labor union. Unions set hours and wages to maximize the average
utility of members, taking as given their consumption-savings decisions as well as the decisions
of other (identical) unions. Changing the nominal wage incurs quadratic adjustment costs. The




                                                           55
Bellman equation of union k is

                                                                                      µw     1          w
                                                                                                             2
      Ut (wkt-1 ) = max             u(cit ) - v(nkt ) dDt -                                     log(1 + kt ) Nt + Ut+1 (wkt )
                      nkt ,wkt                                                      1 - µ w 2 w
                                                            µw
                                                         - µw
                                          wkt                 -1
                    s.t. nkt =                                         Nt
                                          wt
      w is wage inflation
where kt
                                                              w                             wkt
                                                              kt = (1 +  t )                     - 1.                                           (68)
                                                                                           wkt-1
This setup is almost identical to that in Auclert, Rognlie and Straub (2018) and, as shown there,
leads to a wage Phillips curve of the form

                          w
                  log(1 + t ) = w  Nt1+ - µw (1 - t )wt Nt Ut +  log(1 + t
                                                                         w
                                                                           +1 ).                                                                (69)

For convenience later on, let's introduce the following shorthand for wage adjustment costs

                                               w                     µw     1          w
                                                                                           2
                                               t =                             log(1 + t ) Nt .                                                 (70)
                                                                   1 - µ w 2 w

Firms.

Let there be a continuum of identical firms that produce differentiated goods using labor and cap-
ital. They own capital, and hire a representative workforce from the labor union. They engage in
monopolistic competition and set the price of their product subject to the usual iso-elastic demand
curve and quadratic adjustment costs. The Bellman equation of firm j is

                                                                      p jt                            µp    1                2
         Jt (k jt-1 , p jt-1 ) =           max                             y jt - wt n jt - i jt -             log(1 +  jt ) Yt
                                   y jt , p jt ,k jt ,i jt ,n jt      pt                           µ p - 1 2 p
                                                                                                           2
                                                                              1            k jt - k jt-1                  Jt+1 (k jt , p jt )
                                                                         -                                     k jt-1 +
                                                                             2      I           k jt-1                      1 + r t +1
                                                                           1- 
                                                     s.t. y jt = Zt kjt-1 n jt
                                                                                            µp
                                                                                        - µp -
                                                                             p jt              1
                                                               y jt =                              Yt
                                                                             pt
                                                                   k jt = (1 - ) k jt-1 + i jt

This is a standard problem that yields the following equilibrium conditions

   · Phillips curve:

                                                                                    1                 1    Yt+1
                          log(1 + t ) =  p mct -                                             +                  log(1 + t+1 ).                  (71)
                                                                                    µp             1 + rt+1 Yt



                                                                                    56
   · Labor demand:
                                                                     Yt
                                                   w t = (1 -  )        mct .                                               (72)
                                                                     Nt

   · Valuation:
                                                                                                  2
                                 Yt+1         K t +1              1                K t +1 - K t           K t +1
          (1 + r t +1 ) Q t =         mct+1 -        - (1 -  ) +                                      +          Q t +1 .   (73)
                                  Kt           Kt                2          I           Kt                 Kt

   · Investment:
                                                                1 K t - K t -1
                                                Qt = 1 +                       .                                            (74)
                                                                 I K t -1

   · Capital law of motion:
                                                   It = Kt + (1 - )Kt-1                                                     (75)

   · Production:
                                                                   1- 
                                                    Yt = Zt Kt -1 Nt                                                        (76)

   · Price adjustment cost:
                                            p         µp    1              2
                                          t =                  log(1 + t ) Yt                                               (77)
                                                   µ p - 1 2 p

   · Dividends:
                                                dt = Yt - wt Nt - It - t                                                    (78)


Policy.

Fiscal policy follows a balanced-budget policy

                                                t wt Nt = rt B g + Gt ,                                                     (79)

Monetary policy follows an interest rate rule

                                                  
                                            it = rt + t + y (Yt - Yss )                                                     (80)
                                                   1 + i t -1
                                        1 + rt =                                                                            (81)
                                                    1 + t
                                            
                                           rt is exogenous.                                                                 (82)


Assets.

The economy has two assets, nominal government bonds and firm equity, both illiquid by default.
The ex-post real return on government bonds is simply rt . Let pt denote the ex-dividend price of
equity. The real return on equity is
                                                    d t +1 + p t +1
                                                                    .
                                                           pt

                                                           57
In the absence of aggregate uncertainty, these assets have to earn the same return and so we get
the following no arbitrage condition

                                                  d t +1 + p t +1
                                           pt =                   .                             (83)
                                                     1 + r t +1

   If bonds and equity are both illiquid, where do liquid assets come from? We assume that there
is a representative financial intermediary endowed with the technology to turn illiquid nominal
assets into liquid nominal assets. This process has a proportional cost  . This simple setup implies
that
                                               b
                                              rt = rt -  .                                      (84)


Market clearing.

The only market clearing conditions not implied implicitly by notation are that of goods and assets

                                                                   w     p
                                Yt = Ct + Gt + It + Pt +  Bt + t + t ,                          (85)
                                              g
                          At + Bt = pt + B .                                                    (86)


Accounting for surprise inflation and capital gains.

When an unanticipated shock hits, the no arbitrage condition (83) will fail for one period due to
surprise inflation and capital gains. Accounting for these effects requires further assumptions on
the illiquid portfolio of households. For simplicity, we assume that all households hold the same
ratio of bonds and equity. This means that the ex-post illiquid return can be written as

                               a     p t -1 d t + p t   B g - B t -1
                          1 + rt =          ·         +              · (1 + r t ).              (87)
                                     A t -1   p t -1       A t -1

This equation holds both in periods with and without unexpected shocks. We could stop here, but
                           a to the unknowns of the DAG. The reason is that it is an input of
then we would have to add rt
the household block that also depends on outputs of the household block. We can avoid this by
replacing (87) with
                                  a     p dt + pt   Bg - B
                             1 + rt =    ·        +        · (1 + r t ).                        (88)
                                        A p t -1      A
The difference is the use of steady-state portfolio shares. These are targeted in the calibration,
and thus effectively exogenous. Importantly, they are the correct shares in period 0, when the
unexpected shock hits. Although they are incorrect in periods t > 0, this does not matter, because
by then the no arbitrage condition (83) is restored.


Calibration. Table B.3 summarizes the calibration of our two-asset model.




                                                    58
            Table B.3: Calibration of our two-asset HANK economy
Parameter                                              Value   Target

Households
                 Discount factor                       0.976   r = 0.0125
                 Inverse IES                           2
  0              Portfolio adj. cost pivot             0.25
  1              Portfolio adj. cost scale             6.416   B = 1.04Y
  2              Portfolio adj. cost curvature         2
  b              Borrowing constraint                  0
  e              Autocorrelation of earnings           0.966
  e              Cross-sectional std of log earnings   0.92
Labor unions
                 Disutility of labor                   2.073   N=1
                 Inverse Frisch elasticity             1
  µw             Steady state wage markup              1.1
  w              Slope of wage Phillips curve          0.1
Firms
  Z              TFP                                   0.468   Y=1
                 Capital share                         0.33    K = 10Y
  µp             Steady-state markup                   1.015   A + B = 14Y
                 Depreciation                          0.02
  p              Slope of price Phillips curve         0.1
Financial intermediary
                Liquidity premium                      0.005
Policy
                 Labor tax                             0.356   budget balance
  G              Government spending                   0.2
  Bg             Bond supply                           2.8
                 Taylor rule coefficient               1.5
  y              Taylor rule coefficient on output     0
Discretization
  ne             Points in Markov chain for e          3
  nb             Points on liquid asset grid           50
  na             Points on illiquid asset grid         70




                                      59
                            Figure B.1: DAG representation of two-asset HANK economy


                     r, Y
                                                                                         i, r,             Fisher eq.
                                             mc                                                               (H 1 )
                                prod.             NKPC- p           finance
             Z, Y, w, r
                                                                              r a ,r b            p
                                         q

    exog. Z, r , G                                                    i                           A, B      asset mkt.
    endog. Y, w, r          r , Y   N                                              HA                     clearing (H2 )
                                                      p, d, r
                        G, w, r                                                                       U

                                                                    mon pol

                                                  equity                                                    NKPC-w
                                fiscal
                                                                                                             (H 3 )

                      Y, r, w                                         , w, N

                                                                 , w, N



DAG and shocks in the two-asset HANK model. Figure B.1 illustrates our preferred DAG for
the two-asset HANK model. For simplicity, the DAG is drawn with only three shocks: to TFP
                       and government spending G . In our estimation, we add to these four
Zt , monetary policy rt                         t
additional shocks: we let the price markup µ p vary over time (a price markup shock), the wage
markup µw vary over time (a wage markup shock), the discount rate of households  vary over
time (a preference shock), and we add a spread r It to the interest rate rt that enters the firm valua-
tion equation (73), and let that spread vary over time (an investment shock).


C     Additional computational details
C.1    Numerical and automatic differentiation details
                                                                          s and d Ds . As discussed
A key implementation question is how to obtain the two objects in (26), dY0        1
                                                                                        s = y T -1
in the main text, given some dx, one starts a backward iteration from T - 1, obtaining y0     T -1- s
    s =  T -1
and 0                                                    s        s              s       s
         T -1-s for all s = 0, . . . , T - 1, and then dY0 = ( d y0 ) Dss and d D1 = ( d 0 ) Dss . There
are two important practical complications:

    1. We only get the correct derivative when dx is infinitesimal.

    2. In typical applications, we have not solved for the steady state solving (10) exactly (i.e. such
      that vss = v(vss , Xss ) exactly), but instead for a steady state such that (10) holds up to some
      numerical tolerance (i.e. such that vss - v(vss , Xss ) < 10-9 ). As a result, iterating back-
                                 s = 0 and d s = 0, even if dx = 0.
      ward will generally give dy0           0


                                                               60
The first issue is about how to do differentiation, and is common to all perturbation methods.
The second issue is more specific to our approach. We now describe three ways to perform dif-
ferentiation--addressing the first issue--and, within each, discuss how to deal with the second
issue.

One-sided numerical differentiation.                 Here, we simply choose some small but non-zero dx and
then iterate backward as described above. As is standard, dx should be chosen to trade off error
from second-order effects (which grow with dx) and from numerical issues like rounding error
(which shrink with dx). In our application, one potential source of the latter error is, as discussed
above, that the steady state is not exact. This will often be worse than the typical rounding er-
ror from floating-point numbers, since we usually pick a numerical tolerance for value function
convergence (e.g. 10-9 ) that is larger than machine precision ( 10-16 ).
     There are two ways to address this issue:

  (a) Do an additional full backward iteration from T - 1 to 0 (a "ghost run") starting from dx = 0,
                                ~ s and 
      and denote the results as y       ~ s . Set dys = ys - y
                                                             ~ s and ds = s -    ~ s.
                                          0          0        0      0     0          0      0      0

  (b) At each step, subtract off v(vss , Xss ) and recenter around the steady state. Starting with the
          shock dx, calculate dv0
                                0 = v ( vss , Xss + dx ) - v ( vss , Xss ). Then, for each s calculate

                                              s             s -1
                                           d v0 = v(vss + dv0    , Xss ) - v(vss , Xss )                              (89)

                                                                                           s =
          Do the same for the functions  and y as well (e.g. at each step s  1 calculate dy0
                    s -1
          y(vss + dv0    , Xss ) - y(vss , Xss )).
                                             s and s are functions of the shock dx , we are using
We can think of approach (a) as follows: if y0     0
                                                                 s / dx and d s / dx for each s.
one-sided numerical differentiation around dx = 0 to calculate dy0            0
Approach (b) is related, but instead effectively uses one-sided numerical differentiation at each
step of the backward iteration.56
     Approach (b) is usually more efficient than (a), since it does not require a full backward itera-
tion from T - 1 to 0 with dx = 0, and instead only requires v(vss , Xss ), y(vss , Xss ), and (vss , Xss ),
which take a single step to compute. Approach (b) is also more accurate, since it corrects for error
in the steady state at each step and does not allow these errors to compound. We therefore use (b)
as our default for one-sided calculations in this paper (with dx = 10-4 ).
     One advantage of (a) is that it may be easier to implement with minimal changes to existing
code, since it involves two complete backward iterations from T - 1 to 0, and does not require
changing the steps themselves as in (89).

Two-sided numerical differentiation.                 Here we have the following two analogues of approaches
(a) and (b) above.
  56 To                                                                                           s / dx, and then use dx ·
          make this interpretation clearer, we could divide the right side of (89) by dx to get dv0
     s -1
( d v0    /dx )
             as an input. Practically, however, this involves unnecessary offsetting divisions and multiplications by dx.


                                                             61
  (a) Iterate backward from T - 1 to 0 for shocks at T - 1 of dx and -dx, denoting the results
             s+   s+         s-   s-                            s = ( ys+ - ys- ) /2 and s = ( s+ -
        by (y0  , 0  ) and (y0  , 0  ), respectively, and set dy0      0     0           0     0
        s-
        0  )/2.

  (b) Iterate backward from T - 1 to 0, recentering around the steady state in each step. Specif-
        ically, starting with the shock dx, calculate dv0
                                                        0 = ( v ( vss , Xss + dx ) - v ( vss , Xss - dx )) /2.
        Then, for s calculate
                                                     s -1                     s -1
                                     s     v(vss + dv0    , Xss ) - v(vss - dv0    , Xss )
                                  d v0 =                                                                           (90)
                                                                  2
                                                                                         s =
        Do the same for the functions  and y as well (e.g. at each step s  1 calculate dy0
                   s -1                     s -1
        (y(vss + dv0    , Xss ) - y(vss - dv0    , Xss ))/2).

Analogous to above, approach (a) effectively does two-sided numerical differentiation on the en-
tire backward iteration process, while approach (b) does two-sided numerical differentiation at
each step of the process. Note that it is no longer necessary to calculate any responses with dx = 0.
      Both approaches (a) and (b) have similar efficiency and accuracy. (b) is in principle more accu-
rate for the same reason as above, since it immediately recenters rather than allowing errors in the
steady state to build up, but in practice this accuracy advantage seems minor. For consistency with
the above, we use approach (b) as our default for two-sided calculations (also with dx = 10-4 ).


Automatic differentiation. Automatic differentiation allows us to calculate the two objects in
        s and d Ds , for infinitesimal dx , getting exact derivatives dY s / dx and d Ds / dx . One option
(26), dY0        1                                                      0              1
is to take whatever code iterates backward from T - 1 to 0, starting with some shock dx, and
simply feed it into an automatic differentiation package, telling it to differentiate with respect to
dx.
      Though this approach works, it also suffers from error in the steady state: since vss is not ex-
actly the same as v(vss , Xss ), the package will be differentiating around a slightly different "steady
state" at each step, which may be inefficient. It is therefore beneficial to apply automatic differ-
entiation to a backward iteration routine that recenters around the steady state at each step, as in
(89), so that differentiation will be done around the same steady state at each step.
      In our implementation, we go slightly further, pre-calculating all derivatives v/v, v/ X ,
y/v, and so on around the steady-state (vss , Xss ), and then using these derivatives to iterate
backward starting with infinitesimal dx. Specifically, we first use the Python automatic differ-
entiation package "jax" to calculate all derivatives.57 Then, we do backward iterations, starting
  57 This required extensive modifications to our code to make it compatible with jax. For instance, jax requires a more
functional style--it does not allow operations that overwrite existing arrays--and it cannot immediately differentiate
our routines written to be compiled by Numba (a Python just-in-time compiler). Further, one major source of inef-
ficiency is that Jacobians like v/v tend to be highly sparse, but jax (like most automatic differentiation packages)
cannot internally use sparse array operations. Although we convert the derivatives provided by jax into SciPy's sparse
matrix representation before doing additional computations with them, jax's internal computations are still slow in
high-dimensional cases because of this limitation. Implementation difficulties of this kind are why we chose numerical



                                                          62
with dv0                                                 s                           0
       0 / dx =  v /  X , and then iterating backward d v0 / dx = (  v /  v ) · ( d v0 / dx ). We similarly
                 s / dx and d s / dx .
calculate each dy0            0


Applying to direct method.           In appendix D.1, we apply one-sided, two-sided, and automatic
differentiation to the direct method of computing columns s of the Jacobian. For one-sided differ-
entiation, we apply the direct method exactly as described at the beginning of section 3.2, calcu-
lating the impulse response to an small shock dx = 10-4 at date s. However, in the spirit of (a)
above, we subtract off the results from a "ghost run" with a shock dx = 0 to eliminate inaccuracy
from an imperfect steady state. For two-sided differentiation, we calculate the impulse responses
to small shocks dx and -dx at date s and then take half the difference between the two. Finally, for
automatic differentiation, we use automatic differentiation to precalculate all derivatives as above,
and use them to evaluate the linearized equations (10)-(12) and obtain a linear impulse response
to a shock at each date s.


C.2    Reiter method implementation

We now briefly describe our implementation of the "Reiter method". The idea is to arrange the
equations governing equilibrium into a system of nonlinear equations with at most a single lead
and a single lag, at which point we can use standard linear rational expectations methods to obtain
the first-order solution.


Krusell-Smith model.          Here we construct a stacked vector Xt of length 2n g + 1, where n g is the
number of points in our grid. This includes:

   · the entire vector vt representing the value function at time t (in our implementation, this is
      the length n g vector giving the derivative of the value function at each point)

   · the distribution Dt+1 excluding the last entry, which equals one minus the other elements
      and is therefore redundant (length n g - 1 )

   · capital Kt (scalar)

   · productivity Zt (scalar)

Note that since in our model, the distribution Dt+1 is determined by information available at time
t, we include it in Xt in line with the usual timing convention for these models.
    We now build a function F(Xt-1 , Xt , Xt+1 , t ) with a 2n g + 1-dimensional output, which in-
cludes all equilibrium conditions:

   · n g entries for the equation (10) that determines vt given vt+1 and the inputs Kt-1 and Zt
      (which together determine rt and wt , entering into the household's problem)
differentiation to be our primary approach. (See Ahn et al. (2018b) for an example of a paper employing a custom-built
automatic differentiation toolkit that makes use of sparsity internally.)


                                                         63
    · n g - 1 entries for the equation (11) that determines Dt+1 given vt+1 , Dt , and the inputs Kt-1
       and Zt (note that again, we drop the last entry, which is redundant since the distribution
       sums to one)

    · 1 entry for the equation (12) that expresses aggregate Kt as the total of individual holdings
       given by Dt+1

    · 1 entry for the assumed AR(1) law of motion log( Zt / Zss ) =  log( Zt-1 / Zss ) +          t   for produc-
       tivity.

Recursive stochastic equilibrium corresponds to the condition Et F (Xt-1 , Xt , Xt+1 , t ) = 0. We use
the automatic differentiation package jax to linearize this as

                                   AEt dXt+1 + BdXt + CdXt-1 + E          t   =0                             (91)

where A, B, and C are (2n g + 1) × (2n g + 1) matrices and E is a (2n g + 1) × 1 vector. (91) is
a standard form for a linear rational expectations model, and can be solved using a variety of
standard techniques. We use Alisdair McKay's Python toolkit, which implements a version of
Sims's gensys algorithm to solve (91).58 This gives us a solution, expressed as the recursive law of
motion
                                               dXt = PdXt-1 + Q      t                                       (92)

where P is a (2n g + 1) × (2n g + 1) matrix and Q is a (2n g + 1) × 1 vector. Note that the first n g
columns of P are all zeros, since vt-1 is not a state and has no direct impact on Xt . We can then
unstack (92) to obtain the linear law of motion relating the individual components of Xt (vt , Dt+1 ,
Kt , and Zt ) to Dt , Kt-1 , Zt-1 , and   t.
    To obtain the impulse response to a unit shock to         0   (i.e. a unit productivity shock) for compar-
ison to our sequence-space solution, we plug dXt-1 = 0 and               0    = 1 into (92) and iterate forward
to get dX0 , dX1 , . . .

One-asset HANK model.            Since our implementation here is mostly the same as above, we will
only describe the differences.
    The stacked vector Xt now has length 2n g + 4, including n g entries vt giving the derivative of
the value function at each grid point, the n g - 1 first entries of Dt+1 , and then wt , Yt , t , rt , and Zt .
    The function F (Xt-1 , Xt , Xt+1 , t ) now also has output of length 2n g + 4, including n g entries
for (10), n g - 1 entries for (11), 2 entries for (12) corresponding to the aggregation of assets and
labor (and clearing in the respective markets), 1 entry for the Phillips curve, 1 entry for the AR(1)
law of motion log( Zt / Zss ) =  log( Zt-1 / Zss ) +    t   for productivity, and 1 entry for the combined
                                                                          + 
Taylor rule and Fisher equation giving the ex-post real rate, rt = (1 + rt -1 t-1 ) / (1 + t ) - 1.
    Note that in addition to the equations for vt , Dt+1 , and Zt , we have one equation in F for each
of the targets in figure 3 (asset market clearing, labor market clearing, and the Phillips curve), but
  58 See   https://alisdairmckay.com/Notes/HetAgents/index.html.


                                                      64
also an additional equation for rt . Similarly, we have one entry in Xt for each of the unknowns in
figure 3 (Y , w, and  ), but also rt as an unknown. We calculate each target in F by starting with
the unknowns and progressively calculating the date-t output of each block in figure 3. Since we
need rt+1 as an input to the calculation of the Phillips curve59 , however, we include r as part of X
and add the equation from the "monetary" block explicitly to F.


C.3      Two-asset household model algorithm

In this section we describe a generic two-asset household model with convex adjustment costs in
an illiquid asset whose return is superior to that of a liquid asset, in the spirit of Kaplan, Moll
and Violante (2018). We then describe an efficient algorithm, based on the endogenous grid points
approach of Carroll (2006), to solve this model.


Generic setup. Households' individual state variables are (exogenous) income z  {z1 , . . . , zm },
liquid assets b  [b, ), and illiquid assets a  [0, ). Adjusting the illiquid account incurs a
convex cost ( at , at-1 ). The Bellman equation is

                      Vt (zt , bt-1 , at-1 ) = max u(ct ) + Et Vt+1 (zt+1 , bt , at )
                                                  c t , bt , a t
                                                          a                    b
                           s.t. ct + at + bt = zt + (1 + rt ) a t -1 + ( 1 + r t ) bt - 1 -  ( a t , a t - 1 )
                                                at  0,              bt  b .

Let the adjustment cost function be specified as

                                                1 a t - (1 + r t   a )a           2
                                                                        t -1                 a
                             ( a t , a t -1 ) =           a                           [(1 + rt ) a t -1 +  0 ]               (93)
                                                 2 (1 + r t ) a t -1 +  0

with 0 , 1 > 0 and 2 > 1. Note that ( at , at-1 ) is bounded, differentiable, and convex in the
choice at .60


First-order and envelope conditions.                               The Bellman equation can be rewritten more compactly as

                                                      a                    b
            Vt (zt , bt-1 , at-1 ) = max u zt + (1 + rt ) a t -1 + ( 1 + r t ) bt - 1 -  ( a t , a t - 1 ) - a t - bt
                                     bt , a t

                                                + t (bt - b) + µt at + EVt+1 (zt+1 , bt , at )
  59 This appears in the nonlinear   F but actually falls out to first order, so is irrelevant to the calculation we will perform.
  60 The   functional form (93) is chosen for concreteness; more generally, we could have a mix of terms with different
2 > 1.




                                                                          65
The first-order conditions with respect to bt and at are

                                                 u (ct ) = t + Eb Vt+1 (zt+1 , bt , at ),                   (94)

                          u (ct ) 1 + 1 ( at , at-1 ) = µt + E a Vt+1 (zt+1 , bt , at ),                    (95)

and the envelope conditions are

                                                             b
                            b Vt (zt , bt-1 , at-1 ) = (1 + rt ) u ( c t ),                                 (96)
                                                             a
                             a Vt (zt , bt-1 , at-1 ) = 1 + rt -  2 ( a t , a t -1 ) u ( c t ).             (97)

It's convenient to define the post-decision value function Wt (zt , bt , at )  Et Vt+1 (zt , bt , at ). Note that
the partials of this are just what we have on the right-hand side of the Euler equations (94) and
(95).


Algorithm. The algorithm is a variant of the endogenous grid point method of Carroll (2006) that
we developed for this two-asset problem. The key trick is, whenever the household is partially
constrained, to include Lagrange multipliers in the backward iteration. We also exploit the fact
that, endogenously, the constraint on the illiquid asset will never be binding unless the constraint
on the liquid asset is also binding (otherwise, a simple variation will improve utility)--and if both
are binding, then the policy is trivial.
    Overall, we start from a guess for the (discretized) partials of the value function and iterate
backward until convergence. Throughout, we will use (z , b , a ) to refer to tomorrow's grid and
(z, b, a) today's grid.

   1. Initial guess. Guess Va (z , b , a ) and Vb (z , b , a ).

   2. Common z  z. By definition

                                             Wb (z, b , a ) = Vb (z , b , a )                               (98)
                                             Wa (z, b , a ) = Va (z , b , a )                               (99)


   3. Unconstrained a  a. Assuming that no constraints bind, t = µt = 0, and (94) and (95)
        become

                                                             u (c) = Wb (z, b , a ),                       (100)

                                         u (c) 1 + 1 ( a , a) = Wa (z, b , a ).                            (101)

        Combine these to get

                                                            Wa (z, b , a )
                                 0 = F ( z, b , a, a )                     - 1 - 1 ( a , a )               (102)
                                                            Wb (z, b , a )


                                                           66
  which characterizes a (z, b , a). Use this to map Wb (z, b , a ) into Wb (z, b , a) by interpolation,
  then compute consumption as

                                                                               1
                                              c(z, b , a) = Wb (z, b , a)-  .                                       (103)


4. Unconstrained b  b. Now using a (z, b , a) and c(z, b , a) from the previous step, use the
  budget constraint to obtain

                                c ( z, b , a ) + a ( z, b , a ) + b - (1 + r a ) a +  ( a ( z, b , a ), a ) - z
            b ( z, b , a ) =                                                                                    .
                                                                    1 + rb

  We invert this function via interpolation to get b (z, b, a). The same interpolation weights can
  be used to do a (z, b , a)  a (z, b, a).

5. Liquidity constrained a  a. This branch is analogous to the unconstrained case. Assum-
  ing that the liquidity constraint is binding, t > 0, and (94) and (95) become

                                                          u (c) =  + Wb (z, 0, a ),

                                      u (c) 1 + 1 ( a , a) = Wa (z, 0, a ).

  To help with scaling, let us define   /Wb (z, 0, a ) and rewrite the first equation as

                                              u (c) = (1 +  )Wb (z, 0, a ).

  Divide and rearrange to get

                                                         1 Wa (z, 0, a )
                          0 = F ( z,  , a, a )                            - 1 - 1 ( a , a ).                        (104)
                                                       1 +  Wb (z, 0, a )

  We solve this for a (z,  , a), and compute consumption as
                                                                                    1
                                                                                   -
                                         c(z,  , a) = (1 +  )Wb (z,  , a)               .                           (105)


6. Liquidity constrained   b. Now using a (z,  , a) and c(z,  , a) from the previous step, use
  the budget constraint to obtain

                                 c ( z,  , a ) + a ( z,  , a ) + b - (1 + r a ) a +  ( a ( z,  , a ), a ) - z
              b ( z,  , a ) =                                                                                 .
                                                                    1 + rb

  We invert this function via interpolation to get  (z, b, a). The same interpolation weights can
  be used to map a (z,  , a) into a (z, b, a). We already know that b (z, b, a) = b.

7. Update guesses. The final b (z, b, a) is the element-wise maximum of its unconstrained and
  liquidity-constrained counterparts. Replace the unconstrained a (z, b, a) with constrained


                                                          67
          one at the exact same points. Compute consumption from the budget constraint as

                c ( z, b, a ) = z + (1 + r a ) a + (1 + r b ) b -  ( a ( z, b, a ), a ) - a ( z, b, a ) - b ( z, b, a ).   (106)

          Finally use the envelope conditions (96) and (97) to update the guesses

                                    Vb (z, b, a) = (1 + r b )c(z, b, a)- ,                                                 (107)

                                    Va (z, b, a) = 1 + r a - 2 a (z, b, a), a             c ( z, b, a ) -  .               (108)

          Go back to step 2, repeat until convergence.


C.4       Efficient multiplication of simple Jacobians

One important detail underlying the speeds in table 3 is a set of special routines that efficiently
handle the Jacobians of simple blocks. These simple blocks comprise the majority of our DAGs.
Their Jacobians are easy to obtain to high accuracy (for instance, with symmetric numerical differ-
entiation), and have a special sparse structure: they can be expressed as linear combinations of a
few shift operators Si on sequences.
    For positive i, Si maps ( x0 , x1 , . . .)  (0, . . . , 0, x0 , x1 , . . .), with i zeros inserted at the beginning,
and for negative -i, S-i maps ( x0 , x1 , . . .)  ( xi , xi+1 , . . .). The former takes an i-period lag in
sequence space, while the latter takes an i-period lead in sequence space.61 For instance, in the
one-asset HANK economy depicted in figure 4, the Jacobian J H1 , of the Phillips curve condition
                                                        1         62
with respect to price inflation  is S0 -               1+r S -1 .
    For the most part, these operators obey simple rules: if i and j are both positive, Si S j = Si+ j ,
and so on. However, as is well known from an older literature that works with the lag algebra (e.g.
Whiteman 1983), the S are not quite closed under multiplication. To take the simplest example,
S1 S-1 , a one-period lag of a one-period lead, maps ( x0 , x1 , x2 , . . .)  (0, x1 , x2 , . . .), zeroing out the
first entry of a sequence and leaving everything else unchanged. Fortunately, we have found a
more general set of operators that includes the S and is closed under multiplication following an
easy-to-compute rule, as we derive in the following proposition.

Proposition 4. Let Si be the shift operator on sequences, and Zm be the "zero" operator that replaces the
first m entries of a sequence with zeros. If we define
                                                              
                                                              S Z
                                                                   i   m   i>0
                                                    Q i ,m                                                                 (109)
                                                              Z S
                                                               m i         i<0

then Qi,m Q j,n = Qk,l , where
                                                              k = i+j                                                      (110)
  61 In   matrix form, Si has zeros everywhere, except for ones on the ith diagonal below the main diagonal.
  62 This                                                             1
           corresponds to a linearized curve of the form t = . . . + 1+ r Et  t +1 .



                                                                  68
and                              
                                  max(m - j, n)                        i, j  0
                                 
                                  max(m, n) + min(i, - j)              i  0, j  0
                                 
                              l = max(m - i - j, n)                    i  0, j  0, i + j  0                              (111)
                                 
                                 max(n + i + j, m)                     i  0, j  0, i + j  0
                                 
                                 
                                 max(m, n + i )
                                 
                                                                       i, j  0

      This proposition nests the shift operators Si in a more general class of operators Qi,m .63 This has
two advantages. First, it makes multiplying the Jacobians of simple blocks vastly more efficient:
rather than doing matrix multiplication with large T × T matrices, we just need to apply rules
(110) and (111) a few times. Second, it is computationally easy to multiply Qi,m and an ordinary
matrix Jacobian (or vector), since this is a combination of shifting and zeroing elements. Together,
these features make forward accumulation on the DAG, which consists mostly of simple blocks,
vastly more efficient.
      In our online code, we implement this by simply overriding the matrix multiplication operator,
so that sparse linear combinations of Qi,m and ordinary matrices can be used interchangeably. With
this in place, the methods of section 4.3 can be applied without any outwardly visible modification.
      Exploiting sparsity has played a prominent role in both the heterogeneous-agent literature (e.g.
Achdou, Han, Lasry, Lions and Moll 2020) and the literature on solving for perfect-foresight paths
using Newton's method (e.g. Juillard 1996). Our approach builds on the latter, but our much more
compact representation of Jacobians offers additional efficiencies. For instance, to store 0.5 · Q1,1 ,
we only need a few numbers, while a conventional T × T sparse matrix representation not taking
advantage of this structure would need T - 2 separate entries, and still create some truncation
error.


Proof of proposition 4. Here, we derive the rules for multiplication of the operator (109), where
Si is the shift operator on sequences by i and Zm zeros out the first m elements of sequences,
by doing case-by-case analysis on the product Qi,m Q j,n . In our derivation, we will exploit the
following fact about multiplication of Si :
                                                 
                                                  S Z          i > 0, j < 0, i + j > 0
                                                  i+ j - j
                                                 
                                      Si S j =    Zi Si+ j     i > 0, j < 0, i + j < 0
                                                 
                                                 S             otherwise
                                                 
                                                    i+ j


and the rules S-i Zj = Zmax( j-i,0) S-i and Zj Si = Si Zmax( j-i,0) for multiplication of S and Z.
  63 The   matrix representation of Qi,m is the same as that of Si , except that the first m entries on the diagonal are zeros.




                                                               69
   Case 1: positive i, positive j. Here we have

                                     Qi,m Q j,n = Si Zm S j Zn
                                               = Si S j Zmax(m- j,0) Zn
                                               = Si+ j Zmax(m- j,n)
                                               = Qi+ j,max(m- j,n)            (112)

   Case 2: positive i, negative j. Here we have

                                       Qi,m Q j,n = Si Zm Zn S j
                                                  = Si Zmax(m,n) S j

If i + j > 0, then we write
                                      Zmax(m,n) S j = S j Zmax(m,n)- j

and then

                                 Si Zmax(m,n) S j = Si S j Zmax(m,n)- j
                                                  = Si+ j Z- j Zmax(m,n)- j
                                                  = Si+ j Zmax(m,n)- j
                                                  = Qi+ j,max(m,n)- j

If i + j < 0, then we write
                                      Si Zmax(m,n) = Zmax(m,n)+i Si

and then

                                  Si Zmax(m,n) S j = Zmax(m,n)+i Si S j
                                                  = Zmax(m,n)+i Zi Si+ j
                                                  = Zmax(m,n)+i Si+ j
                                                  = Qi+ j,max(m,n)+i

Both these cases boil down to the simpler form

                                   Qi,m Q j,n = Qi+ j,max(m,n)+min(i,- j)     (113)

   Case 3: negative i, positive j. Then we have

                                         Qi,m Q j,n = Zm Si S j Zn
                                                    = Zm Si+ j Zn


                                                     70
Figure C.1: The concept of a solved block, applied to the production block of our two-asset HANK model

                                                                                 Investment
                                                                                     H1
                                                        r, Z
                                                                          N, mc
                        exog. Y, w, Z, r      Y, w, Z, K        labor
                         endog. K, q                           demand
                                                                           N, mc

                                                            K, q
                                                                                 Valuation
                                                                                    H2

                                   Y, w, Z, r                      K, q, N, mc
                            ···                    production                    ···




If i + j > 0, then we write Zm Si+ j = Si+ j Zmax(m-i- j,0) and get

                                           Qi,m Q j,n = Qi+ j,max(m-i- j,n)                      (114)

If i + j < 0, then we write Si+ j Zn = Zmax(n+i+ j,0) Si+ j and get

                                           Qi,m Q j,n = Qi+ j,max(n+i+ j,m)                      (115)

   Case 4: negative i, negative j. Then we have

                                       Qi,m Q j,n = Zm Si Zn S j
                                                    = Zm Zmax(n+i,0) Si S j
                                                    = Zmax(m,n+i) Si+ j
                                                    = Qi+ j,max(m,n+i)                           (116)

Combined, (112)-(116) give (110) and (111) in proposition 4.


C.5   Solved blocks

The two-asset model introduced via the DAG in figure B.1 included a green "production" block.
Production with adjustment costs is well-known to involve the joint determination of investment
and q, and it is natural to solve for these two jointly inside a block. This leads us to introduce a
"solved block" concept, as follows:

Definition 5. A solved block b has an underlying sequence-space model with shocks Z~ , unknowns


                                                           71
~ , outputs O
U           ~ , and targets T
                            ~ , and an equilibrium that is locally unique around the steady state,
where we define:

   1. The inputs of the solved block to be the shocks of the underlying sequence-space model:
      Ib  Z ~.

   2. The outputs of the solved block to be the unknowns and outputs, minus targets, of the
      underlying sequence-space model: Ob  U  ~  (O
                                                  ~ \T
                                                     ~ ).

   3. For each output o  Ob , the function ho ({xi }iIb ) is the locally unique equilibrium path of o
       in the underlying sequence-space model given sequences {xi }iZ~ for the exogenous shocks
       in that model (recalling that Ib = Z~ ).

Informally, a solved block is a sequence-space model, turned into a block. Figure C.1 illustrates
how this concept works in the case of the production block of our two-asset HANK model. Given
the exogenous inputs Y , w, Z, r, the solved block solves for the endogenous paths for K and Q that
jointly satisfy the q theory equations, so that its outputs are K, Q as well as labor demand N and
marginal costs mc.


C.6    Fast solution for individual impulse responses

In the case where we are only interested in a single impulse response, we only need to do full
forward accumulation (29) for i  U to obtain o  H, which gives HU = JH,U . Then, to deal with
shocks, we do forward accumulation on vectors rather than matrices, writing

                                            J o ,Z d Z =         J o ,m J m,Z d Z                                 (117)
                                                           mIb


This gives HZ dZ = JH,Z dZ. We then solve the linear system HU dU = -HZ dZ to obtain dU.
Finally, to obtain equilibrium impulse responses dXo for o / Z  U , we need to calculate

                                              d X o = J o ,Z d Z + J o ,U d U                                     (118)

The first term, Jo,Z dZ, has already been calculated in (117). For the second term, we do forward
accumulation on vectors as in (117), just solving for Jo,U dU rather than Jo,Z dZ.64
    Table C.1 shows the time each step of this process takes for our three models, starting from the
Jacobians J for each model block. In general, this process is very cheap, with the only costly parts
being the steps that involve matrices rather than vectors: forward accumulation in step 1 to get
HU = JH,U , and second, solving the linear system HU dU = -HZ dZ for dU in step 3.
  64 Another approach is to use the Jo,U that we already calculated as part of the initial forward accumulation to obtain

HU = JH,U , and directly apply these to dU. This approach has similar (and low) cost, but is less useful in general
because it does give o that were not necessary in calculating HU .




                                                            72
                              Table C.1: Computing times for impulse responses.

                                                      Krusell-Smith        one-asset HANK        two-asset HANK

   Total                                                       0.9 ms              15.5 ms               30.1 ms
      step 1 (forward accumulate HU )                            0.4 ms                6.2 ms            19.7 ms
      step 2 (forward accumulate   J o ,Z d Z)                   0.1 ms                0.1 ms                 0.4 ms
      step 3 (solve linear system for dU)                        0.4 ms                9.0 ms                 8.9 ms
      step 4 (forward accumulate Jo,U dU, get dXo )              0.1 ms                0.3 ms                 1.2 ms

   No. of unknowns                                                   1                     3                      3
   No. of exogenous shocks                                           1                     3                      7


                           Table C.2: Computing times for G, efficient vs. flat DAG.

                                                 Krusell-Smith        one-asset HANK        two-asset HANK

           Total with efficient DAG                     4.7 ms               57.8 ms               198.0 ms
           Total with flat DAG                        33.0 ms               167.5 ms              1452.7 ms

           No. of unknowns (efficient DAG)                  1                      3                     3
           No. of unknowns (flat DAG)                       3                      7                    18
           No. of exogenous shocks                          1                      3                     7



   Since these steps are costly because they involve the shock-independent matrix HU , there are
clear economies of scale from computing the impulse response to multiple shocks. We can cal-
                                                    1
culate HU a single time, and then also calculate H-
                                                  U (or, better, an LU factorization of HU ) a
single time, at which point the marginal cost of computing additional impulse responses is very
low. This is the approach we use in section 5.3 to evaluate the likelihood when redrawing model
parameters, since this involves finding impulse responses to each shock simultaneously. Taking
this idea to its fullest extent, we can calculate the impulse responses to all shocks simultaneously,
which is the "G matrix" approach in section 4.3.


C.7   Comparison of computing times with efficient and flat DAG

How important is the pattern of variable substitution along the DAG to efficiently solving heterogeneous-
agent models? Table C.2 compares the times needed to compute the G matrices using our pre-
ferred DAG ("efficient DAG") and using no substitution of endogenous variables ("flat DAG").
The latter approach results in a greater number of unknowns and is substantially slower, by a
factor that ranges from 2 to 10. The reason is that the dimensionality of the linear system becomes
so high that solving it is quite costly.


C.8   Recovering the state-space law of motion

Here we explain how to recover the state-space law of motion in the Krusell-Smith model with
AR(1) TFP shocks of persistence . The state then consists of the n g points of the distribution and


                                                          73
the two aggregate states Kt-1 and Zt-1 , so the law of motion reads

                                     D t +1                  Dt
                                                                    

                                       Kt      = A  K t -1  + B                                           (119)
                                                           
                                                                       t
                                       Zt           Zt-1

with A an n g + 2 × n g + 2 matrix indicating the dependence of states on past states, and B an
 n g + 2 × 1 vector indicating how states respond to innovations           t   to the TFP process. To elicit A
and B from a sequence-space model, we treat the initial states ( 0 , D0 , K-1 and Z-1 ) as exogenous
"shocks" and then look for their effects on the state the following period, (D1 , K0 , Z0 ).
   Using the sequence-space model, we can compute the effect of shocks to ( 0 , D0 , K-1 and
Z-1 ) on on the time paths of targets dH. This is straightforward to do for aggregates, while for
the distribution D0 , these perturbations are directly given by the expectation vectors EtK from
                                                                          1
definition 1. Next, we solve for the equilibrium path of capital dK = -H-
                                                                        K d H that results from
the perturbation. The date-0 element of this vector delivers the rows of A and B corresponding
to K. Finally, using the general equilibrium Jacobian matrices J w,K and J r,K , we can recover the
effect on the time paths of wages and interest rates dw and dr for all shocks ( 0 , D0 , K-1 and Z-1 ).
                                r d r + D w d w, where the D vectors are discussed in section 3.2,
Then, using the equation dD1 = D1        1                  t
we obtain the effect of all shocks ( 0 , D0 , K-1 and Z-1 ) on the distribution at date 1. This gives
us the first n g rows of A and B. Finally, the last row is just the exogenous law of motion of the
shock process. Altogether, this procedure allows us to construct a state-space law of motion for the
Krusell-Smith model. The procedure can easily be generalized to any alternative sequence-space
model with a known state space.


C.9   Simulating panels of individuals

Here, we briefly describe how to simulate a panel of individuals. The first option is to recover the
state-space law of motion, as described at the end of section (4.3), augmented with policies. Then,
one can simulate using the state space.
   The second option is to recover the MA for policies. For example, in the Krusell-Smith model,
the MA for the capital policy, truncated to T , in response to innovations          t   to TFP, takes the form

                                                       T
                                              dkt =    Ks     t-s                                         (120)
                                                      s =0


where the ith entry in the vector dkt corresponds to the change in the capital policy of households
in state i. Hence, in order to simulate a panel of individuals, we need to recover the N × 1 vectors
Ks . This can be done as follows. Using the policy function symmetry property from Lemma 1, we




                                                      74
know that
                                                                                                                
  d k0                                               dw0                                                 dr0
            k0                 k0       k0
                                                     k                            k0      k0
 d k1                                          dw1                                                dr1 
                                                                                                      
                                                       0
           w                   w1       w2           r0                          r1      r2
           0
                                                                                                      
 dk                            k0       k0     dw                                 k0      k0      dr 
     2  =  0                   w0       w1       2 + 0                           r0      r1         2 
 .                                             .                                                  . 
 .         0                   0        k0     .     0                            0       k0      .
 .                                             .                                                  . 
                                                                                                      
                                        w0                                               r0

                                                                                                                                             
                                                         dw0        0       0                                             dr0    0       0
                                                                           ..                                                           .. 
                                                                                                                                             
                                                    dw1 dw0
                                                                              .                                           dr1 dr0
                                                                                                                                           . 
                                                                           ..                                                           .. 
                                                                                                                                             
                      k0       k0      k0                                     . +           k0         k0     k0                           . 
             =                               · · ·  dw2 dw1                                                        · · ·  dr2 dr1        (121)
                                                                                                                         
                      w0       w1      w2                                                  r0         r1     r2
                                                                           ..                                                           .. 
                                                                                                                                             
                                                    dw3 dw2                   .                                           dr3 dr2          . 
                                                                                                                         
                                                     .
                                                     .   .
                                                         .                 ..                                              .
                                                                                                                           .   .
                                                                                                                               .        ..
                                                                                                                                             
                                                     .   .                    .                                            .   .           .

The derivatives of the first-period policy k0 with respect to wt and rt are byproducts of step 1 of
the fake news algorithm. Further, from the procedure to recover the MA representation described
in section 5.1, we obtain the matrices Mw, and Mr, satisfying
                                                                                                             
                              dw0                           0              dr0                           0
                            dw1                                          dr1 
                                                                                                     
                                                       1                                           1 
                                                                                                     
                                     w,
                                                                         2  = Mr,
                            dw                                           dr 
                              2  = M                   2                                           2                            (122)
                                                                                                     
                           
                            .                          .                 .                         . 
                            .                          .                 .                         .
                            .                          .                 .                         . 
                                                                                                     



Combining (121) and (122) delivers the coefficients Kt in (120). Note that equation (121) is fast
to implement, since it involves a multiplication of N × T matrices by T × T matrices that can be
formed efficiently from (122).
    Finally, to simulate a panel of individuals from the MA for policies, one can then take these
perturbed policy functions and apply them to simulated individuals.


C.10    Fast Fourier transform to compute analytical second moments.

Consider any sequences a0 , . . . , a T -1 and b0 , . . . , bT -1 of real scalars. If we define the sequences

                                     ^0, . . . , a
                                    (a            ^ 2T -2 ) = ( a0 , . . . , a T -1 , 0, . . . , 0)
                                     ^ 0, . . . , b
                                    (b            ^ 2T -2 ) = (b0 , . . . , bT -1 , 0, . . . , 0)

to be a and b each padded by T - 1 zeros, then

                                                                                       2 T -2
                               a 0 bu + a 1 bu + 1 + . . . + a T - 1 - u b T - 1 =                ^ u+
                                                                                                ^ b
                                                                                                a                               (123)
                                                                                        =0



                                                                 75
      ^ u+  b
where b     ^ u+          - (2 T -2)   when u +
                                         2T - 2. It then follows from the standard properties of
the discrete Fourier transform F that for any u  0, . . . , T - 1

                                          2 T -2
                                                     ^ u + = F -1 F ( a
                                                   ^ b
                                                   a                           ^)
                                                                      ^ ) · F (b                                       (124)
                                                                                       s
                                           =0


where  denotes complex conjugation.65
    Since the discrete Fourier transform is a linear operator, we can extend this method to apply
to the matrices dX0 , . . . , dX T -1 in (35), where we interpret F as applying element-by-element to a
sequence of matrices. Letting dX       ^ 0 , . . . , dX
                                                      ^ 2T -2 denote the sequence padded with zeros like above,
we have from (123) and (124), substituting u = t - t, that

              T -1- ( t - t )
                                (dXs )(dXs+t -t )      = [dX0 ][dXt -t ] + . . . + [dXT -1-(t -t) ][dXT -1 ]
                   s =0

                                                       =                ^ ) F (dX
                                                             F -1 F ( d X       ^ )                                    (125)
                                                                                       t -t

       ^ is the stacked sequence dX
where dX                           ^ 0 , . . . , dX                        ^ is applied individually to
                                                  ^ 2T -2 , the transpose dX
each matrix in the sequence, and F (dX  ^ ) F (dX    ^ ) is the product of each pair of matrices in the
frequency-by-frequency sequence.66
    We simply apply (125), using the fast Fourier transform for F , to calculate the covariances
in (35) for each t - t. Since the two key operations--the FFT and matrix multiplication--have
extremely efficient implementations widely available, this can be done very quickly, taking only a
few milliseconds in table 4 for the examples in this paper. It is far faster than a naive calculation
of the sum in (35).
    This procedure is closely related to the standard FFT approach to calculating the empirical au-
tocovariance function (although many implementations only apply to 1-dimensional series, miss-
ing the efficiencies from exploiting linearity in equation (125)).67 It is also similar to the standard
formulas for the spectral density of an MA, and for inverting this spectrum (see e.g. Hansen and
Sargent 1981).


D      Evaluation of accuracy
D.1     Accuracy of alternative methods to compute J

Figure D.1 verifies the relative accuracy of various methods for computing the Jacobian of ag-
gregate assets with respect to the interest rate (J K,r or J A,r ) in our Krusell-Smith and one-Asset
  65 The padding with zeros to create a         ^ is necessary so that the wraparound b
                                          ^ and b                                     ^ s+ terms for large s + do not affect
the sum.
  66 Since the inputs are real, the full transform is redundant and we can deal only with the first T entries; the final T - 2

are complex conjugates of entries 1 through T - 1. This economizes on the time for F and also for matrix multiplication.
  67 For instance, in the Python "statsmodels" package, the now-default "fft=True" option uses the FFT to calculate the

autocovariances of a one-dimensional time series.


                                                                76
                         Figure D.1: Accuracy of methods for computing J : distance of columns from direct, auto.diff. method

                                                                                                                       Krusell-Smith model

                                          (a) Column s = 0                                                                 (b) Column s = 50                                                                (c) Column s = 100
                                                                                                           10-3
                         10-5
                                                                                                                                                                                                10-4

                         10-7                                                                              10-5
                                                                                                                                                                                                10-6
                                                                                                           10-7
vs Direct, auto. diff.




                                                                                  vs Direct, auto. diff.




                                                                                                                                                                       vs Direct, auto. diff.
                         10-9
                                                                                                                                                                                                10-8

                         10-11                                                                             10-9
                                                                                                                                                                                                10-10

                         10-13                                                                             10-11                                                                                10-12


                         10-15                                                                             10-13                                                                                10-14


                         10-17                                                                             10-15                                                                                10-16


                                 0   50       100     150       200     250                                        0       50        100          150    200     250                                    0   50    100      150     200      250
                                                    Time t                                                                                      Time t                                                                   Time t




                                                             Fake-news, 1-sided                                    Direct, 1-sided                Fake-news, 2-sided                            Direct, 2-sided         Fake-news, auto. diff.




                                                                                                                       One-asset HANK model

                                          (e) Column s = 0                                                                  (f) Column s = 50                                                               (g) Column s = 100
                         10-4                                                                                                                                                                   10-3
                                                                                                           10-4
                         10-6                                                                                                                                                                   10-5
                                                                                                           10-6
                                                                                                                                                                                                10-7
                         10-8
vs Direct, auto. diff.




                                                                                  vs Direct, auto. diff.




                                                                                                                                                                       vs Direct, auto. diff.
                                                                                                           10-8
                                                                                                                                                                                                10-9
                         10-10
                                                                                                           10-10
                                                                                                                                                                                                10-11
                         10-12
                                                                                                           10-12
                                                                                                                                                                                                10-13
                         10-14
                                                                                                           10-14                                                                                10-15
                         10-16
                                                                                                           10-16                                                                                10-17

                                 0   50       100     150       200     250                                        0       50        100          150    200     250                                    0   50    100      150     200      250
                                                    Time t                                                                                      Time t                                                                   Time t




                                                             Fake-news, 1-sided                                    Direct, 1-sided                Fake-news, 2-sided                            Direct, 2-sided         Fake-news, auto. diff.



HANK models. These are the two models for which it is feasible for us to compute the model
with automatic differentiation. Our benchmark is the model computed using the direct method
under automatic differentiation, which we will refer as the "true" impulse response. The impulse
response in levels for the Krusell-Smith model are then those displayed in figure 2, panel (a). For
the one-asset HANK model, the levels are very similar. Here we focus on the differences between
various methods, for columns s = 0, 50, 100.68
                            We first compare impulse response obtained using our fake news algorithm under automatic
differentiation to the "truth". The purple line on all graphs shows errors of the order of 10-14 . In
other words, the direct and the fake news method yield the same answer to machine precision:
this verifies Proposition 1.
                            Next, we compare the impulse response obtained with one-sided numerical differentiation
(blue and orange lines). There, the errors can get as large as 10-3 , or 0.01% of the peak of the level
response (which is around 10). Two-sided numerical differentiation (green and red lines) mitigate
                     68 Using        the sup norm over the entire Jacobian, as well as other Jacobians obtained via this method, yields the same
findings.


                                                                                                                                           77
this error by one to two digits of accuracy. In practice, two sided numerical differentiation is just
as simple to implement as one-sided numerical differentiation and only twice as costly in terms of
computation time, so this may provide a useful alternative when very good accuracy is required.
   Finally, we note that, unless automatic differentiation is used, the fake news method actually
generally has better performance than the direct method. This is because it imposes some of the
linearity implications of the true first-order derivative. Hence, the fake news impulse response is
not only around T times faster to compute than the direct impulse response, it also tends to be
more accurate.


D.2   Equivalence between SSJ and Dynare for representative-agent models

In order to illustrate the accuracy of our routines to calculate impulse responses for representative-
agent models, here we perform two tests of the accuracy of impulse responses on two classic rep-
resentative agent models. Specifically, we simulate the Smets and Wouters (2007) model and the
benchmark model described in Herbst and Schorfheide (2015), with the parameters at the esti-
mated mode presented in these sources, using both our method and Dynare. Figure D.2 compares
the impulse responses of output to all shocks for the Smets-Wouters exercise: the left panel shows
the level of the impulse responses, and the right panel displays the difference to Dynare. Figure
D.3 repeats this exercise with the Herbst-Schorfheide model. As can be seen, our method deliv-
ers the same impulse responses for these benchmark representative-agent models with very high
accuracy.


D.3   Accuracy of likelihood computation for representative-agent models

Here, we continue the exercise of section D.2 by showing that, for both the Smets and Wouters
(2007) model and Herbst and Schorfheide (2015) model, estimating the posterior mode on the
original dataset yields the same answer with our method as it does with the routines offered in
Dynare (which uses the Kalman filter on a state-space representation of the model). Table D.1
shows that the posterior mode is identical to three digit accuracy. As discussed in the main text,
this verifies that our method to compute the likelihood for these benchmark models is accurate.




                                                 78
                                Figure D.2: Equivalence between SSJ and Dynare for the Smets and Wouters (2007) model.

                       (a) Impulse responses of output to all shocks                                                                      (b) Difference to Dynare

                                                                                                                             10-3
                       0.75
                                                                                                                             10-5
                       0.50
% deviation from ss




                                                                                                       % deviation from ss
                                                                                                                             10-7
                       0.25
                                                                                                                             10-9
                       0.00

                      -0.25                                                                                                  10-11

                      -0.50                                                                                                  10-13

                      -0.75                                                                                                  10-15
                                0         10    20            30       40         50                                                 0      10         20            30   40   50
                                                     Time t                                                                                                 Time t


                                                Productivity                Gov. spending              Discount factor                               Wage markup
                                                Monetary                    Investment                 Price markup




                        Figure D.3: Equivalence between SSJ and Dynare for the Herbst and Schorfheide (2015) model.

                       (a) Impulse responses of output to all shocks                                                                      (b) Difference to Dynare


                                                                                                                             10-14
                      0.6
% deviation from ss




                                                                                                       % deviation from ss




                      0.4                                                                                                    10-15


                      0.2
                                                                                                                             10-16

                      0.0

                                                                                                                             10-17
                            0        10        20            30        40         50                                                 0      10         20            30   40   50
                                                    Time t                                                                                                  Time t



                                                                   Productivity             Monetary                                 Gov. spending




                                                                                            79
      Table D.1: Estimated parameters for the Smets-Wouters and Herbst-Schorfheide economies

     Model                Method                                              Parameters

                                             a          a           b             b        g         g          I       I

                          SSJ              0.446     0.978        0.246      0.250      0.589      0.971      0.461   0.662
     Smets-Wouters        Dynare           0.446     0.978        0.245      0.252      0.589      0.970      0.460   0.663

                                              i         i           p             p       ma
                                                                                          p          w          w      ma
                                                                                                                       w
                          SSJ              0.229     0.086        0.135      0.975      0.740      0.256      0.976   0.925
                          Dynare           0.229     0.086        0.133      0.975      0.735      0.256      0.975   0.924

                                                                    1             2         r                    y
                          SSJ             2.3162   1.0000     1.9684        0.4754     0.3043     3.4468   0.6214
                          Dynare          2.3164   1.0000     1.9684        0.4753     0.3051     3.4472   0.6213
     Herbst-Schorfheide
                                              r         r           g             g        z         z
                          SSJ             0.1905   0.7978     0.6531        0.9908     0.1855     0.9252
                          Dynare          0.1905   0.7978     0.6530        0.9903     0.1855     0.9252




E   Bayesian estimation results
Table E.1 shows the results from the estimation of the Krusell-Smith economy.Table E.2 shows the
results from the estimation of the one-asset HANK economy. Table E.3 shows the results from the
estimation of the two-asset HANK economy. Figures E.1-E.10 show recursive means and posterior
modes for all our estimated models.
                     Table E.1: Estimated parameters for our Krusell-Smith economy

                                                                                      Posterior
                  Shock                     Prior distribution        Mode        Mean      [0.05, 0.95] CI

                                   s.d.      Invgamma(0.4, 4)             0.179   0.182      [0.165, 0.201]
                  TFP shock     AR-1               Beta(0.5, 0.2)         0.908   0.908      [0.864, 0.951]
                                MA-1               Beta(0.5, 0.2)         0.032   0.047      [0.015, 0.097]




                                                             80
                    Table E.2: Estimated parameters for our one-asset HANK economy

                                                               Posterior (shocks)            Posterior (shocks + model)
Parameter / shock                Prior distribution    Mode      Mean     [0.05, 0.95] CI   Mode    Mean    [0.05, 0.95] CI

                          s.d.   Invgamma(0.4, 4)      0.429      0.433   [0.392, 0.477]    0.419   0.429   [0.384, 0.479]
Monetary policy shock
                        AR-1          Beta(0.5, 0.2)   0.529      0.524   [0.475, 0.568]    0.463   0.462   [0.396, 0.527]

                          s.d.   Invgamma(0.4, 4)      0.580      0.583   [0.514, 0.660]    0.569   0.582   [0.507, 0.666]
G shock
                        AR-1          Beta(0.5, 0.2)   0.872      0.871   [0.839, 0.900]    0.833   0.821   [0.770, 0.867]

                          s.d.   Invgamma(0.4, 4)      0.099      0.101   [0.091, 0.112]    0.092   0.096   [0.067, 0.129]
P markup shock
                        AR-1          Beta(0.5, 0.2)   0.881      0.878   [0.849, 0.905]    0.913   0.909   [0.875, 0.942]

                                 Gamma(1.5, 0.25)                                           1.319   1.352   [1.229, 1.495]
y                                Gamma(0.5, 0.25)                                           0.125   0.145   [0.059, 0.255]
                                  Gamma(0.1, 0.1)                                           0.140   0.143   [0.104, 0.186]




                                                       81
                                         Table E.3: Estimated parameters for our two-asset HANK economy

                                                                                                                                 Posterior (shocks)                                               Posterior (shocks + model)
Parameter / shock                                                 Prior distribution                                  Mode          Mean     [0.05, 0.95] CI                                Mode            Mean     [0.05, 0.95] CI

                                                        s.d.          Invgamma(0.4, 4)                                 0.072         0.073        [0.066, 0.080]                             0.071           0.073   [0.066, 0.079]
TFP shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.994         0.941        [0.912, 0.967]                             0.970           0.949   [0.918, 0.976]

                                                        s.d.          Invgamma(0.4, 4)                                 0.433         0.437        [0.395, 0.482]                             0.467           0.600   [0.518, 0.687]
G shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.515         0.513        [0.464, 0.558]                             0.292           0.948   [0.913, 0.978]

                                                        s.d.          Invgamma(0.4, 4)                                 0.093         0.094        [0.085, 0.103]                             0.093           0.096   [0.087, 1.105]
 shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.941         0.938        [0.907, 0.966]                             0.970           0.944   [0.911, 0.972]

                                                        s.d.          Invgamma(0.4, 4)                                 0.179         0.184        [0.151, 0.222]                             0.089           0.441   [0.390, 0.501]
r I (investment) shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.770         0.766        [0.720, 0.809]                             0.867          0.6473   [0.576, 0.708]

                                                        s.d.          Invgamma(0.4, 4)                                 0.144         0.149        [0.125, 0.176]                             0.656           0.625   [0.450, 0.849]
Monetary policy shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.825         0.823        [0.792, 0.851]                             0.844           0.747   [0.687, 0.802]

                                                        s.d.          Invgamma(0.4, 4)                                 0.092         0.093        [0.084, 0.102]                             0.059           0.051   [0.034, 0.070]
P markup shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.902         0.900        [0.878, 0.920]                             0.888           0.895   [0.859, 0.925]

                                                        s.d.          Invgamma(0.4, 4)                                 0.434         0.438        [0.400, 0.480]                             0.142           0.157   [0.122, 0.196]
W markup shock
                                                     AR-1                      Beta(0.5, 0.2)                          0.887         0.885        [0.857, 0.910]                           0.6498            0.574   [0.446, 0.707]

                                                                      Gamma(1.5, 0.25)                                                                                                       1.203           1.229   [1.020, 1.564]
y                                                                     Gamma(0.5, 0.25)                                                                                                       0.086           2.714   [2.416, 3.077]
p                                                                      Gamma(0.1, 0.1)                                                                                                       0.035           0.034   [0.012, 0.065]
w                                                                      Gamma(0.1, 0.1)                                                                                                       0.007           0.009   [0.006, 0.014]
 I                                                                             Gamma(4, 2)                                                                                                   0.267           0.534   [0.358, 0.763]


            Figure E.1: Recursive means for the RWMH estimation of the Krusell-Smith model

                                                     TFP shock s.d.                                                 TFP shock AR-1                                           TFP shock AR-2
                                 0.186
                                                                                                                                                               0.06
               Parameter value




                                                                                   Parameter value




                                                                                                                                             Parameter value




                                 0.184                                                               0.94
                                                                                                                                                               0.05
                                 0.182
                                                                                                     0.92                                                      0.04
                                 0.180
                                                                                                                                                               0.03
                                 0.178
                                                                                                     0.90
                                         0             20000          40000                                 0          20000       40000                              0         20000        40000
                                                          Draw                                                            Draw                                                     Draw




          Figure E.2: Posterior distributions for the RWMH estimation of the Krusell-Smith model

                                                    TFP shock s.d.                                                 TFP shock AR-1                                           TFP shock AR-2
                                 40
                                                                                                     15
                                                                                                                                                               15
                                 30
                                                                                                     10
               Density




                                                                                   Density




                                                                                                                                             Density




                                                                                                                                                               10
                                 20
                                                                                                      5                                                         5
                                 10

                                  0                                                                   0                                                         0
                                             0.16      0.18   0.20      0.22                              0.80      0.85    0.90     0.95                                 0.05    0.10     0.15      0.20
                                                    Parameter value                                                  Parameter value                                          Parameter value



                                                          Posterior density                                      Recursive average                    Mode from optimization




                                                                                                                       82
  Figure E.3: Recursive means for the RWMH estimation of the one-asset HANK model with shocks

                                                      Monetary shock s.d.                                              Monetary shock AR-1                                                        G shock s.d.
                                    0.45
                  Parameter value




                                                                                       Parameter value




                                                                                                                                                       Parameter value
                                                                                                                                                                         0.650
                                    0.44                                                                 0.54
                                                                                                                                                                         0.625

                                    0.43                                                                 0.52                                                            0.600

                                                                                                                                                                         0.575
                                               0            20000       40000                                    0            20000       40000                                        0           20000        40000
                                                               Draw                                                              Draw                                                                 Draw


                                                         G shock AR-1                                                   P markup shock s.d.                                                P markup shock AR-1
                              0.88
                                                                                                         0.115                                                                 0.90
            Parameter value




                                                                                       Parameter value




                                                                                                                                                             Parameter value
                              0.87
                                                                                                         0.110
                                                                                                                                                                               0.88
                              0.86                                                                       0.105

                                                                                                         0.100                                                                 0.86
                                           0               20000        40000                                     0           20000        40000                                       0           20000        40000
                                                              Draw                                                               Draw                                                                 Draw




Figure E.4: Posterior distributions for the RWMH estimation of the one-asset HANK model with shocks

                                                   Monetary shock s.d.                                                 Monetary shock AR-1                                                       G shock s.d.
                                                                                                         15                                                          10.0
                              15
                                                                                                                                                                           7.5
                                                                                                         10
            Density




                                                                                       Density




                                                                                                                                                      Density




                              10
                                                                                                                                                                           5.0
                                    5                                                                     5
                                                                                                                                                                           2.5

                                    0                                                                     0                                                                0.0
                                        0.35          0.40   0.45     0.50      0.55                          0.40       0.45    0.50   0.55   0.60                                        0.5        0.6        0.7
                                                         Parameter value                                                    Parameter value                                                      Parameter value


                                                        G shock AR-1                                                   P markup shock s.d.                                                 P markup shock AR-1
                              20
                                                                                                         60
                                                                                                                                                                               20
                              15
            Density




                                                                                       Density




                                                                                                                                                             Density




                                                                                                         40
                              10
                                                                                                                                                                               10
                                                                                                         20
                                    5

                                    0                                                                     0                                                                     0
                                               0.80         0.85        0.90                                    0.08           0.10        0.12                                     0.80          0.85        0.90
                                                        Parameter value                                                    Parameter value                                                       Parameter value



                                                               Posterior density                                       Recursive average                                 Mode from optimization




                                                                                                                              83
Figure E.5: Recursive means for the RWMH estimation of the one-asset HANK model with shocks and
                                          parameters

                                                   Monetary shock s.d.                                                       Monetary shock AR-1                                                        G shock s.d.
                                                                                                                                                                                   0.66
                                                                                                         0.50
            Parameter value




                                                                                       Parameter value




                                                                                                                                                                 Parameter value
                              0.43                                                                                                                                                 0.64

                              0.42                                                                                                                                                 0.62
                                                                                                         0.48
                              0.41                                                                                                                                                 0.60
                                                                                                         0.46                                                                      0.58
                              0.40
                                           0           20000        40000                                             0            20000          40000                                    0             20000       40000
                                                          Draw                                                                        Draw                                                                  Draw


                                                      G shock AR-1                                                            P markup shock s.d.                                                P markup shock AR-1
                              0.82                                                                       0.10                                                                      0.920
            Parameter value




                                                                                       Parameter value




                                                                                                                                                                 Parameter value
                              0.81                                                                       0.09
                                                                                                                                                                                   0.915
                              0.80                                                                       0.08
                                                                                                                                                                                   0.910
                              0.79
                                                                                                         0.07
                              0.78                                                                                                                                                 0.905
                                           0           20000        40000                                             0            20000          40000                                    0              20000        40000
                                                          Draw                                                                        Draw                                                                   Draw


                                                                                                                                        y                                                                     
                              1.40                                                                                                                                                 0.15
                                                                                                               0.25
            Parameter value




                                                                                             Parameter value




                                                                                                                                                                 Parameter value
                              1.38
                                                                                                                                                                                   0.14
                              1.36                                                                             0.20                                                                0.13
                              1.34
                                                                                                                                                                                   0.12
                                                                                                               0.15
                              1.32
                                           0           20000        40000                                              0           20000          40000                                    0             20000       40000
                                                          Draw                                                                        Draw                                                                  Draw




Figure E.6: Posterior distributions for the RWMH estimation of the one-asset HANK model with shocks
                                             and parameters

                                                  Monetary shock s.d.                                                      Monetary shock AR-1                                                        G shock s.d.
                                                                                               10.0
                                                                                                                                                                                   8
                              10                                                                     7.5
                                                                                                                                                                                   6
            Density




                                                                                   Density




                                                                                                                                                                 Density




                                                                                                     5.0                                                                           4
                                  5
                                                                                                     2.5                                                                           2

                                  0                                                                  0.0                                                                           0
                                          0.35     0.40   0.45    0.50      0.55                                               0.4       0.5             0.6                                   0.5         0.6      0.7        0.8
                                                     Parameter value                                                            Parameter value                                                       Parameter value


                                                      G shock AR-1                                                           P markup shock s.d.                                               P markup shock AR-1
                                                                                                                                                                                   20
                                                                                                         20
                                  10                                                                                                                                               15
                                                                                                         15
                     Density




                                                                                       Density




                                                                                                                                                                 Density




                                                                                                                                                                                   10
                                                                                                         10
                                      5
                                                                                                               5                                                                       5

                                      0                                                                        0                                                                       0
                                            0.70     0.75  0.80    0.85     0.90                                      0.05        0.10      0.15          0.20                                 0.85        0.90       0.95
                                                      Parameter value                                                           Parameter value                                                       Parameter value


                                                                                                                                      y                                                                      

                                                                                                         6                                                                         15
                              4
            Density




                                                                                       Density




                                                                                                                                                                 Density




                                                                                                         4                                                                         10

                              2
                                                                                                         2                                                                             5

                              0                                                                          0                                                                             0
                                            1.2         1.4       1.6                                          0.0                 0.2             0.4                                         0.10      0.15    0.20        0.25
                                                    Parameter value                                                             Parameter value                                                       Parameter value



                                                           Posterior density                                               Recursive average                              Mode from optimization




                                                                                                                                   84
Figure E.7: Recursive means for the RWMH estimation of the two-asset HANK model with shocks

                                          TFP shock s.d.                                                                TFP shock AR-1                                                                      G shock s.d.
                                                                                                       0.945                                                                           0.44
                           0.078
         Parameter value




                                                                                     Parameter value




                                                                                                                                                                     Parameter value
                                                                                                       0.940                                                                           0.43
                           0.076
                                                                                                       0.935
                           0.074                                                                                                                                                       0.42
                                                                                                       0.930
                           0.072                                                                                                                                                       0.41
                                                                                                       0.925
                                   0         20000                       40000                                  0          20000                         40000                                      0       20000      40000
                                                Draw                                                                          Draw                                                                             Draw


                                          G shock AR-1                                                                      shock s.d.                                                                       shock AR-1
                           0.56
         Parameter value




                                                                                     Parameter value




                                                                                                                                                                           Parameter value
                                                                                                       0.094                                                                                 0.94
                           0.54
                                                                                                       0.092                                                                                 0.93
                           0.52

                                                                                                       0.090
                           0.50                                                                                                                                                              0.92
                                   0        20000                        40000                                  0          20000                         40000                                      0        20000         40000
                                               Draw                                                                           Draw                                                                              Draw


                                       Investment shock s.d.                                                        Investment shock AR-1                                                               Monetary shock s.d.
                           0.22                                                                        0.76
         Parameter value




                                                                                     Parameter value




                                                                                                                                                                     Parameter value


                                                                                                                                                                                       0.145
                           0.21
                                                                                                       0.74
                           0.20                                                                                                                                                        0.140

                           0.19                                                                        0.72
                                                                                                                                                                                       0.135
                                   0        20000                        40000                                 0           20000                         40000                                      0        20000         40000
                                               Draw                                                                           Draw                                                                              Draw


                                       Monetary shock AR-1                                                             P markup shock s.d.                                                              P markup shock AR-1
                           0.840                                                                       0.098                                                                           0.910
         Parameter value




                                                                                     Parameter value




                                                                                                                                                                     Parameter value




                           0.835                                                                       0.096
                                                                                                                                                                                       0.905
                           0.830                                                                       0.094
                                                                                                                                                                                       0.900
                                                                                                       0.092
                           0.825
                                                                                                       0.090                                                                           0.895
                                   0         20000                       40000                                  0          20000                         40000                                      0        20000         40000
                                                Draw                                                                          Draw                                                                              Draw


                                                                             W markup shock s.d.                                                              W markup shock AR-1
                                                                                                                                                  0.91
                                                Parameter value




                                                                                                                                Parameter value




                                                                  0.45
                                                                                                                                                  0.90

                                                                  0.44
                                                                                                                                                  0.89

                                                                  0.43
                                                                         0       20000                         40000                                      0        20000                            40000
                                                                                    Draw                                                                              Draw




                                                                                                                           85
Figure E.8: Posterior distributions for the RWMH estimation of the two-asset HANK model with shocks

                                         TFP shock s.d.                                                    TFP shock AR-1                                                    G shock s.d.
                      100                                                                                                                                   15
                                                                                          20
                       75
                                                                                                                                                            10
            Density




                                                                                Density




                                                                                                                                                  Density
                       50
                                                                                          10
                                                                                                                                                             5
                       25

                           0                                                               0                                                                 0
                               0.06        0.07      0.08             0.09                                     0.90          0.95                                0.35      0.40   0.45     0.50      0.55
                                         Parameter value                                                       Parameter value                                               Parameter value


                                          G shock AR-1                                                           shock s.d.                                                   shock AR-1
                                                                                                                                                            20
                                                                                          60
                          10
                                                                                                                                                            15
                Density




                                                                                Density




                                                                                                                                                  Density
                                                                                          40
                                                                                                                                                            10
                           5
                                                                                          20                                                                 5

                           0                                                               0                                                                 0
                                0.40     0.45  0.50    0.55         0.60                          0.08          0.09    0.10        0.11                                      0.90         0.95
                                          Parameter value                                                      Parameter value                                               Parameter value


                                      Investment shock s.d.                                           Investment shock AR-1                                             Monetary shock s.d.
                                                                                          15
                      15
                                                                                                                                                            20
                                                                                          10
            Density




                                                                                Density




                                                                                                                                                  Density

                      10
                                                                                           5                                                                10
                       5

                       0                                                                   0                                                                 0
                                  0.15        0.20       0.25                                  0.65      0.70   0.75    0.80          0.85                    0.10            0.15         0.20
                                         Parameter value                                                    Parameter value                                                  Parameter value


                                  Monetary shock AR-1                                                   P markup shock s.d.                                             P markup shock AR-1
                                                                                                                                                            30
                      20                                                                  60
                                                                                                                                                            20
            Density




                                                                                Density




                                                                                                                                                  Density




                                                                                          40
                      10
                                                                                          20                                                                10


                       0                                                                   0                                                                 0
                           0.75            0.80        0.85                                      0.08      0.09  0.10     0.11             0.12                    0.850     0.875   0.900   0.925
                                         Parameter value                                                   Parameter value                                                   Parameter value


                                                                   W markup shock s.d.                                              W markup shock AR-1
                                                          15
                                                                                                                               20
                                                          10
                                                Density




                                                                                                                     Density




                                                                                                                               10
                                                           5

                                                           0                                                                    0
                                                            0.35   0.40      0.45    0.50               0.55                               0.85         0.90
                                                                          Parameter value                                                   Parameter value



                                               Posterior density                                      Recursive average                               Mode from optimization




                                                                                                                 86
       Figure E.9: Recursive means for the RWMH estimation of the two-asset HANK model with shocks and
                                                 parameters

                                       TFP shock s.d.                                                                  TFP shock AR-1                                                             G shock s.d.                                                                        G shock AR-1
                                                                                                                                                                                                                                                                      0.96
                  0.076                                                                                                                                                        0.75
Parameter value




                                                                                      Parameter value




                                                                                                                                                             Parameter value




                                                                                                                                                                                                                                                    Parameter value
                                                                                                        0.95
                                                                                                                                                                               0.70                                                                                   0.95
                  0.074
                                                                                                        0.94                                                                   0.65
                                                                                                                                                                                                                                                                      0.94
                  0.072                                                                                                                                                        0.60
                                0        20000                       40000                                      0        20000                     40000                               0           20000                       40000                                          0         20000     40000
                                            Draw                                                                            Draw                                                                      Draw                                                                                 Draw


                                          shock s.d.                                                                     shock AR-1                                                           Investment shock s.d.                                                               Investment shock AR-1
                                                                                                        0.96                                                                   0.50                                                                             0.64
      Parameter value




                                                                                      Parameter value




                                                                                                                                                             Parameter value




                                                                                                                                                                                                                                              Parameter value
                        0.105
                                                                                                                                                                               0.48                                                                             0.62
                                                                                                        0.95
                        0.100                                                                                                                                                                                                                                   0.60
                                                                                                                                                                               0.46

                                                                                                        0.94                                                                                                                                                    0.58
                                                                                                                                                                               0.44
                                0         20000                      40000                                      0        20000                     40000                               0           20000                       40000                                         0         20000      40000
                                             Draw                                                                           Draw                                                                      Draw                                                                                Draw


                                    Monetary shock s.d.                                                             Monetary shock AR-1                                                        P markup shock s.d.                                                                 P markup shock AR-1
                                                                                                  0.82                                                                                                                                                                0.92
                  0.6                                                                                                                                                          0.065
Parameter value




                                                                                Parameter value




                                                                                                                                                             Parameter value




                                                                                                                                                                                                                                                    Parameter value
                                                                                                  0.80
                                                                                                                                                                               0.060                                                                                  0.91
                  0.5                                                                             0.78

                                                                                                  0.76                                                                         0.055
                  0.4                                                                                                                                                                                                                                                 0.90
                                                                                                  0.74                                                                         0.050
                           0            20000                        40000                                     0         20000                     40000                                  0         20000                          40000                                      0         20000     40000
                                           Draw                                                                             Draw                                                                       Draw                                                                                Draw


                                    W markup shock s.d.                                                             W markup shock AR-1                                                                                                                                                    y
                                                                                                                                                                               1.5                                                                              3.1
                  0.17
Parameter value




                                                                                Parameter value




                                                                                                                                                             Parameter value




                                                                                                                                                                                                                                              Parameter value




                                                                                                  0.56                                                                         1.4                                                                              3.0
                  0.16
                                                                                                                                                                               1.3                                                                              2.9
                                                                                                  0.54

                  0.15                                                                                                                                                         1.2                                                                              2.8
                                                                                                  0.52
                                                                                                                                                                                                                                                                2.7
                            0            20000                       40000                                     0         20000                     40000                              0           20000                        40000                                     0             20000      40000
                                            Draw                                                                            Draw                                                                     Draw                                                                                 Draw


                                                                                  p                                                                                  w                                                                                I
                                                              0.07                                                                            0.0090
                                                                                                                                                                                                                         0.8
                                            Parameter value




                                                                                                                            Parameter value




                                                                                                                                                                                                       Parameter value




                                                              0.06                                                                            0.0085

                                                                                                                                              0.0080                                                                     0.7
                                                              0.05
                                                                                                                                              0.0075
                                                              0.04                                                                                                                                                       0.6
                                                                                                                                              0.0070
                                                                     0       20000                             40000                                   0   20000                          40000                                0           20000                             40000
                                                                                Draw                                                                          Draw                                                                            Draw




                                                                                                                                                           87
Figure E.10: Posterior distributions for the RWMH estimation of the two-asset HANK model with shocks
                                              and parameters

                                    TFP shock s.d.                                                      TFP shock AR-1                                                              G shock s.d.                                                            G shock AR-1
          100                                                                                                                                                                                                                            20
                                                                                    20                                                                   6
              75                                                                                                                                                                                                                         15
                                                                                    15
Density




                                                                          Density




                                                                                                                                               Density




                                                                                                                                                                                                                               Density
                                                                                                                                                         4
              50                                                                                                                                                                                                                         10
                                                                                    10
              25                                                                                                                                         2                                                                                   5
                                                                                        5

                  0                                                                     0                                                                0                                                                                   0
                        0.06            0.07       0.08                                         0.900     0.925 0.950 0.975                                            0.5         0.6       0.7                 0.8                                        0.90        0.95
                                     Parameter value                                                     Parameter value                                                        Parameter value                                                             Parameter value


                                      shock s.d.                                                          shock AR-1                                                         Investment shock s.d.                                                      Investment shock AR-1
          80                                                                                                                                                                                                                         10.0
                                                                                    20
          60                                                                                                                                                 10                                                                       7.5
                                                                                    15
Density




                                                                          Density




                                                                                                                                                   Density




                                                                                                                                                                                                                           Density
          40                                                                                                                                                                                                                          5.0
                                                                                    10
                                                                                                                                                                 5
          20                                                                            5                                                                                                                                             2.5

              0                                                                         0                                                                        0                                                                    0.0
                      0.08          0.09    0.10     0.11                                       0.900     0.925 0.950 0.975                                          0.35      0.40   0.45   0.50             0.55                               0.5          0.6         0.7
                                     Parameter value                                                     Parameter value                                                          Parameter value                                                           Parameter value


                              Monetary shock s.d.                                                  Monetary shock AR-1                                                       P markup shock s.d.                                                        P markup shock AR-1
          4
                                                                                                                                                                                                                                         20
                                                                                        10                                                               30
          3
                                                                                                                                                                                                                                         15
Density




                                                                              Density




                                                                                                                                               Density




                                                                                                                                                                                                                               Density
                                                                                                                                                         20
          2                                                                                                                                                                                                                              10
                                                                                            5
          1                                                                                                                                              10                                                                                  5

          0                                                                                 0                                                                0                                                                               0
                             0.50      0.75    1.00           1.25                              0.65     0.70  0.75    0.80            0.85                                  0.04       0.06     0.08           0.10                          0.80          0.85       0.90      0.95
                                    Parameter value                                                       Parameter value                                                           Parameter value                                                         Parameter value


                              W markup shock s.d.                                                W markup shock AR-1                                                                                                                                              y
                                                                                                                                                                                                                                         3
          15
                                                                                    4
                                                                                                                                                         2                                                                               2
Density




                                                                          Density




                                                                                                                                               Density




                                                                                                                                                                                                                               Density




          10
                                                                                    2
                                                                                                                                                         1                                                                               1
              5

              0                                                                     0                                                                    0                                                                               0
                      0.10            0.15        0.20                                           0.4             0.6                    0.8                      1.0           1.2    1.4       1.6                  1.8                         2.25     2.50   2.75     3.00   3.25
                                    Parameter value                                                     Parameter value                                                         Parameter value                                                             Parameter value


                                                                          p                                                                    w                                                                                 I
                                                                                                                         200
                                                                                                                                                                                                    3
                                                     20                                                                  150
                                           Density




                                                                                                               Density




                                                                                                                                                                                          Density




                                                                                                                                                                                                    2
                                                                                                                         100
                                                     10
                                                                                                                          50                                                                        1

                                                     0                                                                     0                                                                        0
                                                     0.000   0.025     0.050 0.075 0.100                                       0.005      0.010    0.015                       0.020                    0.2    0.4    0.6      0.8                         1.0
                                                                     Parameter value                                                   Parameter value                                                           Parameter value



                                                                          Posterior density                                     Recursive average                                             Mode from optimization




                                                                                                                                              88
